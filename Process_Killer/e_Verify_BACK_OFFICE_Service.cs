using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.ServiceProcess;
using System.Text;
using System.Text.RegularExpressions;
using System.Configuration;
using System.Threading;
using System.Net.Mail;
using System.IO;
using System.Data.SqlClient;
using Com.StellmanGreene.CSVReader;
using System.Net;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;
using System.Linq;
using System.Globalization;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using ExcelDataReader;
using WinSCP;
using RabbitMQ;
using RabbitMQ.Client;
using e_Verify_BACK_OFFICE_Service_Interface;

namespace e_Verify_BACK_OFFICE_Service
//namespace e_Verify_BACK_OFFICE_Service
{
      
    public partial class e_Verify_BACK_OFFICE_Service : ServiceBase
        
    {
        public string[] Tag_Separator = { "BCN" };

        private Select_Research.SQLDB          m_databaseClass      = new Select_Research.SQLDB() ;
        private DBConnections.TrxnDBConnection m_databaseConnection = new DBConnections.TrxnDBConnection();

        private Select_Research.SQLDB          m_SMSDatabaseClass   = new Select_Research.SQLDB();
        private DBConnections.SMSDBConnection  m_SMSConnection      = new DBConnections.SMSDBConnection();

        String eVerify_Thread = ConfigurationManager.AppSettings.Get("Process");

        //int Time = Convert.ToInt32(ConfigurationManager.AppSettings.Get("Time"));

        public e_Verify_BACK_OFFICE_Service()
        {
            Hashtable tmpHash1 = new Hashtable();
            string Error_Time1 = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss"));
            tmpHash1.Add("STEP_DESCR", " e_Verify_BACK_OFFICE_Service 1");
            tmpHash1.Add("LOGGER_DESCR", " e_Verify_BACK_OFFICE_Service 1");
            tmpHash1.Add("DATE_LOGGED", Error_Time1);
            SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "Service_Logger", tmpHash1);

            InitializeComponent();
            /*
             
             
            //fn_Post_to_Barclays_Brains();
            Post_Mobile_Charges_n_Levy_ABC();
            Reverse_Mobile_Transactions_Data_Insert_Zipit();
            Reverse_Mobile_Transactions_Zipit();
            Reverse_Mobile_Transactions_Data_Insert();
            Reverse_Mobile_Transactions();

            //fn_Post_to_Barclays_Brains();
            fn_Post_to_ZIMRA();
            Alert_for_ZIMRA_Transactions();
            fn_Post_to_ZIMRA_OfflineFile();
            //Synch_Customers_to_Selcom();
            //Synch_Accounts_to_Selcom();

            //De_Synch_Accounts_from_Selcom();
            //De_Synch_Customers_from_Selcom();
            Import_Barclays_StaticData();

            Import_SCB_AML_Transactions();
            Import_SCB_Static_Data();

            CreateAML_File_CTR_SCB();
            CreateAML_File_STR();
            
             */


            Hashtable tmpHash2 = new Hashtable();
            string Error_Time2 = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss"));
            tmpHash2.Add("STEP_DESCR", " e_Verify_BACK_OFFICE_Service 2");
            tmpHash2.Add("LOGGER_DESCR", " e_Verify_BACK_OFFICE_Service 2");
            tmpHash2.Add("DATE_LOGGED", Error_Time2);
            SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "Service_Logger", tmpHash2);

        }

        [STAThread]
        protected override void OnStart(string[] args)
        {
            timer1.Enabled = true;
            Thread thread         = new Thread(new ParameterizedThreadStart(DoWork));
            thread.ApartmentState = ApartmentState.STA;
            thread.Start(eVerify_Thread);

            //Thread myth;
            //myth = new Thread(new System.Threading.ThreadStart(CallSaveDialog));
            //myth.ApartmentState = ApartmentState.STA;
            //myth.Start();
        }


        protected override void OnStop()
        {
            // TODO: Add code here to perform any tear-down necessary to stop your service.
        }

        [STAThread]
        public void Execute()
        {
            int LoggingAll = Convert.ToInt32(ConfigurationManager.AppSettings.Get("LoggingAll"));

            if (LoggingAll == 1)
            {
                LogStep("Step 1", "Inside Excute");
            }

            MailMessage mail = new MailMessage();

            var ExChangeServerName = ConfigurationManager.AppSettings["ExChangeServerName"];

            SmtpClient SmtpServer = new SmtpClient(ExChangeServerName);

            if (LoggingAll == 1)
            {
                LogStep("Step 2", "Just before Try");
            }

            try
            {
                var varUP_Files_To_Be_Uploaded_Into_Interface_Folder = ConfigurationManager.AppSettings["UP_Files_To_Be_Uploaded_Into_Interface_Folder"];
                var Archived_Folder = ConfigurationManager.AppSettings["Archived_Folder"];
                var TempForAttachements_Folder = ConfigurationManager.AppSettings["TempForAttachements_Folder"];

                var strSender_From = ConfigurationManager.AppSettings["Sender_From"];
                var Receiver_To = ConfigurationManager.AppSettings["Receiver_To"];
                var Copied_CC = ConfigurationManager.AppSettings["Copied_CC"];
                var Copied_CC_Two = ConfigurationManager.AppSettings["Copied_CC_Two"];
                var Copied_CC_Three = ConfigurationManager.AppSettings["Copied_CC_Three"];
                var Copied_CC_Four = ConfigurationManager.AppSettings["Copied_CC_Four"];
                var Copied_CC_Five = ConfigurationManager.AppSettings["Copied_CC_Five"];
                var Copied_CC_Six = ConfigurationManager.AppSettings["Copied_CC_Six"];
                var Copied_CC_Seven = ConfigurationManager.AppSettings["Copied_CC_Seven"];
                var Copied_CC_8 = ConfigurationManager.AppSettings["Copied_CC_8"];
                var Copied_CC_9 = ConfigurationManager.AppSettings["Copied_CC_9"];
                var Copied_CC_10 = ConfigurationManager.AppSettings["Copied_CC_10"];
                var Copied_CC_11 = ConfigurationManager.AppSettings["Copied_CC_11"];
                var Copied_CC_12 = ConfigurationManager.AppSettings["Copied_CC_12"];
                var Copied_CC_13 = ConfigurationManager.AppSettings["Copied_CC_13"];
                var Copied_CC_14 = ConfigurationManager.AppSettings["Copied_CC_14"];
                var Copied_CC_15 = ConfigurationManager.AppSettings["Copied_CC_15"];
                var Copied_CC_16 = ConfigurationManager.AppSettings["Copied_CC_16"];
                var Copied_CC_17 = ConfigurationManager.AppSettings["Copied_CC_17"];
                var Copied_CC_18 = ConfigurationManager.AppSettings["Copied_CC_18"];
                var Copied_CC_19 = ConfigurationManager.AppSettings["Copied_CC_19"];
                var Copied_CC_20 = ConfigurationManager.AppSettings["Copied_CC_20"];


                var Subject = ConfigurationManager.AppSettings["Subject"];
                var BodyLineAutomatedMail = ConfigurationManager.AppSettings["BodyLineAutomatedMail"];
                var BodyLineOne = ConfigurationManager.AppSettings["BodyLineOne"];
                var BodyLineTwo = ConfigurationManager.AppSettings["BodyLineTwo"];
                var BodyLineThree = ConfigurationManager.AppSettings["BodyLineThree"];
                var BodyLineFour = ConfigurationManager.AppSettings["BodyLineFour"];
                var BodyLineFive = ConfigurationManager.AppSettings["BodyLineFive"];
                var BodyLineSix = ConfigurationManager.AppSettings["BodyLineSix"];
                var BodyLineSeven = ConfigurationManager.AppSettings["BodyLineSeven"];
                var BodyLineEight = ConfigurationManager.AppSettings["BodyLineEight"];
                var BodyLineNine = ConfigurationManager.AppSettings["BodyLineNine"];
                var BodyLineNineTwo = ConfigurationManager.AppSettings["BodyLineNineTwo"];
                var BodyLineTen = ConfigurationManager.AppSettings["BodyLineTen"];
                var BodyLineElven = ConfigurationManager.AppSettings["BodyLineElven"];
                var BodyLineTwelve = ConfigurationManager.AppSettings["BodyLineTwelve"];
                var CellNumberToSendTo = ConfigurationManager.AppSettings["CellNumberToSendTo"];
                var SMSMessage = ConfigurationManager.AppSettings["SMSMessage"];
                var SMSMessageSalutation = ConfigurationManager.AppSettings["SMSMessageSalutation"];
                
                int varCustomerCount = 0;

                var varDateTimeToday = DateTime.Today;

                if (LoggingAll == 1)
                {
                    LogStep("Step 3", "After ConfigurationManager Get Section");
                }

                if (Directory.Exists(varUP_Files_To_Be_Uploaded_Into_Interface_Folder))
                {
                    if (LoggingAll == 1)
                    {
                        LogStep("Step 4", "After Directory.Exists");
                    }
                    mail.From = new MailAddress(strSender_From);
                    mail.To.Add(Receiver_To);

                    if (Copied_CC.Length != 0) { mail.CC.Add(Copied_CC); }
                    if (Copied_CC_Two.Length != 0) { mail.CC.Add(Copied_CC_Two); }
                    if (Copied_CC_Three.Length != 0) { mail.CC.Add(Copied_CC_Three); }
                    if (Copied_CC_Four.Length != 0) { mail.CC.Add(Copied_CC_Four); }
                    if (Copied_CC_Five.Length !=0) {mail.CC.Add(Copied_CC_Five);}
                    if (Copied_CC_Six.Length !=0) {mail.CC.Add(Copied_CC_Six);}
                    if (Copied_CC_Seven.Length !=0) {mail.CC.Add(Copied_CC_Seven);}
                    if (Copied_CC_8.Length !=0) {mail.CC.Add(Copied_CC_8);}
                    //if (Copied_CC_9.Length !=0) {mail.CC.Add(Copied_CC_9);}
                    //if (Copied_CC_10.Length !=0) {mail.CC.Add(Copied_CC_10);}
                    //if (Copied_CC_11.Length !=0) {mail.CC.Add(Copied_CC);}
                    //if (Copied_CC_12.Length !=0) {mail.CC.Add(Copied_CC_Two);}
                    //if (Copied_CC_13.Length !=0) {mail.CC.Add(Copied_CC_Three);}
                    //if (Copied_CC_14.Length !=0) {mail.CC.Add(Copied_CC_Four);}
                    //if (Copied_CC_15.Length !=0) {mail.CC.Add(Copied_CC_Five);}
                    //if (Copied_CC_16.Length !=0) {mail.CC.Add(Copied_CC_Six);}
                    //if (Copied_CC_17.Length !=0) {mail.CC.Add(Copied_CC_Seven);}
                    //if (Copied_CC_18.Length !=0) {mail.CC.Add(Copied_CC_8);}
                    //if (Copied_CC_19.Length !=0) {mail.CC.Add(Copied_CC_9);}
                    //if (Copied_CC_20.Length != 0) { mail.CC.Add(Copied_CC_10); }

                    if (LoggingAll == 1)
                    {
                        LogStep("Step 4.1 ", "Before Getting Email Addresses");
                    }

                    SqlConnection con = new SqlConnection();
                    con.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
                    con.Open();

                    SqlCommand cmd = new SqlCommand();
                    cmd.CommandType = System.Data.CommandType.StoredProcedure;
                    cmd.Connection = con;

                    cmd.CommandText = "subGet_Emails";


                    SqlDataReader sqlReader = cmd.ExecuteReader();
                    if (sqlReader != null && sqlReader.HasRows)
                    {
                        while (sqlReader.Read())
                        {
                            mail.CC.Add(sqlReader["EmailAddress"].ToString());
                        }
                    }

                    con.Close();


                    if (LoggingAll == 1)
                    {
                        LogStep("Step 4.2 ", "After Getting Email Addresses");
                    }


                    //mail.Bcc.Add("emusabayana@bancabc.com");
                    //string pathFile = @"D:\SoftwareDev\WindowsFormsSendEMails\TestfilesTobeSendAsAttachment";
                    //string pathToArchiveFile = @"D:\SoftwareDev\WindowsFormsSendEMails\TestfilesTobeSendAsAttachment\Archived\";
                    //string pathTempForAttachements = @"D:\SoftwareDev\WindowsFormsSendEMails\TestfilesTobeSendAsAttachment\TempForAttachements\";

                    string pathFile = varUP_Files_To_Be_Uploaded_Into_Interface_Folder;
                    string pathToArchiveFile = Archived_Folder;
                    string pathTempForAttachements = TempForAttachements_Folder;

                    var pattern1 = ConfigurationManager.AppSettings["pattern1"];

                    ////Clear temp folder
                    //foreach (var file in new DirectoryInfo(pathTempForAttachements).GetFiles(pattern1))
                    //{
                    //    System.IO.File.Delete(pathTempForAttachements + "\\" + file.Name);
                    //}

                    //Copy newer files dropped from Database server to Attachement temp folder
                    // These files are copied to the app server via ftp from SQL Server Job
                    string[] ListfilesToBeCopied = System.IO.Directory.GetFiles(varUP_Files_To_Be_Uploaded_Into_Interface_Folder);
                    if (ListfilesToBeCopied.Length != 0)
                    {
                        pathTempForAttachements = pathTempForAttachements + String.Format("{0:d-MMMM-yyyy}", varDateTimeToday);

                        pathTempForAttachements = pathTempForAttachements + " " + DateTime.Now.ToString("HH mm ss tt");

                        System.IO.Directory.CreateDirectory(pathTempForAttachements);
                    }

                    ListfilesToBeCopied = null;

                    //// month/day numbers without/with leading zeroes
                    //String.Format("{0:M/d/yyyy}", dt);            // "3/9/2008"
                    //String.Format("{0:MM/dd/yyyy}", dt);          // "03/09/2008"

                    //// day/month names
                    //String.Format("{0:ddd, MMM d, yyyy}", dt);    // "Sun, Mar 9, 2008"
                    //String.Format("{0:dddd, MMMM d, yyyy}", dt);

                    //// date separator in german culture is "." (so "/" changes to ".")
                    //String.Format("{0:d/M/yyyy HH:mm:ss}", dt); // "9/3/2008 16:05:07" - english (en-US)
                    //String.Format("{0:d/M/yyyy HH:mm:ss}", dt); // 

                    foreach (var file in new DirectoryInfo(pathFile).GetFiles(pattern1))
                    {

                        if (File.Exists(pathTempForAttachements + "\\" + file.Name))
                        {
                            File.Delete(pathTempForAttachements + "\\" + file.Name);
                        }
                        System.IO.File.Copy(pathFile + "\\" + file.Name, pathTempForAttachements + "\\" + file.Name);

                    }

                    // Move the Files for permanent Archive storage folder to audit trail purposes
                    var pattern2 = ConfigurationManager.AppSettings["pattern2"];
                    foreach (var file in new DirectoryInfo(pathFile).GetFiles(pattern2))
                    {
                        if (File.Exists(pathToArchiveFile + "\\" + file.Name))
                        {
                            File.Delete(pathToArchiveFile + "\\" + file.Name);
                        }

                        // Come back
                       System.IO.File.Move(pathFile + "\\" + file.Name, pathToArchiveFile + "\\" + file.Name);
                    }


                    if (LoggingAll == 1)
                    {
                        LogStep("Step 4.3 ", "After Moving files to folders");
                    }


                    // Attach the files to an email and leave them in that folder
                    // The next Run of this Windows Service Will first delete the Attachment folder before it copies newer files
                    if (Directory.Exists(pathTempForAttachements))
                    {

                        string[] Listfiles = System.IO.Directory.GetFiles(pathTempForAttachements);
                        if (Listfiles.Length != 0)
                        {

                                SqlConnection conn = new SqlConnection();
                                conn.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
                               

                                conn.Open();

                            var pattern = ConfigurationManager.AppSettings["pattern1"];
                            foreach (var file in new DirectoryInfo(pathTempForAttachements).GetFiles(pattern))
                            {

                                if (LoggingAll == 1)
                                {
                                    LogStep("Step Before Data table ", "Before Creating DataTable from Excel");
                                }

                                DataTable dt = CSVReader.ReadCSVFile(pathTempForAttachements + "\\" + file.Name, true);

                                if (LoggingAll == 1)
                                {
                                    LogStep("Step 4.4 ", "After Creating DataTable from Excel");
                                }

                                Int64 var_Branc_number=  SqlHelper.Get_Batch_Number_And_Increament_By_One();

                                if (dt.Rows.Count > 0)
                                {
                                    int i = 0;
                                    foreach (DataRow row in dt.Rows)
                                    {
                                        SqlCommand cmdm = new SqlCommand();
                                        cmdm.CommandType = System.Data.CommandType.StoredProcedure;
                                        cmdm.Connection = conn;
                                        cmdm.CommandText = "sp_Settlement_UP_File_Loads_Insert_One";

                                        string var_Prepaid_Card_Number = "";

                                        if (dt.Columns["Prepaid_Card_Number"] != null)
                                        {
                                            if (dt.Rows[i]["Prepaid_Card_Number"].ToString().Length == 17)
                                            {
                                                var_Prepaid_Card_Number = dt.Rows[i]["Prepaid_Card_Number"].ToString().Trim().Substring(1, 16);

                                                cmdm.Parameters.Add("@parPrepaid_Card_Number", SqlDbType.VarChar).Value = var_Prepaid_Card_Number;
                                            }
                                            else
                                            {
                                                var_Prepaid_Card_Number = dt.Rows[i]["Prepaid_Card_Number"].ToString().Trim();

                                                cmdm.Parameters.Add("@parPrepaid_Card_Number", SqlDbType.VarChar).Value = var_Prepaid_Card_Number;
                                            }
                                        }

                                        string var_Transfer_amount = "";

                                        if (dt.Columns["Transfer_amount"] != null)
                                        {
                                            var_Transfer_amount = dt.Rows[i]["Transfer_amount"].ToString().Trim();
                                            cmdm.Parameters.Add("@parTransfer_amount", SqlDbType.VarChar).Value = var_Transfer_amount;

                                        }

                                        string var_Comments = "";

                                        if (dt.Columns["Comments"] != null)
                                        {
                                            var_Comments = dt.Rows[i]["Comments"].ToString().Trim();
                                            cmdm.Parameters.Add("@parComments", SqlDbType.VarChar).Value = var_Comments;

                                        }


                                        string var_Company_Name = "";

                                        if (dt.Columns["Company_Name"] != null)
                                        {
                                            var_Company_Name = dt.Rows[i]["Company_Name"].ToString().Trim();
                                            cmdm.Parameters.Add("@parCompany_Name", SqlDbType.VarChar).Value = var_Company_Name;

                                        }


                                        string var_Product = "";

                                        if (dt.Columns["Product"] != null)
                                        {
                                            var_Product = dt.Rows[i]["Product"].ToString().Trim();
                                            cmdm.Parameters.Add("@parProduct", SqlDbType.VarChar).Value = var_Product;

                                        }


                                        string var_Sales_Person = "";

                                        if (dt.Columns["Sales_Person"] != null)
                                        {
                                            var_Sales_Person = dt.Rows[i]["Sales_Person"].ToString().Trim();
                                            cmdm.Parameters.Add("@parSales_Person", SqlDbType.VarChar).Value = var_Sales_Person;

                                        }

                                        string var_Cell_Number = "";

                                        if (dt.Columns["Cell_Number"] != null)
                                        {
                                            var_Cell_Number = dt.Rows[i]["Cell_Number"].ToString().Trim();
                                            cmdm.Parameters.Add("@parCell_Number", SqlDbType.VarChar).Value = var_Cell_Number;

                                        }


                                        string var_Currency = "";

                                        if (dt.Columns["Currency"] != null)
                                        {
                                            var_Currency = dt.Rows[i]["Currency"].ToString().Trim();
                                            cmdm.Parameters.Add("@parCurrency", SqlDbType.VarChar).Value = var_Currency;

                                        }

                                        string var_Debit_Account_Number = "";

                                        if (dt.Columns["Debit_Account_Number"] != null)
                                        {
                                            var_Debit_Account_Number = dt.Rows[i]["Debit_Account_Number"].ToString().Trim();
                                            cmdm.Parameters.Add("@parDebit_Account_Number", SqlDbType.VarChar).Value = var_Debit_Account_Number;

                                        }

                                        string var_Beneficiary_Name = "";

                                        if (dt.Columns["Beneficiary_Name"] != null)
                                        {
                                            var_Beneficiary_Name = dt.Rows[i]["Beneficiary_Name"].ToString().Trim();
                                            cmdm.Parameters.Add("@parBeneficiary_Name", SqlDbType.VarChar).Value = var_Beneficiary_Name;

                                        }


                                        string var_Maker_Name = "";

                                        if (dt.Columns["Maker_Name"] != null)
                                        {
                                            var_Maker_Name = dt.Rows[i]["Maker_Name"].ToString().Trim();
                                            cmdm.Parameters.Add("@parMaker_Name", SqlDbType.VarChar).Value = var_Maker_Name;
                                            cmdm.Parameters.Add("@parEnteredBy", SqlDbType.VarChar).Value = var_Maker_Name;

                                        }


                                        string var_Checker_Name = "";

                                        if (dt.Columns["Checker_Name"] != null)
                                        {
                                            var_Checker_Name = dt.Rows[i]["Checker_Name"].ToString().Trim();
                                            cmdm.Parameters.Add("@parChecker_Name", SqlDbType.VarChar).Value = var_Checker_Name;

                                        }

                                        string var_Maker_email = "";

                                        if (dt.Columns["Maker_email"] != null)
                                        {
                                            var_Maker_email = dt.Rows[i]["Maker_email"].ToString().Trim();
                                            cmdm.Parameters.Add("@parMaker_email", SqlDbType.VarChar).Value = var_Maker_email;

                                        }


                                        string var_Checker_email = "";

                                        if (dt.Columns["Checker_email"] != null)
                                        {
                                            var_Checker_email = dt.Rows[i]["Checker_email"].ToString().Trim();
                                            cmdm.Parameters.Add("@parChecker_email", SqlDbType.VarChar).Value = var_Checker_email;

                                        }

                                        string var_RO_Email = "";

                                        if (dt.Columns["RO_Email"] != null)
                                        {
                                            var_RO_Email = dt.Rows[i]["RO_Email"].ToString().Trim();
                                            cmdm.Parameters.Add("@parRO_Email", SqlDbType.VarChar).Value = var_RO_Email;

                                        }


                                        string var_Other_Details_One = "";

                                        if (dt.Columns["Other_Details_One"] != null)
                                        {
                                            var_Other_Details_One = dt.Rows[i]["Other_Details_One"].ToString().Trim();
                                            cmdm.Parameters.Add("@parOther_Details_One", SqlDbType.VarChar).Value = var_Other_Details_One;

                                        }

                                        string var_Other_Details_Two = "";

                                        if (dt.Columns["Other_Details_Two"] != null)
                                        {
                                            var_Other_Details_Two = dt.Rows[i]["Other_Details_Two"].ToString().Trim();
                                            cmdm.Parameters.Add("@parOther_Details_Two", SqlDbType.VarChar).Value = var_Other_Details_Two;

                                        }

                                        string var_Other_Details_Three = "";

                                        if (dt.Columns["Other_Details_Three"] != null)
                                        {
                                            var_Other_Details_Three = dt.Rows[i]["Other_Details_Three"].ToString().Trim();
                                            cmdm.Parameters.Add("@parOther_Details_Three", SqlDbType.VarChar).Value = var_Other_Details_Three;

                                        }
                                         
                                         
                                        cmdm.Parameters.Add("@parSettlement_UP_File_Loads_ID", SqlDbType.BigInt).Direction = ParameterDirection.Output;
                                        //cmdm.Parameters.Add("@parDateEntered_OUT", SqlDbType.VarChar).Direction = ParameterDirection.Output;

                                        cmdm.Parameters.Add("@parBatch_Number_ID", SqlDbType.BigInt).Value = var_Branc_number;
                                        // Put Logic Which gets Batch Number even from XML File
                                        
                                        cmdm.Parameters.Add("@parUp_Load_Message", SqlDbType.VarChar).Value = Convert.ToString(i) + " : Record number within Batch";


                                        //using(int recordCount = cmdm.ExecuteNonQuery());
                                        int recordCount = cmdm.ExecuteNonQuery();
                                        

                                        string varSettlement_UP_File_Loads_ID = Convert.ToString(cmdm.Parameters["@parSettlement_UP_File_Loads_ID"].Value);
                                        //string varparDateEntered_OUT = Convert.ToString(cmdm.Parameters["@parDateEntered_OUT"].Value);

                                        string varDateEntered = String.Format("{0:dd-MM-yyyy}", varDateTimeToday);
                                        //varDateEntered = "30-08-2013";

                                        // Cards length should be 16 digist only else don't push the record to FCUBS for processing the card with less or more digits
                                        // Even spaces are counted as 
                                        if (var_Prepaid_Card_Number.Length == 16) 
                                        {
                                            Post_To_FCUBS_Process
                                               (
                                                 SqlHelper.GetCurrentBranche(), var_Prepaid_Card_Number, var_Maker_Name, varDateEntered, var_Transfer_amount, var_Checker_Name, var_Debit_Account_Number, var_Comments,
                                                 varSettlement_UP_File_Loads_ID

                                                 );
                                        }
                                        else
                                        {
                                            sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS("Card Length = " + var_Prepaid_Card_Number.Length.ToString(), "Card should have 16 digits", "Not send to FCUBS", varSettlement_UP_File_Loads_ID);
                                        }

                                        i++;
                                        varCustomerCount++;

                                    }
                                }
                                
                                System.Net.Mail.Attachment attachment;
                                attachment = new System.Net.Mail.Attachment(pathTempForAttachements + "\\" + file.Name);
                                mail.Attachments.Add(attachment);

                                //varCustomerCount = varCustomerCount + CountLinesInFile(pathTempForAttachements + "\\" + file.Name);

                            }

                            //SmtpServer.Port = 587;

                            var UsernameToPushEmail = ConfigurationManager.AppSettings["UsernameToPushEmail"];
                            var PasswordForEmailAccount = ConfigurationManager.AppSettings["PasswordForEmailAccount"];

                            SmtpServer.Credentials = new System.Net.NetworkCredential(UsernameToPushEmail, PasswordForEmailAccount);
                            SmtpServer.EnableSsl = false;

                            if (LoggingAll == 1)
                            {
                                LogStep("Step 5", "Before Send mail");
                            }

                            mail.Subject = BodyLineAutomatedMail + " with " + " " + varCustomerCount + " " + Subject;
                            mail.Body = BodyLineAutomatedMail + "\r" + "\r" + BodyLineOne + "\r" + "\r" + "Total of  " + varCustomerCount + "  " + BodyLineTwo + "\r" + "\r" + BodyLineThree + "\r" + BodyLineFour + "\r" + BodyLineFive + "\r" + BodyLineSix + "\r" + BodyLineSeven + "\r" + BodyLineEight + "\r" + BodyLineNine + "\r" + BodyLineNineTwo + "\r" + BodyLineTen + "\r" + BodyLineTwelve;


                            SmtpServer.Send(mail);

                            if (LoggingAll == 1)
                            {
                                LogStep("Step 6", "After Sending mail");
                            }


                            if (LoggingAll == 1)
                            {
                                LogStep("Step 7", "Before Sending SMS");
                            }

                            /*
                            con.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
                            con.Open();

                            SqlCommand cmmd = new SqlCommand();
                            cmmd.CommandType = System.Data.CommandType.StoredProcedure;
                            cmmd.Connection = con;

                            cmmd.CommandType = System.Data.CommandType.StoredProcedure;
                            cmmd.Connection = con;

                            cmmd.CommandText = "subGet_CellNumber";


                            SqlDataReader sqlReaderCell = cmmd.ExecuteReader();
                            if (sqlReaderCell != null && sqlReaderCell.HasRows)
                            {
                                while (sqlReaderCell.Read())
                                {
                                    SendSMS(sqlReaderCell["CellNumber"].ToString(), SMSMessageSalutation + " " + sqlReaderCell["Username"].ToString() + ". Total of " + varCustomerCount + SMSMessage, "0", "Ecocash", "E");
                                }
                            }

                            con.Close();
                             */

                            if (LoggingAll == 1)
                            {
                                LogStep("Step 8", "After Sending SMS");
                            }
                            //MessageBox.Show("Mail send ... ...");
                        }

                    }



                }
                //Pretty sure this is a setting on exchange - You need to specify which pc's are allowed to relay via smtp
                // c# mailbox unavailable. the server response was 5.7.1 unable to relay for
                // Infrastructure guys should put the IP address of the server which can send emails via smtp

            }
            catch (Exception ex)
            {

                LogError(ex.Message.ToString());
                

            }
            finally
            {

                SmtpServer = null;
                mail = null;
                
            }

        }

        public string Alert_for_TZ_Mobile_License(License_Obj  licenseInfo)
        {

            LogStep("Step 1", "Alert_for_TZ_Mobile_License Start");
            int File_Loop_Max = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool Proxy_InUse = true;
            string Proxy_IP = "";
            string Proxy_Domain = "";
            string Proxy_User = "";
            string Proxy_Password = "";
            string SMS_API_User = "";
            string SMS_API_Pwd = "";
            string Target_SMS_IMSISDN = "";
            string Target_User_FName = "";
            string Target_User_SName = "";
            string Target_User_Mail = "";
            string InstNo = "";
            string SQLStr = "";
            string Selcom_UserId = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];

            string Source_SMS_IMSISDN = "";
            string SMS_Response = "";
            string SMS_Amount;
            double SMS_Amount_N = 0.00;
            double SMS_New_Bal_N = 0.00;
            string SMS_Narration = "";
            string SMS_Date = "";
            string MsgToSend = "";
            string SMS_Message = "";
            string Trn_Type = "to";
            MsgToSend = "";
            bool Alerts_Sent = false;
            DataTable Alert_Tbl = new DataTable();
            string Alert_Status = "";
            //License_Obj licenseInfo = new License_Obj();
            //licenseInfo.IntialiseResults();


            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);

                // Read Transactions from View Table 
                Alert_Tbl = new DataTable();
                SQLStr = string.Format("SELECT Proxy_InUse_YN_B,Proxy_IP_C,Proxy_Port_C,Proxy_Domain_C,Proxy_UserID_C,Proxy_Pass_C,SMS_API_User_C,SMS_API_Pass_C FROM tbl_SysParam WHERE Param_Type_C = 'CTL'");
                Alert_Tbl = m_databaseClass.getDataSet(SQLStr).Tables[0];
                if (Alert_Tbl != null && Alert_Tbl.Rows.Count > 0)
                {
                    foreach (DataRow dr in Alert_Tbl.Rows)
                    {
                        bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                        Proxy_IP = string.Format("{0}:{1}", dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                        Proxy_Domain = dr["Proxy_Domain_C"].ToString().Trim();
                        Proxy_User = dr["Proxy_UserID_C"].ToString().Trim();
                        Proxy_Password = dr["Proxy_Pass_C"].ToString().Trim();
                        SMS_API_User = dr["SMS_API_User_C"].ToString().Trim();
                        SMS_API_Pwd = dr["SMS_API_Pass_C"].ToString().Trim();
                    }
                }
                try
                {
                    Alert_Tbl  = new DataTable();
                    SQLStr    = string.Format("[dbo].[ustp_Alerts] @Alert_Type = '{0}'", "TZMOBLICENSE");
                    Alert_Tbl = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (Alert_Tbl != null && Alert_Tbl.Rows.Count > 0)
                    {
                        WebProxy Http_proxy = new WebProxy(Proxy_IP, true);
                        WebClient client = new WebClient();

                        foreach (DataRow dr in Alert_Tbl.Rows)
                        {
                           
                            Alert_Status = dr["Alert_Status"].ToString().Trim();
                            if (Alert_Status == "NOT OK FOR ALERT")
                            {
                                break;
                            }
                            else
                            {
                                Source_SMS_IMSISDN = "255759631212";
                                Source_SMS_IMSISDN = "SelTech";
                                Target_SMS_IMSISDN = dr["Alert_MobileNum_C"].ToString().Trim();
                                Target_User_FName  = dr["Alert_UserName_C"].ToString().Trim();
                                Target_User_SName  = dr["Alert_UserSurname_C"].ToString().Trim();
                                Target_User_Mail   = dr["Alert_eMail_C"].ToString().Trim();
                                InstNo             = dr["Alert_User_InstNo"].ToString().Trim();

                                TimeSpan licenceExpiry_Days = licenseInfo.License_Expiry_Date - DateTime.Now;
                                double daysDiffence = licenceExpiry_Days.TotalDays;
                                SMS_Message = "";

                                if (daysDiffence < 5) SMS_Message = string.Format("Hi {1} {2}. Mobile Interface License is expiring on {3:yyyy-MM-dd}. Pse Contact SelTech.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, licenseInfo.License_Expiry_Date);
                                if (daysDiffence < 0) SMS_Message = string.Format("Hi {1} {2}. Mobile Interface License expired on {3:yyyy-MM-dd}. Pse Contact SelTech.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, licenseInfo.License_Expiry_Date);

                                if (SMS_Message != "")
                                {
                                    Alerts_Sent = true;
                     
                                    //SMS_Message = string.Format("{0:yyyy-MM-dd HH:mm}. Hi {1} {2}. The Mobile Interface License has expired. Contact SelTech.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName);
                                    //SMS_Message = string.Format("No Mobile Trxns since {3:yyyy-MM-dd HH:mm} ({4}). Call for Support.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, dr["Last_Trxn_Time"], dr["IdleTime"].ToString());

                                    if (Proxy_InUse)
                                    {
                                        client.Proxy = Http_proxy;
                                        Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                    }

                                    MsgToSend = string.Format("http://smsbuzz.rsrit.co.za/api/httpsend.php?username={0}&password={1}&mobiles={2}&senderID={3}&message={4}", SMS_API_User, SMS_API_Pwd, Target_SMS_IMSISDN, Source_SMS_IMSISDN, SMS_Message);
                                    if (dr["Alert_Type_C"].ToString().Trim() == "SMS")
                                    {
                                        Uri targetURI = new Uri(MsgToSend);
                                        //Failed_At = string.Format("Seven = {0}", MsgToSend);
                                        Stream data = client.OpenRead(targetURI);
                                        StreamReader reader = new StreamReader(data);
                                        //Failed_At = string.Format("Eight = {0}", MsgToSend);
                                        SMS_Response = reader.ReadLine();
                                        //Failed_At = string.Format("Nine = {0}", MsgToSend);
                                        SQLStr = string.Format("INSERT INTO dbo.tbl_Alert_User_Log ( Alert_User_InstNo ,Alert_Type_C ,Alert_Time ,Alert_Msg_C ,Alert_Success_YN , Alert_Comment)");
                                        SQLStr += string.Format(" SELECT '{0}','{1}',CURRENT_TIMESTAMP,'{2}','{3}','{4}'", dr["Alert_User_InstNo"].ToString().Trim(), dr["Alert_Type_C"].ToString().Trim(), SMS_Message, "1", SMS_Response);
                                        m_databaseClass.exec(SQLStr);
                                    }
                                }
                            }
                        }
                        if (Alerts_Sent)
                        {
                            SQLStr = string.Format("INSERT INTO tbl_AlertType_Log( Alert_ID_C, Alert_Time)");
                            SQLStr += string.Format(" SELECT 'TZMOBLICENSE',CURRENT_TIMESTAMP");
                            m_databaseClass.exec(SQLStr);
                        }
                    }
                }
                catch (Exception Record_Exception)
                {
                    string Err_String = Record_Exception.ToString();
                    Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                    string retErr = LogError("Alert_for_TZ_Mobile", Err_String);
                }
                Alert_Tbl = null;
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("Alert_for_TZ_Mobile", Err_String);
                //MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }

        public void send_EmailAlerts()
        {
            DataTable   eMail_Table   = new DataTable();
            int         LoggingAll    = Convert.ToInt32(ConfigurationManager.AppSettings.Get("LoggingAll"));
            MailMessage mail          = new MailMessage();
            string      CurrentMailID = "";
            string      OldMailID     = "";

            try
            {
                bool AlertInteface = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.SMS_Interface;
                if (AlertInteface)
                { 
                    int    varCustomerCount = 0;
                    int    mailCount        = 1;
                    string mailSubject      = "";

                    var varDateTimeToday = DateTime.Today;

                    eMail_Table = SqlHelper.GetTable(ConfigurationManager.AppSettings["SMS_DB_Connection"], string.Format("exec [dbo].[sp_MaillingList] @Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID));
                    if (eMail_Table.Rows.Count > 0)
                    {
                        var        ExChangeServerName = eMail_Table.Rows[0]["ExchangeSvr_C"].ToString();
                        SmtpClient SmtpServer         = new SmtpClient(ExChangeServerName);
                        //SmtpServer.Port = 587;
                        SmtpServer.Credentials        = new System.Net.NetworkCredential(eMail_Table.Rows[0]["EMAIL_USER_ID"].ToString(), eMail_Table.Rows[0]["EMAIL_PASSWORD"].ToString());
                        SmtpServer.EnableSsl          = false;
                        mail                          = new MailMessage(); 

                        mail.From                     = new MailAddress(eMail_Table.Rows[0]["eMail_Group_SourceMail_C"].ToString());
                        CurrentMailID                 = eMail_Table.Rows[0]["eMail_Group_C"].ToString();
                        OldMailID                     = eMail_Table.Rows[0]["eMail_Group_C"].ToString();
                        //mail.To.Add(Receiver_To);
                        //if (Copied_CC.Length != 0) { mail.CC.Add(Copied_CC); }

                        foreach (DataRow mailrow in eMail_Table.Rows)
                        {
                            CurrentMailID = mailrow["eMail_Group_C"].ToString();

                            if (CurrentMailID != OldMailID)
                            {
                                SmtpServer.Send(mail);

                                mail = new MailMessage();
                                mailCount++;
                            }
                            else
                            {   // Static
                                mail.From = new MailAddress(mailrow["eMail_Group_SourceMail_C"].ToString());
                                mail.Subject = string.Format("{0} - Notification", mailrow["Alert_User_Product_C"].ToString());
                                mail.Body = string.Format("{0}Hi {1}{0}{2}{0}Regards{0}{0}{3}-(Seltech)", Environment.NewLine, mailrow["Alert_User_Name_C"].ToString(), mailrow["eMail_Message_C"].ToString(), mailrow["Alert_User_Group_C"].ToString());

                                // Add to List of Recipients
                                mail.To.Add(mailrow["Alert_User_Contact_C"].ToString());
                            }

                            OldMailID = mailrow["eMail_Group_C"].ToString();
                        }
                    }
                }
                //Pretty sure this is a setting on exchange - You need to specify which pc's are allowed to relay via smtp
                // c# mailbox unavailable. the server response was 5.7.1 unable to relay for
                // Infrastructure guys should put the IP address of the server which can send emails via smtp
            }
            catch (Exception ex)
            {
                LogError("1472286", "execute_EmailAlerts", ex, "1291145");
            }
            finally
            {
               // SmtpServer = null;
                mail       = null;
            }
        }


        public string Alert_for_ZAM_Interface_License(License_Obj licenseInfo)
        {
            LogStep("Step 1", "Alert_for_ZAM_Interface_License Start");
            int File_Loop_Max = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool Proxy_InUse = true;
            string Proxy_IP = "";
            string Proxy_Domain = "";
            string Proxy_User = "";
            string Proxy_Password = "";
            string SMS_API_User = "";
            string SMS_API_Pwd = "";
            string Target_SMS_IMSISDN = "";
            string Target_User_FName = "";
            string Target_User_SName = "";
            string Target_User_Mail = "";
            string InstNo = "";
            string SQLStr = "";
            string Selcom_UserId = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];

            string Source_SMS_IMSISDN = "";
            string SMS_Response = "";
            string SMS_Amount;
            double SMS_Amount_N = 0.00;
            double SMS_New_Bal_N = 0.00;
            string SMS_Narration = "";
            string SMS_Date = "";
            string MsgToSend = "";
            string SMS_Message = "";
            string Trn_Type = "to";
            MsgToSend = "";
            bool Alerts_Sent = false;
            DataTable Alert_Tbl = new DataTable();
            string Alert_Status = "";
            //License_Obj licenseInfo = new License_Obj();
            //licenseInfo.IntialiseResults();

            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);

                // Read Transactions from View Table 
                Alert_Tbl = new DataTable();
                SQLStr = string.Format("SELECT Proxy_InUse_YN_B,Proxy_IP_C,Proxy_Port_C,Proxy_Domain_C,Proxy_UserID_C,Proxy_Pass_C,SMS_API_User_C,SMS_API_Pass_C FROM tbl_SysParam WHERE Param_Type_C = 'CTL'");
                Alert_Tbl = m_databaseClass.getDataSet(SQLStr).Tables[0];
                if (Alert_Tbl != null && Alert_Tbl.Rows.Count > 0)
                {
                    foreach (DataRow dr in Alert_Tbl.Rows)
                    {
                        bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                        Proxy_IP = string.Format("{0}:{1}", dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                        Proxy_Domain = dr["Proxy_Domain_C"].ToString().Trim();
                        Proxy_User = dr["Proxy_UserID_C"].ToString().Trim();
                        Proxy_Password = dr["Proxy_Pass_C"].ToString().Trim();
                        SMS_API_User = dr["SMS_API_User_C"].ToString().Trim();
                        SMS_API_Pwd = dr["SMS_API_Pass_C"].ToString().Trim();
                    }
                }
                try
                {
                    Alert_Tbl = new DataTable();
                    SQLStr = string.Format("[dbo].[ustp_Alerts] @Alert_Type = '{0}'", "ZAMINTLICENSE");
                    Alert_Tbl = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (Alert_Tbl != null && Alert_Tbl.Rows.Count > 0)
                    {
                        WebProxy  Http_proxy = new WebProxy(Proxy_IP, true);
                        WebClient client     = new WebClient();

                        foreach (DataRow dr in Alert_Tbl.Rows)
                        {

                            Alert_Status = dr["Alert_Status"].ToString().Trim();
                            if (Alert_Status == "NOT OK FOR ALERT")
                            {
                                break;
                            }
                            else
                            {
                                Source_SMS_IMSISDN = "255759631212";
                                Source_SMS_IMSISDN = "SelTech";
                                Target_SMS_IMSISDN = dr["Alert_MobileNum_C"].ToString().Trim();
                                Target_User_FName  = dr["Alert_UserName_C"].ToString().Trim();
                                Target_User_SName  = dr["Alert_UserSurname_C"].ToString().Trim();
                                Target_User_Mail   = dr["Alert_eMail_C"].ToString().Trim();
                                InstNo             = dr["Alert_User_InstNo"].ToString().Trim();

                                TimeSpan licenceExpiry_Days = licenseInfo.License_Expiry_Date - DateTime.Now;
                                double   daysDiffence       = licenceExpiry_Days.TotalDays;
                                SMS_Message = "";

                                if (daysDiffence < 5) SMS_Message = string.Format("Hi {1} {2}. Charges Interface License is expiring on {3:yyyy-MM-dd}. Pse Contact SelTech.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, licenseInfo.License_Expiry_Date);
                                if (daysDiffence < 0) SMS_Message = string.Format("Hi {1} {2}. Charges Interface License Expired on {3:yyyy-MM-dd}. Pse Contact SelTech.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, licenseInfo.License_Expiry_Date);

                                if (SMS_Message != "")
                                {
                                    Alerts_Sent = true;

                                    //SMS_Message = string.Format("{0:yyyy-MM-dd HH:mm}. Hi {1} {2}. The Mobile Interface License has expired. Contact SelTech.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName);
                                    //SMS_Message = string.Format("No Mobile Trxns since {3:yyyy-MM-dd HH:mm} ({4}). Call for Support.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, dr["Last_Trxn_Time"], dr["IdleTime"].ToString());

                                    if (Proxy_InUse)
                                    {
                                        client.Proxy = Http_proxy;
                                        Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                    }

                                    MsgToSend = string.Format("http://smsbuzz.rsrit.co.za/api/httpsend.php?username={0}&password={1}&mobiles={2}&senderID={3}&message={4}", SMS_API_User, SMS_API_Pwd, Target_SMS_IMSISDN, Source_SMS_IMSISDN, SMS_Message);
                                    if (dr["Alert_Type_C"].ToString().Trim() == "SMS")
                                    {
                                        Uri    targetURI = new Uri(MsgToSend);
                                        //Failed_At = string.Format("Seven = {0}", MsgToSend);
                                        Stream data      = client.OpenRead(targetURI);
                                        StreamReader reader = new StreamReader(data);
                                        //Failed_At = string.Format("Eight = {0}", MsgToSend);
                                        SMS_Response = reader.ReadLine();
                                        //Failed_At = string.Format("Nine = {0}", MsgToSend);
                                        SQLStr = string.Format("INSERT INTO dbo.tbl_Alert_User_Log ( Alert_User_InstNo ,Alert_Type_C ,Alert_Time ,Alert_Msg_C ,Alert_Success_YN , Alert_Comment)");
                                        SQLStr += string.Format(" SELECT '{0}','{1}',CURRENT_TIMESTAMP,'{2}','{3}','{4}'", dr["Alert_User_InstNo"].ToString().Trim(), dr["Alert_Type_C"].ToString().Trim(), SMS_Message, "1", SMS_Response);
                                        m_databaseClass.exec(SQLStr);
                                    }
                                }
                            }
                        }
                        if (Alerts_Sent)
                        {
                            SQLStr = string.Format("INSERT INTO tbl_AlertType_Log( Alert_ID_C, Alert_Time)");
                            SQLStr += string.Format(" SELECT 'ZAMINTLICENSE',CURRENT_TIMESTAMP");
                            m_databaseClass.exec(SQLStr);
                        }
                    }
                }
                catch (Exception Record_Exception)
                {
                    string Err_String = Record_Exception.ToString();
                    Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                    string retErr = LogError("Alert_for_ZAM_Interface_License", Err_String);
                }
                Alert_Tbl = null;
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("Alert_for_TZ_Mobile", Err_String);
                //MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }


        private void SendFileToBank()
        {
            string Curr_File = null;
            DataTable Curr_Rec = new DataTable();
            DataTable ChkRec = new DataTable();
            string RTGS_Ref = "";
            string sErrorString = ""; // Passed back
            string Bck_Up_File = "";
            string Bck_Up_File_Name = "";
            string Staging_FileName = "";
            string Staging_FileNameBackup = "";
            string RemoteFilename = "";
            double DLL_Status = 0;
            string encryptedStr = "";
            string sendresponse = "";

            try
            {
                // Get all the info about the original directories
                double PosSep = 0;
                string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.InDirectory;
                if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    In_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string Staging_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.StagingDirectory;
                if (!Staging_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Staging_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string Out_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.OutDirectory;
                if (!Out_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Out_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }
                string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.BackupDirectory;
                if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Back_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string Remote_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RemoteDirectory;
                if (!Remote_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Remote_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string[] FileList = Directory.GetFiles(In_Path);
                //INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
                //		string FileName = null;

                // Clear the Transaction table
                // TrxnDB.exec("Delete tbl_tmp_Header"
                if (1 == 9)
                {
                    string File_Number = "0";
                    foreach (string FileName in FileList)
                    {
                        // Put a condition to check if a file is a .xml file
                        PosSep           = FileName.LastIndexOf("\\");
                        Curr_File        = FileName.Substring(Convert.ToInt32((PosSep + 1)), Convert.ToInt32(FileName.Length - (PosSep + 1)));
                        Bck_Up_File_Name = Curr_File;
                        Bck_Up_File      = Back_Path + Bck_Up_File_Name;

                        // Encrypt File
                        //encryptedStr = string.Format("{0}#R#{1}#R##", File.ReadAllText(FileName),Curr_File);
                        encryptedStr = File.ReadAllText(FileName);
                        encryptedStr = Utilities.EncryptStringAES(encryptedStr, "SELECTF");
                        Staging_FileName = Staging_Path + Curr_File;
                        File.WriteAllText(Staging_FileName, encryptedStr);

                        RemoteFilename = Remote_Path + Curr_File;

                        // Check if Same File Name Exists in Backup Directory
                        if (System.IO.File.Exists(Bck_Up_File) == true)
                        {
                            PosSep           = Curr_File.LastIndexOf(".");
                            Bck_Up_File_Name = Curr_File + DateTime.Now.ToString("_yyyyMMdd_HHmmmss_").ToString() + File_Number.ToString();
                            Bck_Up_File      = Back_Path + Bck_Up_File_Name;
                        }

                        // Backup the staging file

                        Staging_FileNameBackup = Curr_File + DateTime.Now.ToString("_yyyyMMdd_HHmmmss_").ToString() + File_Number.ToString() + ".stgbak";
                        Bck_Up_File            = Back_Path + Staging_FileNameBackup;

                        FileInfo File_Detail = new FileInfo(FileName);
                        string File_Det_Date = File_Detail.LastWriteTime.ToString("yyyy/MM/dd HH:mmm:ss").ToString();

                        // No_Error_In_Parse_and_Import = true;
                        //Parse_and_Import_XML_File(FileName, File_Det_Date);
                        //Parse_and_Import_XML_File(Staging_FileName, File_Det_Date);

                        //sendresponse = Utilities.connect2PortandIP_PureText("127.0.0.1", 1234, encryptedStr, "TXT", true);

                        System.IO.File.Copy(Staging_FileName, RemoteFilename, overwrite: true);

                        // Now Copy the File to the Backup Directory and then Delete it, first wait for File to finish writting
                        while (IsFileLocked(File_Detail))
                        {
                            // DO NOTHING()
                            // Wait for File to finish reading
                        }
                        // if (No_Error_In_Parse_and_Import)
                        {
                            System.IO.File.Copy(FileName, Bck_Up_File, overwrite: true);
                            System.IO.File.Delete(FileName);

                            System.IO.File.Copy(Staging_FileName, Staging_FileNameBackup, overwrite: true);
                            System.IO.File.Delete(Staging_FileName);
                        }
                        File_Number = File_Number + 1;

                    }
                }
                // Catch any errors that have occurred
            }
            catch (Exception ex)
            {
                var PostTime = string.Format("{0:yyyy-MM-dd HH:ss}", SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"], "SELECT CURRENT_TIMESTAMP AS PostTime").Rows[0][0]);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", "12158897", ex.StackTrace.ToString().Replace("'", "`"), "Import XML File Main", PostTime));
                //MessageBox.Show(ex.StackTrace.ToString());
            }

        }

        private void Import_XML_Files()
        {
            string    Curr_File = null;
            DataTable Curr_Rec  = new DataTable();
            DataTable ChkRec    = new DataTable();
            string    RTGS_Ref  = "";
            string sErrorString = ""; // Passed back
            string Bck_Up_File  = "";
            string Bck_Up_File_Name       = "";
            string Staging_FileName       = "";
            string Staging_FileNameBackup = ""; 
            double DLL_Status             = 0;
            string encryptedStr           = "";

            try
            {
                // Get all the info about the original directories
                double PosSep  = 0;
                string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RemoteDirectory;
                if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    In_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string Staging_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.StagingDirectory;
                if (!Staging_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Staging_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string Out_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.OutDirectory;
                if (!Out_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Out_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.BackupDirectory;
                if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                {
                    Back_Path += System.IO.Path.DirectorySeparatorChar.ToString();
                }

                string[] FileList = Directory.GetFiles(In_Path);
                //INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
                //			string FileName = null;

                // Clear the Transaction table
                // TrxnDB.exec("Delete tbl_tmp_Header")
                if (1 == 9)
                {
                    string File_Number = "0";
                    foreach (string FileName in FileList)
                    {
                        // Put a condition to check if a file is a .xml file
                        PosSep           = FileName.LastIndexOf("\\");
                        Curr_File        = FileName.Substring(Convert.ToInt32((PosSep + 1)), Convert.ToInt32(FileName.Length - (PosSep + 1)));
                        Bck_Up_File_Name = Curr_File;
                        Bck_Up_File      = Back_Path + Bck_Up_File_Name;

                        // Decrypt File
                        encryptedStr     = File.ReadAllText(FileName);
                        Staging_FileName = Staging_Path + Curr_File;
                        File.WriteAllText(Staging_FileName, Utilities.DecryptStringAES(encryptedStr, "SELECTF"));


                        // Check if Same File Name Exists in Backup Directory
                        if (System.IO.File.Exists(Bck_Up_File) == true)
                        {
                            PosSep           = Curr_File.LastIndexOf(".");
                            Bck_Up_File_Name = Curr_File + DateTime.Now.ToString("_yyyyMMdd_HHmmmss_").ToString() + File_Number.ToString();
                            Bck_Up_File      = Back_Path + Bck_Up_File_Name;
                        }

                        // Backup the staging file
                        Staging_FileNameBackup = Curr_File + DateTime.Now.ToString("_yyyyMMdd_HHmmmss_").ToString() + File_Number.ToString() + ".stgbak";
                        Bck_Up_File = Back_Path + Staging_FileNameBackup;

                        FileInfo File_Detail = new FileInfo(FileName);
                        string File_Det_Date = File_Detail.LastWriteTime.ToString("yyyy/MM/dd HH:mmm:ss").ToString();

                        // No_Error_In_Parse_and_Import = true;
                        //Parse_and_Import_XML_File(FileName, File_Det_Date);
                        Parse_and_Import_XML_File(Staging_FileName, File_Det_Date);

                        // Now Copy the File to the Backup Directory and then Delete it, first wait for File to finish writting
                        while (IsFileLocked(File_Detail))
                        {
                            // DO NOTHING()
                            // Wait for File to finish reading
                        }
                       // if (No_Error_In_Parse_and_Import)
                        {
                            System.IO.File.Copy(FileName, Bck_Up_File, overwrite: true);
                            System.IO.File.Delete(FileName);

                            System.IO.File.Copy(FileName, Staging_FileNameBackup, overwrite: true);
                            System.IO.File.Delete(Staging_FileNameBackup);
                        }
                        File_Number = File_Number + 1;
                    }
                }
                // Catch any errors that have occurred
            }
            catch (Exception ex)
            {
                var PostTime = string.Format("{0:yyyy-MM-dd HH:ss}", SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"], "SELECT CURRENT_TIMESTAMP AS PostTime").Rows[0][0]);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", "12158897", ex.StackTrace.ToString().Replace("'", "`"), "Import XML File Main", PostTime));
                //MessageBox.Show(ex.StackTrace.ToString());
            }
        }

        protected virtual bool IsFileLocked(FileInfo file)
        {
            FileStream stream = null;
            try
            {
                stream = file.Open(FileMode.Open, FileAccess.Read, FileShare.None);
            }
            catch (IOException)
            {
                //the file is unavailable because it is:
                //still being written to
                //or being processed by another thread
                //or does not exist (has already been processed)
                return true;
            }
            finally
            {
                if (stream != null)
                    stream.Close();
            }

            //file is not locked
            return false;
        }


 
	public void Parse_and_Import_XML_File(string In_File_Nm, string File_Time)
	{
		string Dest_Table                  = "";
        bool  No_Error_In_Parse_and_Import = false;
		try
		{
			XmlDocument m_xmld     = null;
			XmlNodeList m_nodelist = null;
            //INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
            //			XmlNode m_node = null;

			XmlNodeList Instr_nodelist = null;
            //INSTANT C# NOTE: Commented this declaration since looping variables in 'foreach' loops are declared in the 'foreach' header in C#:
            //			XmlNode Instr_node = null;
			string Batch_Num = "";
			string Instruction_ID = "";
			string Transfer_Type = "";
			string Pymnt_Type = "";
			string Value_Date = null;
			string Post_Date = null;
			string Trn_Curr = "";
			double Trn_Amnt = 0.0;
			string Trn_ID = "";
			string Trn_Desc = "'";
			string Trn_Type = "";
			string Act_Name = "";
			string Act_Adrr = "";
			string Act_Str = "";
			string Act_Pst_Code = "";
			string Act_Town = "";
			string Act_Dvsn = "";
			string Act_Cntry = "";
			string Acct_Num = "";
			string Acct_Branch = "";
            string SQL_Str = "";

			string Benef_Swift_Code = "";

			//Create the XML Document
			m_xmld = new XmlDocument();
			//Load the Xml file
			m_xmld.Load(In_File_Nm);

			//Show all data in your xml
			//MessageBox.Show(m_xmld.OuterXml)
			//MessageBox.Show(m_xmld.InnerXml)

			Batch_Num = m_xmld.SelectSingleNode("/Batch/BatchNumber").InnerText.ToString();
			// Check for Duplicates and Save in Duplicates File

			Dest_Table = "tbl_NBOL_TPP";
            SQL_Str = string.Format("SELECT top 1 Batch_Num_C FROM tbl_TPP WITH (NOLOCK) Where Batch_Num_C = '{0}'", Batch_Num);
            if (SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"], SQL_Str).Rows.Count > 0)
			{
				Dest_Table = "tbl_NBOL_TPP_Duplicates";
			}

            SQL_Str = string.Format("SELECT top 1 Batch_Num_C FROM tbl_NBOL_TPP_Hist WITH (NOLOCK) Where Batch_Num_C = '{0}'", Batch_Num);
            if (SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"], SQL_Str).Rows.Count > 0)
			{
				Dest_Table = "tbl_NBOL_TPP_Duplicates";
			}

			Instr_nodelist = m_xmld.SelectNodes("/Batch/Instr");
			// Loop through the Instruction Nodes Nodes Nodes

			foreach (XmlNode Instr_node in Instr_nodelist)
			{
				Instruction_ID = Instr_node.SelectSingleNode("InstrId").InnerText.ToString();
				Transfer_Type  = (Instr_node.SelectSingleNode("InstrmtClsfctn").InnerText.ToString().Trim().ToUpper() == "THIRDPARTYPAYMENT") ? "TPP" : "IAT";
				//Pymnt_Type = Instr_node.SelectSingleNode("/Batch/Instr/InstrmtClsfctn").InnerText.ToString
				Pymnt_Type     = Instr_node.SelectSingleNode("InstrmtClsfctn").InnerText.ToString();
				//Value_Date = Format(CDate(Replace(m_xmld.SelectSingleNode("/Batch/Instr/ReqdExctnDt").InnerText, "-", "/")), "yyyy/MM/dd HH:mmm:ss").ToString
				Value_Date     = (Convert.ToDateTime(Instr_node.SelectSingleNode("ReqdExctnDt").InnerText.Replace("-", "/"))).ToString("yyyy/MM/dd HH:mmm:ss").ToString();
				//Post_Date = Format(CDate(Replace(m_xmld.SelectSingleNode("/Batch/Instr/CreationDate").InnerText, "-", "/")), "yyyy/MM/dd HH:mmm:ss").ToString
				Post_Date      = (Convert.ToDateTime(Instr_node.SelectSingleNode("CreationDate").InnerText.Replace("-", "/"))).ToString("yyyy/MM/dd HH:mmm:ss").ToString();

				//m_nodelist = m_xmld.SelectNodes("/Batch/Instr/Trn")
				m_nodelist = Instr_node.SelectNodes("Trn");
				// Loop through the Trasaction Nodes Nodes
				Hashtable insertHash = new Hashtable();
				foreach (XmlNode m_node in m_nodelist)
				{
					Trn_Type = "";
					Trn_ID = "";
					Trn_Desc = "";
					Trn_Amnt = 0;
					Trn_Curr = "";
					Act_Name = "";
					Act_Cntry = "";
					Act_Adrr = "";
					Act_Str = "";
					Act_Pst_Code = "";
					Act_Town = "";
					Act_Dvsn = "";
					Act_Cntry = "";
					Acct_Num = "";
					Acct_Branch = "";
					Benef_Swift_Code = "";

					if (m_node.SelectSingleNode("TrnTp") == null == false)
					{
						Trn_Type = m_node["TrnTp"].InnerText.ToUpper();
					}
					if (m_node.SelectSingleNode("TrnsId") == null == false)
					{
						Trn_ID = m_node["TrnsId"].InnerText;
					}
					if (m_node.SelectSingleNode("Desc") == null == false)
					{
						Trn_Desc =  Utilities.Remove_XML_SpecialCharacters(m_node["Desc"].InnerText);
						Trn_Desc = Regex.Replace(Trn_Desc, "\\s+", " ");
					}

					if (m_node.SelectSingleNode("InstdAmt") == null == false)
					{
						string TT = m_node["InstdAmt"].InnerText;
						Trn_Amnt  = Convert.ToDouble(m_node["InstdAmt"].InnerText);
					}
					if (m_node.SelectSingleNode("InstdAmt") == null == false)
					{
						Trn_Curr = m_node["InstdAmt"].Attributes.GetNamedItem("Ccy").Value;
					}
					if (Trn_Type == "D")
					{
						if (m_node.SelectSingleNode("Acct/Nm") == null == false)
						{
							Act_Name =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/Nm").InnerText);
							Act_Name = Regex.Replace(Act_Name, "\\s+", " ");
						}
					}
					else
					{
						if (m_node.SelectSingleNode("AcctOwner/Nm") == null == false)
						{
							Act_Name =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/Nm").InnerText);
							Act_Name = Regex.Replace(Act_Name, "\\s+", " ");
						}
					}
                   
					if (m_node.SelectSingleNode("AcctOwner/PstlAdr/AdrLine") == null == false)
					{
						Act_Adrr =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/PstlAdr/AdrLine").InnerText);
						Act_Adrr = Regex.Replace(Act_Adrr, "\\s+", " ");
					}
					if (m_node.SelectSingleNode("AcctOwner/PstlAdr/StrtNm") == null == false)
					{
						Act_Str =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/PstlAdr/StrtNm").InnerText);
						Act_Str = Regex.Replace(Act_Str, "\\s+", " ");
					}
					if (m_node.SelectSingleNode("AcctOwner/PstlAdr/PstCd") == null == false)
					{
						Act_Pst_Code =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/PstlAdr/PstCd").InnerText);
					}
					if (m_node.SelectSingleNode("AcctOwner/PstlAdr/TwnNm") == null == false)
					{
						Act_Town =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/PstlAdr/TwnNm").InnerText);
						Act_Town = Regex.Replace(Act_Town, "\\s+", " ");
					}
					if (m_node.SelectSingleNode("AcctOwner/PstlAdr/CtrySubDvsn") == null == false)
					{
						Act_Dvsn =  Utilities.Remove_XML_SpecialCharacters(m_node.SelectSingleNode("AcctOwner/PstlAdr/CtrySubDvsn").InnerText);
						Act_Dvsn = Regex.Replace(Act_Dvsn, "\\s+", " ");
					}
					if (m_node.SelectSingleNode("AcctOwner/PstlAdr/Ctry") == null == false)
					{
						Act_Cntry = m_node.SelectSingleNode("AcctOwner/PstlAdr/Ctry").InnerText;
					}
					if (m_node.SelectSingleNode("Acct/AcctId/Id") == null == false)
					{
						Acct_Num = m_node.SelectSingleNode("Acct/AcctId/Id").InnerText;
					}
					if (m_node.SelectSingleNode("Agt/BrnchId/Id") == null == false)
					{
						Acct_Branch = m_node.SelectSingleNode("Agt/BrnchId/Id").InnerText;
					}

					if (m_node.SelectSingleNode("Agt/FinInstnId/BIC") == null == false)
					{
						Benef_Swift_Code = m_node.SelectSingleNode("Agt/FinInstnId/BIC").InnerText;
					}

					insertHash.Clear();
					insertHash.Add("File_Name_C"           , In_File_Nm);
					insertHash.Add("Batch_Num_C"           , Batch_Num);
					insertHash.Add("Instr_ID_C"            , Instruction_ID);
					insertHash.Add("Transfer_Type_C"       , Transfer_Type);
					insertHash.Add("Pymnt_Type_C"          , Pymnt_Type);
					insertHash.Add("Value_Date_D"          , Value_Date);
					insertHash.Add("Post_Date_D"           , Post_Date);
					insertHash.Add("File_Date_D"           , File_Time);
					var ImportTime = string.Format("{0:yyyy-MM-dd HH:ss}", SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"],"SELECT CURRENT_TIMESTAMP AS PostTime").Rows[0][0]);
					insertHash.Add("Import_Date_D"         , ImportTime);
					insertHash.Add("Trn_Curr_C"            , Trn_Curr);
					insertHash.Add("Trn_Amnt_N"            , Trn_Amnt);
					insertHash.Add("Trn_ID_C"              , Trn_ID);
					insertHash.Add("Trn_Type_C"            , Trn_Type);
					insertHash.Add("Trn_Desc_C"            , Trn_Desc);
					insertHash.Add("Act_Name_C"            , Act_Name);
					insertHash.Add("Act_Adrr_C"            , Act_Adrr);
					insertHash.Add("Act_Str_C"             , Act_Str);
					insertHash.Add("Act_Pst_Code_C"        , Act_Pst_Code);
					insertHash.Add("Act_Town_C"            , Act_Town);
					insertHash.Add("Act_Dvsn_C"            , Act_Dvsn);
					insertHash.Add("Act_Cntry_C"           , Act_Cntry);
					insertHash.Add("Acct_Num_C"            , Acct_Num);
					insertHash.Add("Acct_Branch_C"         , Acct_Branch);
					insertHash.Add("Trn_Posting_Type_C"    , "4");
					insertHash.Add("Benef_Bank_C"          , "UNK");
					insertHash.Add("Acct_Branch_IsNum_YN_B", (NumericHelper.IsNumeric(Acct_Branch) ? 1 : 0));
					insertHash.Add("Posted_YN_B"           , "0");
					insertHash.Add("Batch_Approved_YN_B"   , "0");
					insertHash.Add("Run_No_N"              , "0");
					insertHash.Add("ZETTS_SerNum_N"        , "0");
					insertHash.Add("Charges_Amnt_N"        , "0");
					insertHash.Add("Gvt_Levy_Amnt_N"       , "0");
					insertHash.Add("Benef_Swift_Code_C"    , Benef_Swift_Code);
					insertHash.Add("Response_Sent_YN_B"    , "0");
					insertHash.Add("Source_C"              , "NBOL");
					SqlHelper.insertSQL(ConfigurationManager.AppSettings["EPayments_DB"],Dest_Table, insertHash);
				}
			}
		}
		catch (Exception ex)
		{
			No_Error_In_Parse_and_Import = false;
			// RollBack Transactions
			SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"],string.Format("Delete from {0} Where File_Name_C = '{1}'", Dest_Table, In_File_Nm));

			var PostTime = string.Format("{0:yyyy-MM-dd HH:ss}", SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"],"SELECT CURRENT_TIMESTAMP AS PostTime").Rows[0][0]);
			SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"],string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C ,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1} : FileName {4} ' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", "898911",ex.StackTrace.ToString().Replace("'", "`"), "Parse_and_Import_XML_File", PostTime, In_File_Nm));
			//MessageBox.Show(ex.StackTrace.ToString());
		}
	}

//----------------------------------------------------------------------------------------
//	Copyright © 2003 - 2018 Tangible Software Solutions Inc.
//	This class can be used by anyone provided that the copyright notice remains intact.
//
//	The methods in this class replicate the behavior of IsNumeric and Val.
//----------------------------------------------------------------------------------------


    public static class NumericHelper
    {
	    public static bool IsNumeric(object expression)
	    {
		    if (expression == null)
			    return false;

		    double testDouble;
		    if (expression is string)
		    {
			    CultureInfo provider;
			    if (((string)expression).StartsWith("$"))
				    provider = new CultureInfo("en-US");
			    else
				    provider = CultureInfo.InvariantCulture;

			    if (double.TryParse((string)expression, NumberStyles.Any, provider, out testDouble))
				    return true;
		    }
		    else
		    {
			    if (double.TryParse(expression.ToString(), out testDouble))
				    return true;
		    }

		    //VB's 'IsNumeric' returns true for any boolean value:
		    bool testBool;
		    if (bool.TryParse(expression.ToString(), out testBool))
			    return true;

		    return false;
	    }

	    public static double Val(string expression)
	    {
		    if (expression == null)
			    return 0;

		    //try the entire string, then progressively smaller substrings to replicate the behavior of VB's 'Val', which ignores trailing characters after a recognizable value:
		    for (int size = expression.Length; size > 0; size--)
		    {
			    double testDouble;
			    if (double.TryParse(expression.Substring(0, size), out testDouble))
				    return testDouble;
		    }

		    //no value is recognized, so return 0:
		    return 0;
	    }

	    public static double Val(object expression)
	    {
		    if (expression == null)
			    return 0;

		    double testDouble;
		    if (double.TryParse(expression.ToString(), out testDouble))
			    return testDouble;

		    //VB's 'Val' function returns -1 for 'true':
		    bool testBool;
		    if (bool.TryParse(expression.ToString(), out testBool))
			    return testBool ? -1 : 0;

		    //VB's 'Val' function returns the day of the month for dates:
		    DateTime testDate;
		    if (DateTime.TryParse(expression.ToString(), out testDate))
			    return testDate.Day;

		    //no value is recognized, so return 0:
		    return 0;
	    }

	    public static int Val(char expression)
	    {
		    int testInt;
		    if (int.TryParse(expression.ToString(), out testInt))
			    return testInt;
		    else
			    return 0;
	    }
    }

        public string Alert_for_TZ_Mobile_Transactions()
        {

            LogStep("Step 1", "Alert_for_TZ_Mobile_Transactions Start");
            int   File_Loop_Max       = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool   Proxy_InUse        = true;
            string Proxy_IP           = "";
            string Proxy_Domain       = "";
            string Proxy_User         = "";
            string Proxy_Password     = "";
            string SMS_API_User       = "";
            string SMS_API_Pwd        = "";
            string Target_SMS_IMSISDN = "";
            string Target_User_FName  = "";
            string Target_User_SName  = "";
            string Target_User_Mail   = "";
            string InstNo             = "";
            string SQLStr             = "";
            string Selcom_UserId   = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];

            string Source_SMS_IMSISDN = "";
            string SMS_Response   = "";
            string SMS_Amount;
            double SMS_Amount_N  = 0.00;
            double SMS_New_Bal_N = 0.00;
            string SMS_Narration = "";
            string SMS_Date      = "";
            string MsgToSend     = "";
            string SMS_Message   = "";
            string Trn_Type      = "to";
            MsgToSend            = "";
            bool Alerts_Sent = false;
            DataTable DB2Table   = new DataTable(); ;

            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);
                
                // Read Transactions from View Table 
                DB2Table = new DataTable();
                SQLStr   = string.Format("SELECT Proxy_InUse_YN_B,Proxy_IP_C,Proxy_Port_C,Proxy_Domain_C,Proxy_UserID_C,Proxy_Pass_C,SMS_API_User_C,SMS_API_Pass_C FROM tbl_SysParam WHERE Param_Type_C = 'CTL'");
                DB2Table = m_databaseClass.getDataSet(SQLStr).Tables[0];
                if (DB2Table != null && DB2Table.Rows.Count > 0)
                {
                    foreach (DataRow dr in DB2Table.Rows)
                    {
                        bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                        Proxy_IP       = string.Format("{0}:{1}", dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                        Proxy_Domain   = dr["Proxy_Domain_C"].ToString().Trim();
                        Proxy_User     = dr["Proxy_UserID_C"].ToString().Trim();
                        Proxy_Password = dr["Proxy_Pass_C"].ToString().Trim();
                        SMS_API_User   = dr["SMS_API_User_C"].ToString().Trim();
                        SMS_API_Pwd    = dr["SMS_API_Pass_C"].ToString().Trim();
                    } 
                }
                try
                {
                    DB2Table = new DataTable();
                    SQLStr   = string.Format("[dbo].[ustp_Alerts] @Alert_Type = '{0}'","TZMOBILE");
                    DB2Table = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (DB2Table != null && DB2Table.Rows.Count > 0)
                    {
                        WebProxy Http_proxy = new WebProxy(Proxy_IP, true);
                        WebClient client    = new WebClient();

                        foreach (DataRow dr in DB2Table.Rows)
                        {
                            if (dr["Alert_Status"].ToString().Trim() == "NOT OK FOR ALERT")
                            {
                                break;
                            }
                            else
                            {
                                Alerts_Sent = true;
                                Source_SMS_IMSISDN = "255759631212";
                                Source_SMS_IMSISDN = "SelTech";
                                Target_SMS_IMSISDN = dr["Alert_MobileNum_C"].ToString().Trim();
                                Target_User_FName  = dr["Alert_UserName_C"].ToString().Trim();
                                Target_User_SName  = dr["Alert_UserSurname_C"].ToString().Trim();
                                Target_User_Mail   = dr["Alert_eMail_C"].ToString().Trim();
                                InstNo             = dr["Alert_User_InstNo"].ToString().Trim();
                                SMS_Message        = string.Format("{0:yyyy-MM-dd HH:mm}. Hi {1} {2}. No Mobile trxns since {3:yyyy-MM-dd HH:mm} ({4}). Call for Support.", dr["Curr_Time"].ToString(),Target_User_FName,Target_User_SName, dr["Last_Trxn_Time"], dr["IdleTime"].ToString());
                                //SMS_Message = string.Format("No Mobile Trxns since {3:yyyy-MM-dd HH:mm} ({4}). Call for Support.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, dr["Last_Trxn_Time"], dr["IdleTime"].ToString());

                                if (Proxy_InUse)
                                {
                                    client.Proxy = Http_proxy;
                                    Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                }

                                MsgToSend = string.Format("http://smsbuzz.rsrit.co.za/api/httpsend.php?username={0}&password={1}&mobiles={2}&senderID={3}&message={4}", SMS_API_User, SMS_API_Pwd, Target_SMS_IMSISDN, Source_SMS_IMSISDN, SMS_Message);
                                if (dr["Alert_Type_C"].ToString().Trim().ToUpper() == "SMS")
                                {
                                    Uri targetURI = new Uri(MsgToSend);
                                    //Failed_At = string.Format("Seven = {0}", MsgToSend);
                                    Stream data = client.OpenRead(targetURI);
                                    StreamReader reader = new StreamReader(data);
                                    //Failed_At = string.Format("Eight = {0}", MsgToSend);
                                    SMS_Response = reader.ReadLine();
                                    //Failed_At = string.Format("Nine = {0}", MsgToSend);
                                    SQLStr = string.Format("INSERT INTO dbo.tbl_Alert_User_Log ( Alert_User_InstNo ,Alert_Type_C ,Alert_Time ,Alert_Msg_C ,Alert_Success_YN , Alert_Comment)");
                                    SQLStr += string.Format(" SELECT '{0}','{1}',CURRENT_TIMESTAMP,'{2}','{3}','{4}'", dr["Alert_User_InstNo"].ToString().Trim(), dr["Alert_Type_C"].ToString().Trim(), SMS_Message, "1", SMS_Response);
                                    m_databaseClass.exec(SQLStr);
                                }

                                if (dr["Alert_Type_C"].ToString().Trim().ToUpper() == "EMAIL")
                                {
                                    Uri targetURI = new Uri(MsgToSend);
                                    //Failed_At = string.Format("Seven = {0}", MsgToSend);
                                    Stream data = client.OpenRead(targetURI);
                                    StreamReader reader = new StreamReader(data);
                                    //Failed_At = string.Format("Eight = {0}", MsgToSend);
                                    SMS_Response = reader.ReadLine();
                                    //Failed_At = string.Format("Nine = {0}", MsgToSend);
                                    SQLStr = string.Format("INSERT INTO dbo.tbl_Alert_User_Log ( Alert_User_InstNo ,Alert_Type_C ,Alert_Time ,Alert_Msg_C ,Alert_Success_YN , Alert_Comment)");
                                    SQLStr += string.Format(" SELECT '{0}','{1}',CURRENT_TIMESTAMP,'{2}','{3}','{4}'", dr["Alert_User_InstNo"].ToString().Trim(), dr["Alert_Type_C"].ToString().Trim(), SMS_Message, "1", SMS_Response);
                                    m_databaseClass.exec(SQLStr);
                                }
                            }
                        }
                        if (Alerts_Sent)
                        {
                           SQLStr = string.Format("INSERT INTO tbl_AlertType_Log( Alert_ID_C, Alert_Time)");
                           SQLStr += string.Format(" SELECT 'TZMOBILE',CURRENT_TIMESTAMP");
                           m_databaseClass.exec(SQLStr);
                        }
                    }
                }
                catch (Exception Record_Exception)
                {
                        string Err_String = Record_Exception.ToString();
                        Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                        string retErr = LogError("Alert_for_TZ_Mobile", Err_String);
                }
                DB2Table = null;
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("Alert_for_TZ_Mobile", Err_String);
                //MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }


        public void Archive_Mobile_Records()
        {
            return;

            string SQLStr      = "";
            string Curr_Rec_ID = "00";
            try
            {
                DataTable Curr_Rec = new DataTable();
         
                string trxnProduct_ID = "ARCHIVE_MOBILE_RECORDS";

                string objectStatus = string.Format("[dbo].[ustp_CheckObj_Status] @StatusObjName = '{0}' ", trxnProduct_ID);
                objectStatus = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], objectStatus).Rows[0]["AuthStatus"].ToString().Trim();
                if (objectStatus != "AUTHORISED")
                {
                    LogStep("ARCHIVE_MOBILE_RECORDS", "PostCharges_ABC disabled");
                    //return "0";
                }
                else
                {
                    LogStep("ARCHIVE_MOBILE_RECORDS", "ARCHIVE_MOBILE_RECORDS Main Entry");

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID));
                        Curr_Rec = new DataTable();
                        SQLStr   = string.Format("SELECT * from vw_ArchiveJobSchedule");
                        Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);

                        if (Curr_Rec.Rows.Count != 0)
                        {
                            foreach (DataRow revRow in Curr_Rec.Rows)
                            {
                                Curr_Rec_ID = revRow["Archive_InstNo"].ToString().Trim();
                                if (Curr_Rec_ID == "-99")
                                {
                                    SQLStr = "INSERT INTO [tbl_Archive_Schedule] (Archive_StartTime) SELECT CURRENT_TIMESTAMP";
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], "[dbo].[ustp_Archive_Trxns]");
                                }
                            }
                            LogStep("ARCHIVE_MOBILE_RECORDS", "ARCHIVE_MOBILE_RECORDS Execution");
                        }
                    }
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID));
                    LogStep("ARCHIVE_MOBILE_RECORDS", "ARCHIVE_MOBILE_RECORDS Main Exit");
                }
            }
            catch (Exception ArchiveTrxns)
            {
                //string retErr = SR_Class.Log_to_Error(ArchiveTrxns.GetHashCode().ToString(), "Archive_Mobile_Records", ArchiveTrxns, Curr_Rec_ID);
                string retErr = LogError(ArchiveTrxns.GetHashCode().ToString(), "Archive_Mobile_Records", ArchiveTrxns, Curr_Rec_ID);

            }
        }


        public void Post_MobileCharges_n_Levy_STB()
        {
            string Curr_Rec_ID    = "";
            string trxnProduct_ID = "POST_MOBCHG_STB";
            string SQLStr         = "";
            try
            {
                //Check if this Node is allowed to Run 
                SQLStr = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0][0].ToString()) > 0)
                {
                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Post_Charges_SCB)
                    {
                        LogStep(trxnProduct_ID, "Post_Mobile_Charges_n_Levy disabled");
                        //return "0";
                    }
                    else
                    {
                        DataTable Curr_Rec = new DataTable();
                        DataTable SysRec = new DataTable();
                        DataTable Entity_Rec = new DataTable();
                        DataTable XML_Request_Rec = new DataTable();
                        string Str_TrnAmnt = "0.00";
                        string Out_Dir;
                        double Curr_Run_No = 0;
                        string Out_File_Name;
                        string Instance_Name = "";
                        bool CreateTestXML = false;
                        string Curr_License;
                        string Svr_Lic_Date;
                        string Trn_Desc;
                        string Trn_Ref = "";
                        string ValAmnt;
                        string Post_Date;
                        double File_Recs;
                        int Lic_Response_Code = 0;
                        bool Econet_Integrated = false;
                        bool postMobChargesThruEverify_F = false;
                        string Source_TrnID;
                        string Trn_GUID = "";
                        string FinWebUserID = "";
                        string FinWebUserPassword = "";
                        bool Fin_PseudoResponse_Use = false;
                        bool Finacle_Live = false;

                        e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient Finacle_Bridge = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
                        Trn_Narr1_Narr2_AndRef Trn_Ref_and_Narr = new Trn_Narr1_Narr2_AndRef();
                        e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail tmpPostingResponse = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();
                        string PostTime = "";
                        string TrnDateTime = "";
                        string Entity_ID_C_Tmp;
                        bool Posting_Status_Tmp;
                        string Posting_Entities = "(";
                        int Processing_Retry_Max = 0;
                        int Processing_Retry_Interval = 0;
                  
                        string Source_Trn_ID = "";
                        string Parm_TranParticularsCodeDr = "CHG";
                        string Parm_TranParticularsCodeCr = "CHG";
                       

                        string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID ='{0}', @ForceThreadTime ='{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes);
                        string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();

                        if ((Thread_Busy == "OK FOR POSTING"))
                        {
                            SqlHelper.RunSql(string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID));
                            SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                Instance_Name               = Sys_Row["Instance_Name_C"].ToString().Trim();
                                Econet_Integrated           = bool.Parse(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                CreateTestXML               = bool.Parse(Sys_Row["Create_TestXML_YN_B"].ToString());
                                Curr_License                = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date                = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                TrnDateTime                 = Sys_Row["TrnDateTime"].ToString();
                                Out_Dir                     = Sys_Row["OutFileDir"].ToString().Trim();
                                FinWebUserID                = Sys_Row["FinWebUserID"].ToString();
                                Finacle_Live                = bool.Parse(Sys_Row["Finacle_Live"].ToString());
                                FinWebUserPassword          = Sys_Row["FinWebUserPassword"].ToString();
                                Fin_PseudoResponse_Use      = bool.Parse(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max        = Convert.ToInt16(Sys_Row["Processing_Retry_Max"].ToString());
                                Processing_Retry_Interval   = Convert.ToInt16(Sys_Row["Processing_Retry_Interval"].ToString());
                                postMobChargesThruEverify_F = Convert.ToBoolean(Sys_Row["postMobChargesThruEverify_F"]);
                            }

                            if (((Econet_Integrated == true) && (postMobChargesThruEverify_F == true)))
                            {
                                //  Mark the Batch
                                Trn_GUID = Guid.NewGuid().ToString();
                                SQLStr   = string.Format("[dbo].[ustp_Mark_eVerify_Batch] @Curr_Run = '{0}'", Trn_GUID);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(),SQLStr);

                                Curr_Rec = new DataTable();
                                SQLStr   = string.Format("SELECT PayInst.*, Acc.Acc_Name_C FROM dbo.Payment_Instruction PayInst INNER JOIN UserAccount Acc ON PayInst.sourceAccountNo = Acc.AccountNo WHERE PayInst.Processing_ID  = '{0}'", Trn_GUID);
                                Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), SQLStr);

                                foreach (DataRow revRow in Curr_Rec.Rows)
                                {
                                    Curr_Rec_ID       = revRow["Trn_ID_N"].ToString().Trim();
                                    Source_Trn_ID     = revRow["sourceReference"].ToString().Trim();
                                    // tmpFinBridgeSC = New Finacle_Bridge.Finacle_BridgeSoapClient
                                    Trn_Desc          = revRow["DR_Narrative_C"].ToString().Trim();
                                    XmlDocument xml   = new XmlDocument();
                                    try
                                    {
                                        xml.LoadXml(Trn_Desc);
                                        Trn_Ref_and_Narr = new Trn_Narr1_Narr2_AndRef();
                                        Trn_Ref_and_Narr.IntialiseObject();

                                        Trn_Ref_and_Narr.DR_Trn_Reference  = Utilities.getXMLPathValue(xml, "Trn_Narr1_Narr2/DR_Trn_Reference");
                                        Trn_Ref_and_Narr.DR_Trn_Narrative1 = Utilities.getXMLPathValue(xml, "Trn_Narr1_Narr2/DR_Trn_Narrative1");
                                        Trn_Ref_and_Narr.DR_Trn_Narrative2 = Utilities.getXMLPathValue(xml, "Trn_Narr1_Narr2/DR_Trn_Narrative2");

                                        Trn_Ref_and_Narr.CR_Trn_Reference  = Utilities.getXMLPathValue(xml, "Trn_Narr1_Narr2/DR_Trn_Reference");
                                        Trn_Ref_and_Narr.CR_Trn_Narrative1 = Utilities.getXMLPathValue(xml, "Trn_Narr1_Narr2/DR_Trn_Narrative1");
                                        Trn_Ref_and_Narr.CR_Trn_Narrative2 = Utilities.getXMLPathValue(xml, "Trn_Narr1_Narr2/DR_Trn_Narrative2");
                                    }
                                    catch (Exception ex_xmlLoad)
                                    {
                                        LogError(ex_xmlLoad.GetHashCode().ToString(),string.Format("{0} xml", trxnProduct_ID), ex_xmlLoad, Curr_Rec_ID);
                                    }

                                    Str_TrnAmnt        = string.Format("{0:####0.00}", revRow["paymentAmount"].ToString().Replace("-", ""));
                                    tmpPostingResponse = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();

                                    if (Convert.ToDouble(Str_TrnAmnt) == 0.0) 
                                    {
                                        SQLStr = String.Format("UPDATE Payment_Instruction SET Posted_B = 0, Posted_In_MUB_B = 0, Fin_SuccessOrFailure_C = 'N', Fin_Response_Det_C = 'Zero Amount Ignored', Fin_Retry_No = 15 WHERE Trn_ID_N = '{0}'", Curr_Rec_ID);
                                    }
                                    else
                                    {
                                        tmpPostingResponse = fn_Post_Finacle_Transaction(FinWebUserID, FinWebUserPassword, "EVF", revRow["Fin_TrnUniqueID_C"].ToString().Trim(), revRow["Fin_ChannelRefNum_C"].ToString().Trim(), false, "1001", Str_TrnAmnt, revRow["Fin_CurrCode_C"].ToString().Trim(), revRow["sourceAccountNo"].ToString().Trim(), revRow["destinationAccount"].ToString().Trim(), TrnDateTime, "SIBCZWHX", "SBICZWHX", revRow["Acc_Name_C"].ToString().Trim().Replace("/", ""), "", Trn_Ref_and_Narr, Parm_TranParticularsCodeDr, Parm_TranParticularsCodeCr, "EVF");
                                        if ((tmpPostingResponse.SuccessOrFailure == "Y"))
                                        {
                                            SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Fin_Response_Det_C = '{1} #R# {2}' WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.Resp_Code, tmpPostingResponse.Resp_Remarks);
                                        }
                                        else if ((tmpPostingResponse.Error_Code == "FAILUREINTF1128"))  // This still has to be provided for StanChart
                                        {
                                            SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Fin_Response_Det_C = '{1} #R# {2} - FAILUREINTF1128 : Duplicate Inference' WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.Resp_Code, tmpPostingResponse.Resp_Remarks);
                                        }
                                        else
                                        {
                                            SQLStr = string.Format("UPDATE Payment_Instruction SET  Fin_Response_Det_C = '{1} #R# {2}' WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.Resp_Code, tmpPostingResponse.Resp_Remarks);
                                        }
                                    }
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                }
                            }
                        }
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C= '{0}'", trxnProduct_ID));
                    }
                }
            }
            catch (Exception PostCharge_Exception)
            {
                string retErr = LogError(PostCharge_Exception.GetHashCode().ToString(), trxnProduct_ID, PostCharge_Exception, Curr_Rec_ID);
            }
        }


        public void  Post_Mobile_Charges_n_Levy_ABC()
        {
            string SQLStr         = "";
            string Curr_Rec_ID    = "00";
            string trxnProduct_ID = "POST_MOBCHG_BABCZW";
            try
            {
                //Check if this Node is allowed to Run 
                SQLStr = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0][0].ToString()) > 0)
                {
                    DataTable Curr_Rec = new DataTable();
                    DataTable SysRec   = new DataTable();

                    DataTable XML_Request_Rec = new DataTable();

                    string Str_TrnAmnt = "0.00";

                    string Out_Dir     = null;
                    double Curr_Run_No = 0.0;

                    string Out_File_Name = null;
                    string Instance_Name = "";
                    bool   CreateTestXML = false;
                    string Curr_License  = null;
                    string Svr_Lic_Date  = null;

                    string Trn_Desc = null;
                    string Trn_Ref = "";

                    string ValAmnt = null;
                    string Post_Date = null;
                    double File_Recs = 0;
                    int Lic_Response_Code = 0;
                    bool Econet_Integrated = false;
                    bool postMobChargesThruEverify_F = false;
                    string Source_TrnID = null;
                    string Trn_GUID = "";

                    string FinWebUserID = "";
                    string FinWebUserPassword = "";

                    bool Fin_PseudoResponse_Use = false;
                    bool Finacle_Live = false;

                    //Finacle_Bridge.Finacle_Response_Detail tmpPostingResponse = new Finacle_Bridge.Finacle_Response_Detail();
                    //Trn_Narr1_Narr2_AndRef Trn_Ref_and_Narr = new Trn_Narr1_Narr2_AndRef();

                    string PostTime    = "";
                    string TrnDateTime = "";

                    string Entity_ID_C_Tmp    = null;
                    bool   Posting_Status_Tmp = false;
                    string Posting_Entities   = "(";
                    int    Processing_Retry_Max      = 0;
                    int    Processing_Retry_Interval = 0;
                    string Source_Trn_ID  = "";

                    string SR_userID   = "ChgUsr";
                    string SR_password = "@ChgPass126^";
                    string paymentType = "CHG";
                    string tokenId            = "";
                    string telephoneNo        = "";
                    string sourceAccountNo    = "";
                    string destinationAccount = "";
                    string sourceReference    = "";
                    string paymentAmount      = "";
                    string SourceTrxnID       = "";
                    string DRCR_Flag          = "";
                    string RRN                = "";
                    string Current_TrxnID = "";
                    string TrnInstance    = "";
                    string currBatchID    = "";

                    string     Parm_TranParticularsCodeDr       = "CHG";
                    string     Parm_TranParticularsCodeCr       = "CHG";
                    DataTable  Sys_Tbl                          = new DataTable();
                    bool       AUTHORISE_OFFLINE                = false;
                    bool       ENABLE_ASYNCH_SINGLE_DAY_POSTING = false;
                    string     ASYNCH_SINGLE_DAY_POSTING_DATE   = "";

                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Post_Charges_ABC)
                    {
                        LogStep(string.Format("{0} Step 0 ", trxnProduct_ID), "Post_Mobile_Charges_n_Levy disabled");
                    }
                    else
                    {
                        LogStep(string.Format("{0} Step 1 ", trxnProduct_ID), "Post_Mobile_Charges_n_Levy Main Entry");

                        string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                        string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                        if (Thread_Busy == "OK FOR POSTING")
                        {
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID));

                            SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                            if (SysRec.Rows.Count > 0)
                            {
                                foreach (DataRow Sys_Row in SysRec.Rows)
                                {
                                    Instance_Name               = Sys_Row["Instance_Name_C"].ToString().Trim();
                                    Econet_Integrated           = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                    CreateTestXML               = Convert.ToBoolean(Sys_Row["Create_TestXML_YN_B"].ToString());
                                    Curr_License                = Sys_Row["License_Code_C"].ToString().Trim();
                                    Svr_Lic_Date                = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                    TrnDateTime                 = Sys_Row["TrnDateTime"].ToString();
                                    Out_Dir                     = Sys_Row["OutFileDir"].ToString().Trim();
                                    FinWebUserID                = Sys_Row["FinWebUserID"].ToString();
                                    Finacle_Live                = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                    FinWebUserPassword          = Sys_Row["FinWebUserPassword"].ToString();
                                    Fin_PseudoResponse_Use      = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                    Processing_Retry_Max        = Convert.ToInt16(Sys_Row["Processing_Retry_Max"].ToString());
                                    Processing_Retry_Interval   = Convert.ToInt16(Sys_Row["Processing_Retry_Interval"].ToString());
                                    postMobChargesThruEverify_F = Convert.ToBoolean(Sys_Row["postMobChargesThruEverify_F"].ToString());
                                }
                            }

                            if ((Econet_Integrated == true) & (postMobChargesThruEverify_F == true))
                            {
                                // Check if not Offline Authourising
                                Sys_Tbl = new DataTable();
                                SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('AUTHORISE_OFFLINE','ASYNCH_SINGLE_DAY_POSTING_DATE','ENABLE_ASYNCH_SINGLE_DAY_POSTING') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                                Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                foreach (DataRow param_Row in Sys_Tbl.Rows)
                                {
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "AUTHORISE_OFFLINE".ToUpper())                AUTHORISE_OFFLINE                = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "ENABLE_ASYNCH_SINGLE_DAY_POSTING".ToUpper()) ENABLE_ASYNCH_SINGLE_DAY_POSTING = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "ASYNCH_SINGLE_DAY_POSTING_DATE".ToUpper())   ASYNCH_SINGLE_DAY_POSTING_DATE   = param_Row["Parameter_Value"].ToString();
                                }
                                if (!AUTHORISE_OFFLINE)
                                {
                                    // Mark the Batch
                                    Trn_GUID = Guid.NewGuid().ToString();
                                    if (ENABLE_ASYNCH_SINGLE_DAY_POSTING)
                                    {
                                        SQLStr = string.Format("[dbo].[ustp_Mark_eVerify_Batch_PerDay] @Curr_Run = '{0}', @Curr_Date = '{1}'", Trn_GUID, ASYNCH_SINGLE_DAY_POSTING_DATE);
                                    }
                                    else
                                    {
                                        SQLStr = string.Format("[dbo].[ustp_Mark_eVerify_Batch] @Curr_Run = '{0}'", Trn_GUID);
                                    }

                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                    Curr_Rec = new DataTable();
                                    SQLStr   = string.Format("SELECT * FROM dbo.Payment_Instruction WITH (NOLOCK) WHERE Processing_ID  = '{0}'",Trn_GUID);
                                    Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);

                                    if (Curr_Rec.Rows.Count > 0)
                                    {
                                        foreach (DataRow revRow in Curr_Rec.Rows)
                                        {
                                            Curr_Rec_ID        = revRow["Inst_No_N"].ToString().Trim();

                                            SR_userID          = "ChgUsr";
                                            SR_password        = "@ChgPass126^";
                                            paymentType        = revRow["Trn_Type"].ToString().Trim();
                                            tokenId            = revRow["tokenId"].ToString().Trim();
                                            telephoneNo        = revRow["telephoneNo"].ToString().Trim();
                                            sourceAccountNo    = revRow["sourceAccountNo"].ToString().Trim();
                                            destinationAccount = revRow["destinationAccount"].ToString().Trim();
                                            sourceReference    = revRow["sourceReference"].ToString().Trim();
                                            paymentAmount      = decimal.Parse(Math.Abs(Convert.ToDecimal(revRow["paymentAmount"].ToString())).ToString()).ToString();
                                            SourceTrxnID       = revRow["sourceReference"].ToString().Trim();
                                            DRCR_Flag          = "C";
                                            RRN                = revRow["RRN_C"].ToString().Trim(); ;
                                            Current_TrxnID     = revRow["Trn_ID_C"].ToString().Trim();
                                            TrnInstance        = revRow["Inst_No_N"].ToString().Trim();
                                            currBatchID        = revRow["Batch_ID_C"].ToString().Trim();

                                            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient     EconCashSvc     = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
                                            e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient finBridgeSvc    = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
                                            e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail  fin_ResponseDet = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();

                                            // e_Verify_BACK_OFFICE_Service_Interface.EcoCash.PostTrxnChargeResponse       EcoResponse = new e_Verify_BACK_OFFICE_Service_Interface.EcoCash.PostTrxnChargeResponse();

                                            if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BABC_ZW")
                                            {
                                                string EcoResponse = EconCashSvc.PostTrxnCharge(SR_userID, SR_password, paymentType, Convert.ToDouble(tokenId), telephoneNo, destinationAccount, sourceAccountNo, sourceReference, Convert.ToDouble(paymentAmount), SourceTrxnID, DRCR_Flag, RRN, Current_TrxnID, TrnInstance, currBatchID);
                                            }
                                            //if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "SCB")
                                            //{
                                            //    string EcoResponse = EconCashSvc.PostTrxnCharge(SR_userID, SR_password, paymentType, Convert.ToDouble(tokenId), telephoneNo, destinationAccount, sourceAccountNo, sourceReference, Convert.ToDouble(paymentAmount), SourceTrxnID, DRCR_Flag, RRN, Current_TrxnID, TrnInstance, currBatchID);
                                            //}

                                            //    if (EcoResponse == "SUCCESS")
                                            //    {
                                            //        SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Fin_Response_Det_C = '{1} #R# {2}' WHERE Inst_No_N = '{0}'", Curr_Rec_ID, EcoResponse, EcoResponse);
                                            //    }   
                                            //    else
                                            //    {  
                                            //        //if (tmpPostingResponse.Error_Code == "Failed while logging the message. Possible message id duplication")
                                            //        if (EcoResponse == "Failed while logging the message. Possible message id duplication")
                                            //        {
                                            //            SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Fin_Response_Det_C = '{1} #R# {2} - FAILUREINTF1128 : Duplicate Inference' WHERE Inst_No_N = '{0}'", Curr_Rec_ID, EcoResponse, EcoResponse);
                                            //        }
                                            //        else
                                            //        {
                                            //            //SQLStr = string.Format("UPDATE Payment_Instruction SET                                                                  Fin_Response_Det_C = '{1} #R# {2}' WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.Resp_Code, tmpPostingResponse.Resp_Remarks);
                                            //            //SQLStr = string.Format("UPDATE Payment_Instruction SET                                                                  Fin_Response_Det_C = '{1} #R# {2}' WHERE Inst_No_N = '{0}'", Curr_Rec_ID, EcoResponse, EcoResponse);
                                            //        }
                                            //    }
                                            // SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                        }
                                    }
                                }    
                            }
                        }
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID));
                        LogStep(string.Format("{0} Step 2 ", trxnProduct_ID), "Post_Mobile_Charges_n_Levy Main Exit");
                    }
                }
            }
            catch (Exception PostCharge_Exception)
            {
                string retErr = LogError(PostCharge_Exception.GetHashCode().ToString(), trxnProduct_ID, PostCharge_Exception, Curr_Rec_ID);
            }
        }

        public void autoRegister2MNO()
        {
            string        Curr_Rec_ID       = "";
            XmlSerializer Xml_Serializer;
            StringWriter  Xml_String_Writer;
            try
            {
                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.autoRegister2MNO_Enabled)
                {
                    LogStep("autoRegister2MNO", "autoRegister2MNO disabled");
                }
                else
                {
                    LogStep("autoRegister2MNO", "autoRegister2MNO Main Entry");
                    e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient EcoSvc  = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
                    e_Verify_BACK_OFFICE_Service_Interface.eCoCash.registration_Response       EcoResp = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.registration_Response();
            
                    DataTable Curr_Rec            = new DataTable();
                    DataTable SysRec              = new DataTable();
              
                    DataTable XML_Request_Rec     = new DataTable();

                    string Curr_License           = null;
                    string Svr_Lic_Date           = null;
                 
                    bool   Econet_Integrated      = false;

                    string Trn_GUID               = "";

                    string FinWebUserID           = "";
                    string FinWebUserPassword     = "";

                    bool Fin_PseudoResponse_Use   = false;
                    bool Finacle_Live             = false;
                    string Instance_Name          = "";
                 
                    string Posting_Entities         = "(";
                    int    Processing_Retry_Max     = 0;
                    int   Processing_Retry_Interval = 0;
          
                    string trxnProduct_ID         = "autoRegister2MNO";
                    string Source_Trn_ID          = "";
                    string customerName           = "";
                    string mobileNo               = "";
                    string NatIDNo                = "";
                    string SQLStr                 = "";
                    
                    string IPAddr                 = "";
                    string portNum                = "";
                    string ReplaceStr             = "";
                    string Receiving_InstID       = "";
                    string Acquiring_InstID       = "";
                    string ISO8583_Msg            = string.Format("0600910000{0:MMddHHmmss}", DateTime.Now);     //Processing Code,  Transmission Date and Time
                    string ISOResponseCode        = "";
                    string currencyNumber         = "";
                    string Fld127_002             = "";
                    string STAN                   = "";

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                Econet_Integrated         = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                FinWebUserID              = Sys_Row["FinWebUserID"].ToString();
                                Finacle_Live              = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                FinWebUserPassword        = Sys_Row["FinWebUserPassword"].ToString();
                                Fin_PseudoResponse_Use    = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"].ToString());
                                Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"].ToString());
                            }
                        }

                        if (Econet_Integrated == true)
                        {
                            // Mark the Batch
                            Trn_GUID = Guid.NewGuid().ToString();
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), string.Format("EXEC [dbo].[ustp_Mark_autoRegister2MNO_Batch] @Curr_Run = '{0}'", Trn_GUID));

                            Curr_Rec = new DataTable();
                            //SQLStr = "SELECT *, CASE WHEN PyInst.sourceAccountNo = (SELECT TOP 1 Wallet_Acc_C FROM tbl_SysParam WITH (NOLOCK)) THEN 'W2B' ELSE 'B2W' END AS TrnType1 FROM Payment_Instruction PyInst,  (SELECT TOP 1 [Id] AS [UsrID], [Password] AS Usr_Pass FROM UserInfo WITH (NOLOCK) WHERE Live_YN_B = '1') UsrConnInfo WHERE PyInst.Trn_Type = 'REV' AND PyInst.Posted_B = 0 AND  PyInst.Reversed_B = 0 AND PyInst.Fin_Retry_No < 5 AND DATEDIFF(MINUTE,  PyInst.Trn_Time, CURRENT_TIMESTAMP) >= (10 * PyInst.Fin_Retry_No) AND DATEDIFF(MINUTE,  COALESCE(PyInst.Processing_Time,DATEADD(MINUTE,-7,CURRENT_TIMESTAMP)), CURRENT_TIMESTAMP) >= 5 AND DATEDIFF(HOUR,PyInst.Trn_Time, CURRENT_TIMESTAMP) < 12;";
                            //SQLStr   = string.Format("SELECT UserAccount.*, tbl_Currencies.Curr_Number_C, COALESCE(Extract_ID_C,  RIGHT(CAST(CAST(NEWID() AS VARBINARY(36)) AS BIGINT), 12)) as RRN, LoginInfo.[Id],LoginInfo.[Password], IPRec.Parameter_Value AS IPAddr, portRec.Parameter_Value AS portNum,RecievrRec.Parameter_Value AS RecievrID,AcQuirerRec.Parameter_Value AS AcquirerID  FROM UserAccount WITH (NOLOCK) ,tbl_Currencies WITH (NOLOCK),  (SELECT TOP 1 [Id], [Password] FROM UserInfo WITH (NOLOCK) WHERE Bank_ID = '{1}' AND Live_YN_B = 1) LoginInfo, (SELECT TOP 1 Parameter_Value  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'MNO_MOBILE_REGISTRATION_IP' AND Bank_ID = '{1}') IPRec, (SELECT TOP 1 Parameter_Value  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'MNO_MOBILE_REGISTRATION_PORT' AND Bank_ID = '{1}') portRec, (SELECT TOP 1 Parameter_Value  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'ECOCASH_RECEIVING_INSTITUTE_ID' AND Bank_ID = '{1}') RecievrRec, (SELECT TOP 1 Parameter_Value  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'ECOCASH_ACQUIRING_INSTITUTE_ID' AND Bank_ID = '{1}') AcQuirerRec WHERE UserAccount.Currency = tbl_Currencies.Curr_Short_Name AND Processing_ID = '{0}' ORDER BY CustomerId ASC", Trn_GUID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                            SQLStr = string.Format("SELECT UserAccount.*, tbl_Currencies.Curr_Number_C,  RIGHT(CAST(CAST(NEWID() AS VARBINARY(36)) AS BIGINT), 12) AS RRN, RIGHT(CAST(CAST(NEWID() AS VARBINARY(36)) AS BIGINT), 06) AS [STAN],  LoginInfo.[Id],LoginInfo.[Password], IPRec.Parameter_Value AS IPAddr, portRec.Parameter_Value AS portNum,RecievrRec.Parameter_Value AS RecievrID,AcQuirerRec.Parameter_Value AS AcquirerID  FROM UserAccount WITH (NOLOCK) ,tbl_Currencies WITH (NOLOCK),  (SELECT TOP 1 [Id], [Password] FROM UserInfo WITH (NOLOCK) WHERE UserGroup = 'REG' AND Bank_ID = '{1}' AND Live_YN_B = 1) LoginInfo, (SELECT TOP 1 Parameter_Value  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'MNO_MOBILE_REGISTRATION_IP' AND Bank_ID = '{1}') IPRec, (SELECT TOP 1 Parameter_Value  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'MNO_MOBILE_REGISTRATION_PORT' AND Bank_ID = '{1}') portRec, (SELECT TOP 1 Parameter_Value, SubParameter_1  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'ECOCASH_RECEIVING_INSTITUTE_ID' AND Bank_ID = '{1}') RecievrRec, (SELECT TOP 1 Parameter_Value, SubParameter_1  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID = 'ECOCASH_ACQUIRING_INSTITUTE_ID' AND Bank_ID = '{1}') AcQuirerRec WHERE UserAccount.Currency = tbl_Currencies.Curr_Short_Name AND RecievrRec.SubParameter_1  = tbl_Currencies.Curr_Short_Name AND AcQuirerRec.SubParameter_1 = tbl_Currencies.Curr_Short_Name AND Processing_ID = '{0}' ORDER BY CustomerId ASC", Trn_GUID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), SQLStr);
                            if (Curr_Rec.Rows.Count > 0)
                            {
                                foreach (DataRow RegRow in Curr_Rec.Rows)
                                {
                                    Iso8583PostXml IsoXML_msg = new Iso8583PostXml();
                                    Fields         IsoField   = new Fields();
                               
                                    Curr_Rec_ID        = RegRow["CustomerId"].ToString().Trim();
                                    ISOResponseCode    = "";

                                    FinWebUserID       = RegRow["Id"].ToString().Trim();
                                    FinWebUserPassword = RegRow["Password"].ToString().Trim();

                                    Source_Trn_ID      = RegRow["RRN"].ToString().Trim().PadLeft(12, (char)48);
                                    STAN               = RegRow["STAN"].ToString().Trim().PadLeft(06, (char)48);

                                    customerName       = RegRow["Acc_Name_C"].ToString().Trim();
                                    NatIDNo            = RegRow["KYC_IDNumber_C"].ToString().Trim().Replace(" ", "").Replace("-", "").Replace("/", "");

                                    if (customerName.Length >  40)
                                    {
                                        customerName   = customerName.Substring(0,40);
                                    }
                                    else
                                    {
                                        if (customerName.Length < 40)
                                        {
                                          customerName = string.Format("{0}.", customerName.PadRight(39, (char)32));
                                        }
                                    }

                                    IPAddr             = RegRow["IPAddr"].ToString().Trim();
                                    portNum            = RegRow["portNum"].ToString().Trim();
                                    mobileNo           = RegRow["TelephoneNo"].ToString().Trim();
                                    Fld127_002         = string.Format("{0}{1}",mobileNo ,Curr_Rec_ID.PadLeft(7, (char)48));

                                    if (Fld127_002.Length > 17)
                                    {
                                        Fld127_002 = Fld127_002.Substring(Fld127_002.Length - 17, 17);
                                    }

                                    if (NatIDNo.Length == 0)
                                    {
                                        if (mobileNo.Length > 10)
                                        {
                                            NatIDNo = mobileNo.Substring(mobileNo.Length - 11, 11);
                                        }
                                        else
                                        {
                                            NatIDNo = mobileNo.PadLeft(11, (char)48);
                                        }
                                    }

                                    Receiving_InstID       = RegRow["RecievrID"].ToString().Trim();
                                    Acquiring_InstID       = RegRow["AcquirerID"].ToString().Trim();
                                    currencyNumber         = RegRow["Curr_Number_C"].ToString().Trim();
   
                                    IsoXML_msg.MsgType     = "0600";
                                    IsoField.Field_003     = "910000";
                                    IsoField.Field_007     = string.Format("{0:MMddHHmmss}", DateTime.Now);
                                    //IsoField.Field_011     = Curr_Rec_ID.PadLeft(6, (char)48             );   //Systems Trace Audit Number Reference ID incremented on every transaction
                                    IsoField.Field_011     = STAN                                        ;    //Systems Trace Audit Number Reference ID incremented on every transaction
                                    IsoField.Field_012     = string.Format("{0:HHmmss}", DateTime.Now    );   //Time, Local Transaction
                                    IsoField.Field_013     = string.Format("{0:MMdd}"  , DateTime.Now    );   //Date, Local Transaction
                                    IsoField.Field_022     = string.Format("000"                         );   //POS entry mode
                                    IsoField.Field_025     = string.Format("00"                          );   //POS condition code
                                    IsoField.Field_032     = string.Format("{0}", Acquiring_InstID       );   //502195");                     //Acquiring Institution ID Code
                                    IsoField.Field_037     = string.Format("{0}", Source_Trn_ID          );   //Retrieval Reference Number Unique for every transaction (12 Characters)
                                    IsoField.Field_041     = string.Format("ECOCASHT"                    );   //Card Acceptor Terminal ID
                                    IsoField.Field_042     = string.Format("ECOCASHT0000000"             );   // Card Acceptor ID Code 
                                    IsoField.Field_043     = string.Format("{0}", customerName           );   //Card Acceptor Name Location
                                    IsoField.Field_045     = string.Format("{0}", NatIDNo                );   //14152369452");                //National ID
                                    IsoField.Field_049     = string.Format("{0}", currencyNumber         );   //Currency Code, Transaction    // WAS 840
                                    IsoField.Field_059     = string.Format("{0}", Source_Trn_ID          );   // 000001245685"                //Echo Data Field must be returned unaltered by Ecocash
                                    IsoField.Field_100     = string.Format("{0}", Receiving_InstID       );   // "223344" Receiving Institution ID Code
                                    IsoField.Field_102     = string.Format("{0}", mobileNo               );   //Account Identification 1	MSISDN
                                    IsoField.Field_123     = string.Format("201101204024102"             );   //POS data code
                                    IsoField.Field_127_002 = Fld127_002                                   ;

                                    IsoXML_msg.Fields  = IsoField;

                                    Xml_Serializer     = new XmlSerializer(IsoXML_msg.GetType());
                                    Xml_String_Writer  = new StringWriter();
                                    Xml_Serializer.Serialize(Xml_String_Writer, IsoXML_msg);
                                    ISO8583_Msg        = Xml_String_Writer.ToString();

                                    ISO8583_Msg  = System.Text.RegularExpressions.Regex.Replace(ISO8583_Msg, @"\s{2,}", " ");

                                    ReplaceStr   = Utilities.Get_TagValueWithEnd(ISO8583_Msg, "<Iso8583PostXml", "<MsgType>", true, 1);

                                    ISO8583_Msg  = ISO8583_Msg.Replace(ReplaceStr, "");

                                    ISO8583_Msg  = ISO8583_Msg.Replace("<Iso8583PostXml", "<Iso8583PostXml>");
                                                            
                                    ReplaceStr   = Utilities.Get_TagValueWithEnd(ISO8583_Msg, "<Field_043>", "</Field_043>", true, 1);
                                    ISO8583_Msg  = ISO8583_Msg.Replace(string.Format("<Field_043>{0}</Field_043>", ReplaceStr), string.Format("<Field_043>{0}</Field_043>", customerName));
                                    ISO8583_Msg  = string.Format("..{0}", ISO8583_Msg);

                                    EcoResp      = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.registration_Response();
                                    EcoResp      = EcoSvc.autoRegister2MNO(FinWebUserID, FinWebUserPassword, IPAddr, Convert.ToInt16(portNum), mobileNo, "ECOCASH", Curr_Rec_ID, ISO8583_Msg);

                                    ISOResponseCode = Utilities.Get_TagValueWithEnd(EcoResp.registrationMessage, "<Field_039>", "</Field_039>", true, 1).Trim();

                                    if (EcoResp.registered == true)
                                    {
                                        SQLStr = string.Format("UPDATE UserAccount SET Extracted_YN_B = 1, Extract_Date_D = CURRENT_TIMESTAMP, Extract_ID_C = '{1}', Reg_StatusMsg_C = '{2}'  WHERE CustomerId = '{0}'", Curr_Rec_ID, Source_Trn_ID, ISOResponseCode);
                                    }
                                    else
                                    {
                                        //SQLStr = string.Format("UPDATE UserAccount SET Fin_Retry_No = CASE WHEN Fin_Retry_No IS NULL THEN 1 ELSE Fin_Retry_No + 1 END, Extract_ID_C = '{1}' , Reg_StatusMsg_C = '{2}' WHERE  CustomerId = '{0}'", Curr_Rec_ID, Source_Trn_ID, ISOResponseCode);
                                        SQLStr = string.Format("UPDATE UserAccount SET Extracted_YN_B = {3}, Extract_ID_C = '{1}' , Reg_StatusMsg_C = '{2}' WHERE  CustomerId = '{0}'", Curr_Rec_ID, Source_Trn_ID, ISOResponseCode, ((ISOResponseCode == "00") || (ISOResponseCode == "26")) ? "1, Extract_Date_D = CURRENT_TIMESTAMP " : "0");
                                    }
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), SQLStr);
                                }
                            }
                        }
                    }
                    SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                    LogStep("autoRegister2MNO", "autoRegister2MNO  Main Exit");
                }
            }
            catch (Exception ex)
            {
                string retErr = LogError(ex.GetHashCode().ToString(), "autoRegister2MNO", ex, Curr_Rec_ID);
            }
        }


        public void Reverse_Mobile_Transactions_SCB()
        {
            string Curr_Rec_ID = "";
            try
            {
                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Reverse_Mobile_Transactions)
                {
                    LogStep("Reverse_Mobile_Transactions_SCB", "Reverse_Mobile_Transactions_SCB disabled");
                    //return "0";
                }
                else
                {
                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "SCB")
                    {
                        LogStep("Reverse_Mobile_Transaction", "Reverse_Mobile_Transactions_SCB Main Entry");
                        DataTable Curr_Rec       = new DataTable();
                        DataTable SysRec         = new DataTable();
                        DataTable Entity_Rec     = new DataTable();

                        string Instance_Name     = "";

                        string Curr_License      = null;
                        string Svr_Lic_Date      = null;

                        int   Lic_Response_Code  = 0;
                        bool  Econet_Integrated  = false;

                        string Source_TrnID      = null;
        
                        string FinWebUserID           = "";
                        string FinWebUserPassword     = "";
                        bool   Fin_PseudoResponse_Use = false;
                        bool   Finacle_Live           = false;
                        string TrnDateTime            = "";
         
                        string Posting_Entities          = "(";
                        int    Processing_Retry_Max      = 0;
                        int    Processing_Retry_Interval = 0;
                        string Source_Trn_ID_Reversed    = "";
                        string trxnProduct_ID            = "ECOREV_SCB";
                        string Source_Trn_ID   = "";
                        string NewTrn_ID       = "";
                        string Source_Account  = "";
                        string SQLStr          = "";
                        string XML_Ref         = "";
                        string ChannelRef_Num  = "";
                        double TrnAmnt         = 0;
                        string RevBatchID      = "";
                        string originalTransactionNumber = "";
                        string TRANSACTION_TYPE = "";

                        string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                        string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                        if (Thread_Busy == "OK FOR POSTING")
                        {
                            SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                            SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                            if (SysRec.Rows.Count > 0)
                            {
                                foreach (DataRow Sys_Row in SysRec.Rows)
                                {
                                    Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                    Econet_Integrated         = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                    Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                    Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                    TrnDateTime               = Sys_Row["TrnDateTime"].ToString();
                                    FinWebUserID              = Sys_Row["FinWebUserID"].ToString();
                                    Finacle_Live              = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                    FinWebUserPassword        = Sys_Row["FinWebUserPassword"].ToString();
                                    Fin_PseudoResponse_Use    = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                    Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"].ToString());
                                    Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"].ToString());
                                }
                            }

                            // Get Transactin Type used for Reversals
                            SysRec   = new DataTable();
                            SQLStr   = string.Format("SELECT Parameter_Value, Parameter_ID  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('TRANSACTION_TYPE') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                            if (SysRec.Rows.Count > 0)
                            {
                                foreach (DataRow param_Row in SysRec.Rows)
                                {
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "TRANSACTION_TYPE".ToUpper())    TRANSACTION_TYPE = param_Row["Parameter_Value"].ToString();
                                }
                            }

                            if (Econet_Integrated == true)
                            {
                                // Process the Reversals Only
                                Curr_Rec = new DataTable();
                                SQLStr = "SELECT TOP 40 *, TrnType_SubType_C AS TrnType1 FROM Payment_Instruction PyInst,  (SELECT TOP 1 [Id] AS [UsrID], [Password] AS Usr_Pass FROM UserInfo WITH (NOLOCK) WHERE Live_YN_B = '1') UsrConnInfo WHERE PyInst.TrnType_C = 'REV' AND PyInst.Posted_B = 0 AND  PyInst.Reversed_B = 0 AND PyInst.Fin_Retry_No < 5 AND DATEDIFF(MINUTE,  PyInst.Trn_Time, CURRENT_TIMESTAMP) >= (10 * PyInst.Fin_Retry_No) AND DATEDIFF(MINUTE,  COALESCE(PyInst.Processing_Time,DATEADD(MINUTE,-7,CURRENT_TIMESTAMP)), CURRENT_TIMESTAMP) >= 5 AND DATEDIFF(HOUR,PyInst.Trn_Time, CURRENT_TIMESTAMP) < 12 ORDER BY Fin_Retry_No ASC, Trn_Time DESC";

                                Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                if (Curr_Rec.Rows.Count > 0)
                                {
                                    foreach (DataRow revRow in Curr_Rec.Rows)
                                    {
                                        Curr_Rec_ID               = revRow["Trn_ID_N"].ToString().Trim();
                                        FinWebUserID              = revRow["UsrID"].ToString().Trim();
                                        FinWebUserPassword        = revRow["Usr_Pass"].ToString().Trim();

                                        Source_Trn_ID             = revRow["Fin_TrnUniqueID_C"].ToString().Trim();
                                        TrnAmnt                   = Convert.ToDouble(revRow["paymentAmount"].ToString()); ;
                                        Source_Trn_ID_Reversed    = revRow["Reversed_ID"].ToString().Trim();
                                        XML_Ref                   = revRow["tokenId"].ToString().Trim();
                                        ChannelRef_Num            = revRow["Fin_ChannelRefNum_C"].ToString().Trim();

                                        Source_Account            = revRow["destinationAccount"].ToString().Trim();
                                        originalTransactionNumber = revRow["Trn_Group_ID_C"].ToString().Trim();
                                        //if (revRow["TrnType1"].ToString().Trim().Contains("W2B"))
                                        //{
                                        //    Source_Account = revRow["sourceAccountNo"].ToString().Trim();
                                        //}
                                        //else
                                        //{
                                        //    Source_Account = revRow["destinationAccount"].ToString().Trim();
                                        //}
                                        e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient FinClient   = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
                                        e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Posting_Response         FinPostResp = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Posting_Response();

                                        FinPostResp = FinClient.ReverseTransaction_SCB(Source_Trn_ID, ChannelRef_Num, "ECOCASH", Curr_Rec_ID, Source_Account, TrnAmnt, originalTransactionNumber, Fin_PseudoResponse_Use, TRANSACTION_TYPE);

                                        if (FinPostResp.Success)
                                        {
                                            SQLStr = string.Format("UPDATE Payment_Instruction SET Reversed_B = 1 WHERE Trn_ID_N = '{0}'", Source_Trn_ID_Reversed);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                            //SQL_Str = string.Format("UPDATE Payment_Instruction SET Posted_B = '1', Reversed_B = '1' ,Posted_In_MUB_B = '1', Fin_SuccessOrFailure_C = 'Y', Processing_Time = CURRENT_TIMESTAMP WHERE Trn_ID_N = '{0}'",);
                                            SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Reversed_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Processing_Time = CURRENT_TIMESTAMP, Fin_Response_Det_C = '{1}'  WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, FinPostResp.responseMsg);
                                        }
                                        else
                                        {
                                            SQLStr = string.Format("UPDATE Payment_Instruction SET Fin_Retry_No = Fin_Retry_No + 1, Processing_Time = CURRENT_TIMESTAMP, Fin_Response_Det_C = '{1}' WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, FinPostResp.responseMsg);
                                        }
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                    }
                                }
                            }
                        }
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                        LogStep("Reverse_Mobile_Transactions_SCB", "Reverse_Mobile_Transactions_SCB  Main Exit");
                    }
                }
            }
            catch (Exception ex)
            {
                string retErr = LogError(ex.GetHashCode().ToString(), "Reverse_Mobile_Transactions_SCB", ex, Curr_Rec_ID);
            }
        }

        private void Reverse_Mobile_Transactions_Data_Insert_Zipit()
        {
            string Curr_Rec_ID    = "0";
            string SQLStr         = "";
            string trxnProduct_ID = "ZIPITREV_INS";
            try
            {
                DataTable Curr_Rec    = new DataTable();
                //string objectStatus   = string.Format("[dbo].[ustp_CheckObj_Status] @StatusObjName = '{0}' ", trxnProduct_ID);
                //objectStatus          = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], objectStatus).Rows[0]["AuthStatus"].ToString().Trim();
                //if (objectStatus != "AUTHORISED")

                SQLStr = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0][0].ToString()) <= 0)
                {
                    LogStep(trxnProduct_ID, "Reverse_Mobile_Transactions_Data_Insert_Zipit disabled");
                }
                else
		        {
			        DataTable SysRec    = new DataTable();

			        string Str_TrnAmnt  = "0.00";

		            string Curr_License = null;
			        string Svr_Lic_Date = null;

			        string Trn_Desc     = null;
			        string Trn_Ref      = "";

			        int    Lic_Response_Code  = 0;
			        bool   Zipit_Integrated   = true;

			        string Source_TrnID       = null;

			        string FinWebUserID       = "";
			        string FinWebUserPassword = "";
			        string Fin_Trn_Desc_DR    = "";
			        string Fin_Trn_Desc_CR    = "";
			        bool   Fin_PseudoResponse_Use = false;
			        bool   Finacle_Live           = false;

			        int    Processing_Retry_Max      = 0;
			        int    Processing_Retry_Interval = 0;

			        string sourceReference = "";
			        string TrnID           = "";
			        string TelephoneNo     = "";
			        string tokenId         = "";
			        string Existing_Rec    = "";
			        string Return_Val      = "";
               
			        string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID,e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

				        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
				        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
				        if (SysRec.Rows.Count > 0)
				        {
					        foreach (DataRow Sys_Row in SysRec.Rows)
					        {
						        //Econet_Integrated = CBool(Sys_Row.Item("EcoCash_Interface_YN_B").ToString)
						        Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
						        Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
						        FinWebUserID              = Convert.ToString(Sys_Row["FinWebUserID"]);
						        Finacle_Live              = bool.Parse(Sys_Row["Finacle_Live"].ToString());
						        FinWebUserPassword        = Convert.ToString(Sys_Row["FinWebUserPassword"]);
						        Fin_PseudoResponse_Use    = bool.Parse(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
						        Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"]);
						        Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"]);
					        }
				        }

				        if (Zipit_Integrated == true)
				        {
					        // Process the Reversals Only
					        Curr_Rec = new DataTable();
					        SQLStr   = "SELECT * FROM vw_New_Reversal_Recs Order by Rev_ReqInst ASC";
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"].ToString(), SQLStr);
					        if (Curr_Rec.Rows.Count > 0)
					        {
						        foreach (DataRow revRow in Curr_Rec.Rows)
						        {
							        Curr_Rec_ID     = revRow["Rev_ReqInst"].ToString().Trim();
							        sourceReference = revRow["sourceReference"].ToString().Trim();
							        TrnID           = revRow["TrnID"].ToString().Trim();
							        TelephoneNo     = revRow["TelephoneNo"].ToString().Trim();
							        tokenId         = revRow["tokenId"].ToString().Trim();
							        Existing_Rec    = revRow["CheckRef"].ToString().Trim();
							        Return_Val      = revRow["ReqACKResponse"].ToString().Trim();

							        if (Existing_Rec == "UNKNOWN")
							        {
								        SQLStr = string.Format("[dbo].[usp_ReverseTransaction] @tokenId = '{0}', @TelephoneNo = '{1}', @TrnID = '{2}', @sourceReference = '{3}', @Return_Val = '{4}', @Source_Instance = '{5}'", tokenId, TelephoneNo, TrnID, sourceReference, Return_Val, Curr_Rec_ID);
							        }
							        else
							        {
								        SQLStr = string.Format("UPDATE Payment_Instruction_RevRequest SET ReqRetry = ReqRetry + 1 WHERE Rev_ReqInst = '{0}'", Curr_Rec_ID);
							        }
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"].ToString(), SQLStr);
						        }
					        }
				        }
			            SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                    }
		        }
            }
		    catch (Exception ex)
		    {
                string retErr = LogError(ex.GetHashCode().ToString(), trxnProduct_ID, ex, Curr_Rec_ID);
		    }
        }


        private void postCardTransaction()
        {
            string Curr_Rec_ID = "0";
            try
            {
                DataTable Curr_Rec = new DataTable();

                string trxnProduct_ID = "SVC_postCardTransaction";
                string objectStatus   = string.Format("[dbo].[ustp_CheckObj_Status] @StatusObjName = '{0}' ", trxnProduct_ID);
                objectStatus          = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], objectStatus).Rows[0]["AuthStatus"].ToString().Trim();
                if (objectStatus != "AUTHORISED")
                {
                    LogStep("postCardTransaction", "postCardTransaction disabled");
                }
                else
                {
                    DataTable SysRec = new DataTable();

                    string Str_TrnAmnt            = "0.00";

                    string Curr_License           = null;
                    string Svr_Lic_Date           = null;

                    string Trn_Desc               = null;
                    string Trn_Ref                = "";

                    int    Lic_Response_Code      = 0;
                    bool   Zipit_Integrated       = true;

                    string Source_TrnID           = null;

                    string FinWebUserID           = "";
                    string FinWebUserPassword     = "";
                    string Fin_Trn_Desc_DR        = "";
                    string Fin_Trn_Desc_CR        = "";
                    bool   Fin_PseudoResponse_Use = false;
                    bool   Finacle_Live           = false;

                    trxnProduct_ID                = "postCardTransaction";
                    int Processing_Retry_Max      = 0;
                    int Processing_Retry_Interval = 0;

                    string sourceReference      = "";
                    string TrnID                = "";
                    string TelephoneNo          = "";
                    string tokenId              = "";
                    string Existing_Rec         = "";
                    string Return_Val           = "";
                    string SQLStr               = "";
                    string sourceAccountNo      = "";
                    string destinationAccountNo = "";
                    string transferAmount       = "";

                    e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.FCUBSUPServiceSEIClient sClient = new e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.FCUBSUPServiceSEIClient();

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                //Econet_Integrated = CBool(Sys_Row.Item("EcoCash_Interface_YN_B").ToString)
                                Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                Finacle_Live              = bool.Parse(Sys_Row["Finacle_Live"].ToString());
                                Fin_PseudoResponse_Use    = bool.Parse(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"]);
                                Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"]);
                            }
                        }
                        SQLStr = "SELECT TOP 1 * FROM dbo.UserInfo WITH (NOLOCK) WHERE Live_YN_B = 1";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                FinWebUserID       = Convert.ToString(Sys_Row["Id"]);
                                FinWebUserPassword = Convert.ToString(Sys_Row["Password"]);
                            }
                        }

                        Curr_Rec = new DataTable();
                        SQLStr   = "SELECT *, COALESCE(Processing_Num,0) AS RetryNo FROM dbo.EXTRHFLE WHERE TRH_Posted =0 AND TRH_Mgr_Approved = 1 AND COALESCE(Processing_Num,0) < 5 ORDER BY TRH_ID ASC ";
                        Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"].ToString(), SQLStr);
                        if (Curr_Rec.Rows.Count > 0)
                        {
                            foreach (DataRow revRow in Curr_Rec.Rows)
                            {
                                Curr_Rec_ID          = revRow["TRH_ID"].ToString().Trim();
                                sourceReference      = revRow["sourceReference"].ToString().Trim();

                                sourceAccountNo      = revRow["TRH_DR_AccNo_C"].ToString().Trim();
                                destinationAccountNo = revRow["TRH_CR_AccNo_C"].ToString().Trim();
                                transferAmount       = revRow["TRH_TR_Amt"].ToString().Trim();
                            
                                Return_Val           = revRow["ReqACKResponse"].ToString().Trim();

                                //if (Existing_Rec == "UNKNOWN")
                                //{
                                //    SQLStr = string.Format("[dbo].[usp_ReverseTransaction] @tokenId = '{0}', @TelephoneNo = '{1}', @TrnID = '{2}', @sourceReference = '{3}', @Return_Val = '{4}', @Source_Instance = '{5}'", tokenId, TelephoneNo, TrnID, sourceReference, Return_Val, Curr_Rec_ID);
                                //}
                                //else
                                //{
                                //    SQLStr = string.Format("UPDATE Payment_Instruction_RevRequest SET ReqRetry = ReqRetry + 1 WHERE Rev_ReqInst = '{0}'", Curr_Rec_ID);
                                //}
                                //SqlHelper.RunSql(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"].ToString(), SQLStr);
                            }
                        }
                        //}
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                    }
                }
            }
            catch (Exception ex)
            {
                string retErr = LogError(ex.GetHashCode().ToString(), "postCardTransaction", ex, Curr_Rec_ID);
            }
        }


        string Synch_ZimraBPNumbers()
        {
           DataTable Sys_Tbl                    = new DataTable();
           string    SQLStr                     = "";
           bool      ENABLE_DEBUG_LOGGING       = false;
           bool      SYNCH_ZIMRA_BPARTNERS      = false;
           Int16     SYNCH_ZIMRA_BPARTNERS_DAYS = 1;
           string    Curr_Rec_ID                = "Entry";
           string    trxnProduct_ID             = "Synch_ZimraBPNumbers";

           try
            {
                SQLStr = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0][0].ToString()) > 0)
                {
                    Sys_Tbl = new DataTable();
                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('ENABLE_DEBUG_LOGGING','SYNCH_ZIMRA_BPARTNERS','SYNCH_ZIMRA_BPARTNERS_DAYS') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in Sys_Tbl.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "ENABLE_DEBUG_LOGGING".ToUpper())       ENABLE_DEBUG_LOGGING       = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "SYNCH_ZIMRA_BPARTNERS".ToUpper())      SYNCH_ZIMRA_BPARTNERS      = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "SYNCH_ZIMRA_BPARTNERS_DAYS".ToUpper()) SYNCH_ZIMRA_BPARTNERS_DAYS = Convert.ToInt16(param_Row["Parameter_Value"].ToString());
                    }
                    LogStep(trxnProduct_ID, "ZIMRA Synching - After Parameter Acquisition", ENABLE_DEBUG_LOGGING);
                    if (SYNCH_ZIMRA_BPARTNERS ==false)
                    {
                        LogStep(trxnProduct_ID, "IMRA Synching - After Synch Checking - NOT Allowed", ENABLE_DEBUG_LOGGING);
                        return "BP Number Syhching not Enabled";
                    }
                    else
                    {
                        LogStep(trxnProduct_ID, "ZIMRA Synching - After Synch Checking - Allowed", ENABLE_DEBUG_LOGGING);
                        string Trxn_Date_C   = "";
                        string Trxn_Date_Qry = "";
                        string BPNumber      = "";
                        string BPName        = "";
                        string BPStatus      = "";
                        string DateCreated   = "";
                        object ExtensionData = "";
                        int DayRecs          = 0;

                        //Trxn_Date_C   = "2017-05-29";
                        //BPNumber      = "1411";
                        //BPName        = "Testing";
                        //BPStatus      = "OK";
                        //DateCreated   = "2017-05-22";
                        LogStep(trxnProduct_ID, "ZIMRA Synching - before syncTbl", ENABLE_DEBUG_LOGGING);
                        System.Data.DataTable syncTbl = new System.Data.DataTable();
                        LogStep(trxnProduct_ID, "ZIMRA Synching - before sClient", ENABLE_DEBUG_LOGGING);
                  
                        e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.ZimraWebServiceSoapClient sClient_Zimra = new e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.ZimraWebServiceSoapClient();
                        LogStep(trxnProduct_ID, "ZIMRA Synching - before postingResp", ENABLE_DEBUG_LOGGING);
                        e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.post_ZIMRA_Transaction_Response postingResp = new e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.post_ZIMRA_Transaction_Response();
                        LogStep(trxnProduct_ID, "ZIMRA Synching - before ZIMRA_Record", ENABLE_DEBUG_LOGGING);
     
                        e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.Record[] ZIMRA_Record;
                        LogStep(trxnProduct_ID, "ZIMRA Synching - Before DB Opening", ENABLE_DEBUG_LOGGING);

                        syncTbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "SELECT *, CONVERT(VARCHAR(10),Trxn_Date_D,25) AS Trxn_Date_C  FROM tbl_Run_Days WHERE Trxn_RunNo_N = -1 AND Trxn_Prod_ID ='ZIMRA_SYNCH' ORDER BY Trxn_Date_D ASC");
                        if (syncTbl.Rows.Count != 0)
                        {
                            LogStep(trxnProduct_ID, string.Format("ZIMRA Synching - DB Opened = {0} Rows", syncTbl.Rows.Count), ENABLE_DEBUG_LOGGING);
                            foreach (DataRow InfoRow1 in syncTbl.Rows)
                            {
                                LogStep(trxnProduct_ID, "ZIMRA Synching - Before Synch Call", ENABLE_DEBUG_LOGGING);
                                Trxn_Date_C   = InfoRow1["Trxn_Date_C"].ToString().Trim();
                                Trxn_Date_Qry = Trxn_Date_C.Replace("-", "");

                                LogStep(trxnProduct_ID, "ZIMRA Synching - After Trxn_Date_C assignment", ENABLE_DEBUG_LOGGING);
                                ZIMRA_Record = sClient_Zimra.ZIMRA_RecieverRequest("SELECT_ZIMRA", Trxn_Date_Qry);
                                LogStep(trxnProduct_ID, "ZIMRA Synching - After Synch Call", ENABLE_DEBUG_LOGGING);
                                DayRecs = 0;
                                LogStep(trxnProduct_ID, "ZIMRA Synching - Before Snych Items looping", ENABLE_DEBUG_LOGGING);
                                foreach (e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.Record ZimraItem in ZIMRA_Record)
                                {
                                    LogStep(trxnProduct_ID, "ZIMRA Synching - After Snych looping", ENABLE_DEBUG_LOGGING);
                                    Trxn_Date_C   = ZimraItem.DateCreated;
                                    BPNumber      = ZimraItem.BPNumber;
                                    BPName        = ZimraItem.BPName;
                                    BPStatus      = ZimraItem.BPStatus;
                                    DateCreated   = ZimraItem.DateCreated;
                                    ExtensionData = ZimraItem.ExtensionData;
                                    Curr_Rec_ID   = BPNumber;
                                    if (BPNumber != "")
                                    {
                                        try
                                        {
                                            LogStep(trxnProduct_ID, "ZIMRA Synching - Looping Before Insert BP Detail", ENABLE_DEBUG_LOGGING);
                                            SQLStr = string.Format("[ustp_InsertUpdate_BPNumber] @Customer = '{0}', @Name = '{1}', @City = '{2}', @Street = '{3}', @DateCreated  = '{4}',@BPStatus = '{5}'", BPNumber, BPName, "UNK", "UNK", DateCreated, BPStatus);
                                            SqlHelper.RunSqlScalar(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                                            LogStep(trxnProduct_ID, string.Format("ZIMRA Synching - Looping  After Insert BP. Details : BPNumber = {0} BPName = {1} DateCreated = {2} BPStatus = {3}, Record Number = {4} ", BPNumber, BPName, DateCreated, BPStatus, DayRecs), ENABLE_DEBUG_LOGGING);
                                        }
                                        catch (Exception loopexpt)
                                        {
                                            // skip the errornous record
                                            LogStep("Synch_ZimraBPNumbers", string.Format("ZIMRA Synching - Inner Looping  {0}", loopexpt.StackTrace.ToString()), ENABLE_DEBUG_LOGGING);
                                        }
                                        DayRecs = DayRecs + 1;
                                    }
                                }
                                LogStep(trxnProduct_ID, string.Format("ZIMRA Synching - Outer Looping  Before Date Update"), ENABLE_DEBUG_LOGGING);
                                SQLStr = string.Format("UPDATE dbo.tbl_Run_Days SET Trxn_RunNo_N = {0}, run_Time = CURRENT_TIMESTAMP WHERE CONVERT(VARCHAR(10), Trxn_Date_D,25)= '{1}' AND Trxn_Prod_ID ='ZIMRA_SYNCH'", DayRecs, Trxn_Date_C);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                                LogStep(trxnProduct_ID, string.Format("ZIMRA Synching - Outer Looping  Before Date Update"), ENABLE_DEBUG_LOGGING);
                            }
                        }
                    }
                }
                return "2";
            }
            catch (Exception ex)
            {
                string retErr = LogError(ex.GetHashCode().ToString(), trxnProduct_ID, ex, Curr_Rec_ID);
                string ex_msg = ex.StackTrace.ToString();
                LogStep(trxnProduct_ID, string.Format("ZIMRA Synching - Outer Looping  {0}", ex.StackTrace.ToString()), ENABLE_DEBUG_LOGGING);
                return ex_msg;
            }
        }

        public void Reverse_Mobile_Transactions_Zipit()
        {
            string Curr_Rec_ID = "0";
            try
            {
                DataTable Curr_Rec = new DataTable();

                string trxnProduct_ID = "SVC_Rev_MobTran_ZIPIT";
                string objectStatus   = string.Format("[dbo].[ustp_CheckObj_Status] @StatusObjName = '{0}' ", trxnProduct_ID);
                objectStatus = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], objectStatus).Rows[0]["AuthStatus"].ToString().Trim();
                if (objectStatus != "AUTHORISED")
                {
                    LogStep("Reverse_Mobile_Transactions_Zipit", "Reverse_Mobile_Transactions_Zipit disabled", true);
                }
                else
                {
                    DataTable Data_Table = new DataTable();
                    DataTable Data_Rec   = new DataTable();
                    DataTable Temp_Rec   = new DataTable();
                    Curr_Rec             = new DataTable();
                    DataTable SysRec     = new DataTable();
                    DataTable Entity_Rec = new DataTable();
                    DataTable ZipitDb    = new DataTable();

                    DataTable XML_Request_Rec = new DataTable();

                    string Str_TrnAmnt     = "0.00";

                    string Out_Dir         = null;
                    double Curr_Run_No     = 0.0;

                    string Out_File_Name   = null;
                    string Instance_Name   = "";
                    bool CreateTestXML     = false;
                    string Curr_License    = null;
                    string Svr_Lic_Date    = null;

                    string Trn_Desc        = null;
                    string Trn_Ref         = "";

                    int Lic_Response_Code  = 0;
                    bool Zipit_Integrated  = true;

                    string Source_TrnID    = null;
                    string Trn_GUID        = "";

                    string FinWebUserID          = "";
                    string FinWebUserPassword    = "";
                    string Fin_Trn_Desc_DR       = "";
                    string Fin_Trn_Desc_CR       = "";
                    bool  Fin_PseudoResponse_Use = false;
                    bool  Finacle_Live           = false;
                    //Finacle_Bridge.Finacle_Response_Detail Tmp_Fin_Post_Resp = new Finacle_Bridge.Finacle_Response_Detail();
                    //Finacle_Bridge.Finacle_BridgeSoapClient tmpFinBridgeSC   = new Finacle_Bridge.Finacle_BridgeSoapClient();
                    //Finacle_Bridge.Posting_Response tmpPostingResponse       = new Finacle_Bridge.Posting_Response();
                    string PostTime               = "";
                    string TrnDateTime            = "";
                    Trn_Narr1_Narr2_AndRef Trn_Ref_and_Narr = new Trn_Narr1_Narr2_AndRef();
                    string Posting_Entities       = "(";
                    int Processing_Retry_Max      = 0;
                    int Processing_Retry_Interval = 0;
                    trxnProduct_ID                = "ZIPITREV";
                    string Source_Trn_ID          = "";
                    string Source_Trn_ID_Reversed = "";
                    string Source_Account = "";
                    string SQLStr         = "";
                    double TrnAmnt        = 0.00;
                    string ChannelRef_Num = "";
                    string XML_Ref        = "";
                    string originalTransactionNumber = "";
                    string TRANSACTION_TYPE          = "";

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                //Econet_Integrated       = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                CreateTestXML             = bool.Parse(Sys_Row["Create_TestXML_YN_B"].ToString());
                                Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                TrnDateTime               = Sys_Row["TrnDateTime"].ToString();
                                Out_Dir                   = Sys_Row["OutFileDir"].ToString().Trim();
                                FinWebUserID              = Convert.ToString(Sys_Row["FinWebUserID"]);
                                Finacle_Live              = bool.Parse(Sys_Row["Finacle_Live"].ToString());
                                FinWebUserPassword        = Convert.ToString(Sys_Row["FinWebUserPassword"]);
                                Fin_PseudoResponse_Use    = bool.Parse(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"]);
                                Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"]);
                            }
                        }

                        SysRec   = new DataTable();
                        SQLStr   = string.Format("SELECT Parameter_Value, Parameter_ID  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('TRANSACTION_TYPE') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                        Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow param_Row in SysRec.Rows)
                            {
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "TRANSACTION_TYPE".ToUpper()) TRANSACTION_TYPE = param_Row["Parameter_Value"].ToString();
                            }
                        }

                        if (Zipit_Integrated == true)
                        {
                            // Process the Reversals Only
                            Curr_Rec = new DataTable();
                            SQLStr   = "SELECT TOP 50 *, UsrInfo.Id AS UsrID, UsrInfo.[Password] AS Usr_Pass  FROM Payment_Instruction, (SELECT TOP 1 Id, [Password] FROM dbo.UserInfo WHERE Live_YN_B = 1) UsrInfo WHERE TrnType_C = 'REV' AND Posted_B = 0 AND  Reversed_B = 0 AND Fin_Retry_No < 5 AND DATEDIFF(MINUTE,  Trn_Time, CURRENT_TIMESTAMP) >= (10 * Fin_Retry_No) ORDER BY Fin_Retry_No ASC, Trn_ID_N ASC";
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"].ToString(), SQLStr);
                            if (Curr_Rec.Rows.Count > 0)
                            {
                                foreach (DataRow revRow in Curr_Rec.Rows)
                                {
                                    Curr_Rec_ID               = revRow["Trn_ID_N"].ToString().Trim();
                                    FinWebUserID              = revRow["UsrID"].ToString().Trim();
                                    FinWebUserPassword        = revRow["Usr_Pass"].ToString().Trim();

                                    Source_Trn_ID             = revRow["Fin_TrnUniqueID_C"].ToString().Trim();    // Old
                                    TrnAmnt                   = Convert.ToDouble(revRow["paymentAmount"].ToString()); ;
                                    Source_Trn_ID_Reversed    = revRow["Reversed_ID"].ToString().Trim();          // Old
                                    XML_Ref                   = revRow["tokenId"].ToString().Trim();      // Differ with Token_ID for EcoCash
                                    ChannelRef_Num            = revRow["Fin_ChannelRefNum_C"].ToString().Trim();

                                    Source_Account            = revRow["destinationAccount"].ToString().Trim();
                                    originalTransactionNumber = revRow["Trn_Group_ID_C"].ToString().Trim();


                                    if (revRow["TrnType_SubType_C"].ToString().ToUpper().Trim().Contains("RECEIVE"))
                                    {
                                        Source_Account = revRow["destinationAccount"].ToString().Trim();
                                    }
                                    else
                                    {
                                        Source_Account = revRow["sourceAccountNo"].ToString().Trim();
                                    }

                                    //tmpFinBridgeSC = new Finacle_Bridge.Finacle_BridgeSoapClient();
                                    //tmpPostingResponse = new Finacle_Bridge.Posting_Response();

                                    //if (Properties.Settings.Default.reverseByFirstPosting)
                                    //{
                                    //    tmpPostingResponse = tmpFinBridgeSC.ReverseTransaction_Post_First(revRow["sourceReference"].ToString().Trim(), revRow["uniqueReference_c"].ToString().Trim(), "ZIPIT", revRow["trnReference"].ToString().Trim(), Source_Account, revRow["telephoneNo"].ToString().Trim());
                                    //}
                                    //else
                                    //{
                                    //    tmpPostingResponse = tmpFinBridgeSC.ReverseTransaction(revRow["sourceReference"].ToString().Trim(), revRow["uniqueReference_c"].ToString().Trim(), "ZIPIT", revRow["trnReference"].ToString().Trim(), Source_Account, revRow["telephoneNo"].ToString().Trim());
                                    //}

                                    //if (tmpPostingResponse.Success)
                                    //{
                                    //    SQLStr = string.Format("UPDATE Payment_Instruction SET Reversed_B = 1 WHERE Trn_ID_N = '{0}'", Source_Trn_ID_Reversed);
                                    //    ZipitDb.exec(SQLStr);
                                    //    SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y',  Fin_Response_Det_C = '{1} #R# {2}'  WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.responseMsg, tmpPostingResponse.referenceID);
                                    //}
                                    //else
                                    //{
                                    //    SQLStr = string.Format("UPDATE Payment_Instruction SET Fin_Retry_No = Fin_Retry_No + 1,  Fin_Response_Det_C = '{1} #R# {2}'  WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.responseMsg, tmpPostingResponse.referenceID);
                                    //}

                                    e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient FinClient   = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
                                    e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Posting_Response         FinPostResp = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Posting_Response();

                                    FinPostResp = FinClient.ReverseTransaction_SCB(Source_Trn_ID, ChannelRef_Num, "ZIPIT", Curr_Rec_ID, Source_Account, TrnAmnt, originalTransactionNumber, Fin_PseudoResponse_Use, TRANSACTION_TYPE);
                                    //FinPostResp = FinClient.ReverseTransaction_SCB(Source_Trn_ID, ChannelRef_Num, "ECOCASH", Curr_Rec_ID, Source_Account, TrnAmnt,  originalTransactionNumber, Fin_PseudoResponse_Use);
                                                             
                                                             // ZIPIT           0200:0503112838:605872:1088991, ZP180711190127837819
                                                             // ECOCASH
                                 
                                    if (FinPostResp.Success)
                                    {
                                        SQLStr = string.Format("UPDATE Payment_Instruction SET Reversed_B = 1 WHERE Trn_ID_N = '{0}'", Source_Trn_ID_Reversed);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"], SQLStr);
                                        //SQL_Str = string.Format("UPDATE Payment_Instruction SET Posted_B = '1', Reversed_B = '1' ,Posted_In_MUB_B = '1', Fin_SuccessOrFailure_C = 'Y', Processing_Time = CURRENT_TIMESTAMP WHERE Trn_ID_N = '{0}'",);
                                        SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Reversed_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Processing_Time = CURRENT_TIMESTAMP, Fin_Response_Det_C = '{1}'  WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, FinPostResp.responseMsg);
                                    }
                                    else
                                    {
                                        SQLStr = string.Format("UPDATE Payment_Instruction SET Fin_Retry_No = Fin_Retry_No + 1, Processing_Time = CURRENT_TIMESTAMP, Fin_Response_Det_C = '{1}' WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, FinPostResp.responseMsg);
                                    }
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Zipit_SQL_DB_Connection"], SQLStr);
                                }
                            }
                        }
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                    }
                }
            }
            catch (Exception ex)
            {
                string retErr = LogError(ex.GetHashCode().ToString(), "Reverse_Mobile_Transactions_Zipit", ex, Curr_Rec_ID);
            }
        }


        public void Reverse_Mobile_Transactions()
        {
            string Curr_Rec_ID = "";
            try
            {
                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Reverse_Mobile_Transactions)
                {

                    LogStep("Reverse_Mobile_Transactions", "Reverse_Mobile_Transactions disabled");
                    //return "0";
                }
                else

                    if ((e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "STB") || (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BABC_ZW"))
                {
                    {
                        LogStep("Reverse_Mobile_Transaction", "Reverse_Mobile_Transactions Main Entry");

                        DataTable Data_Table = new DataTable();
                        DataTable Data_Rec   = new DataTable();
                        DataTable Temp_Rec   = new DataTable();
                        DataTable Curr_Rec   = new DataTable();
                        DataTable SysRec     = new DataTable();
                        DataTable Entity_Rec = new DataTable();

                        DataTable XML_Request_Rec = new DataTable();

                        string Out_Dir         = null;

                        string Instance_Name   = "";
                        bool CreateTestXML     = false;
                        string Curr_License    = null;
                        string Svr_Lic_Date    = null;

                        bool Econet_Integrated = false;

                        string FinWebUserID         = "";
                        string FinWebUserPassword   = "";
                        bool Fin_PseudoResponse_Use = false;
                        bool Finacle_Live           = false;

                        string TrnDateTime            = "";
                        int Processing_Retry_Max      = 0;
                        int Processing_Retry_Interval = 0;
                        string Source_Trn_ID_Reversed = "";
                        string trxnProduct_ID         = "ECOREV";
                        string Source_Trn_ID          = "";
                        string NewTrn_ID              = "";
                        string Source_Account         = "";
                        string SQLStr                 = "";
                        string XML_Ref                = "";
                        string ChannelRef_Num         = "";
                        string RevBatchID             = "";
                        string CurrDate               = "";

                        string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                        string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                        if (Thread_Busy == "OK FOR POSTING")
                        {
                            SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                            SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime,CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,108) as CurrDate FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                            if (SysRec.Rows.Count > 0)
                            {
                                foreach (DataRow Sys_Row in SysRec.Rows)
                                {
                                    Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                    Econet_Integrated         = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                    CreateTestXML             = Convert.ToBoolean(Sys_Row["Create_TestXML_YN_B"].ToString());
                                    Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                    Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                    TrnDateTime               = Sys_Row["TrnDateTime"].ToString();
                                    Out_Dir                   = Sys_Row["OutFileDir"].ToString().Trim();
                                    FinWebUserID              = Sys_Row["FinWebUserID"].ToString();
                                    Finacle_Live              = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                    FinWebUserPassword        = Sys_Row["FinWebUserPassword"].ToString();
                                    Fin_PseudoResponse_Use    = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                    Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"].ToString());
                                    Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"].ToString());
                                    CurrDate                  = Sys_Row["CurrDate"].ToString();
                                }
                            }

                            if (Econet_Integrated == true)
                            {
                                // Process the Reversals Only
                                Curr_Rec = new DataTable();
                                //SQLStr = "SELECT *, CASE WHEN PyInst.sourceAccountNo = (SELECT TOP 1 Wallet_Acc_C FROM tbl_SysParam WITH (NOLOCK)) THEN 'W2B' ELSE 'B2W' END AS TrnType1 FROM Payment_Instruction PyInst,  (SELECT TOP 1 [Id] AS [UsrID], [Password] AS Usr_Pass FROM UserInfo WITH (NOLOCK) WHERE Live_YN_B = '1') UsrConnInfo WHERE PyInst.Trn_Type = 'REV' AND PyInst.Posted_B = 0 AND  PyInst.Reversed_B = 0 AND PyInst.Fin_Retry_No < 5 AND DATEDIFF(MINUTE,  PyInst.Trn_Time, CURRENT_TIMESTAMP) >= (10 * PyInst.Fin_Retry_No) AND DATEDIFF(MINUTE,  COALESCE(PyInst.Processing_Time,DATEADD(MINUTE,-7,CURRENT_TIMESTAMP)), CURRENT_TIMESTAMP) >= 5 AND DATEDIFF(HOUR,PyInst.Trn_Time, CURRENT_TIMESTAMP) < 12;";

                                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BABC_ZW")
                                {
                                    SQLStr = string.Format("SELECT TOP 40 *, CASE WHEN PyInst.sourceAccountNo = (SELECT TOP 1 Wallet_Acc_C FROM tbl_SysParam WITH (NOLOCK)) THEN 'W2B' ELSE 'B2W' END AS TrnType1 FROM Payment_Instruction PyInst,  (SELECT TOP 1 [Id] AS [UsrID], [Password] AS Usr_Pass FROM UserInfo WITH (NOLOCK) WHERE Live_YN_B = '1' AND UserGroup = 'TRAN' AND Bank_ID = '{0}') UsrConnInfo WHERE PyInst.Trn_Type = 'REV' AND PyInst.Posted_B = 0 AND  PyInst.Reversed_B = 0 AND PyInst.Fin_Retry_No < 5 AND DATEDIFF(MINUTE,  PyInst.Trn_Time, CURRENT_TIMESTAMP) >= (10 * PyInst.Fin_Retry_No) AND DATEDIFF(MINUTE,  COALESCE(PyInst.Processing_Time,DATEADD(MINUTE,-7,CURRENT_TIMESTAMP)), CURRENT_TIMESTAMP) >= 5 AND DATEDIFF(HOUR,PyInst.Trn_Time, CURRENT_TIMESTAMP) < 12 ORDER BY Fin_Retry_No ASC, Trn_Date_D DESC;", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                                }

                                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "SCB")
                                {
                                    SQLStr =  string.Format("SELECT TOP 40 *, TrnType_SubType_C AS TrnType1 FROM Payment_Instruction PyInst, (SELECT TOP 1 [Id] AS [UsrID], [Password] AS Usr_Pass FROM UserInfo WITH (NOLOCK) WHERE Live_YN_B = '1' AND UserGroup = 'TRAN' AND Bank_ID = '{0}') UsrConnInfo WHERE PyInst.TrnType_C = 'REV' AND PyInst.Posted_B = 0 AND  PyInst.Reversed_B = 0 AND PyInst.Fin_Retry_No < 5 AND DATEDIFF(MINUTE,  PyInst.Trn_Time, CURRENT_TIMESTAMP) >= (10 * PyInst.Fin_Retry_No) AND DATEDIFF(MINUTE,  COALESCE(PyInst.Processing_Time,DATEADD(MINUTE,-7,CURRENT_TIMESTAMP)), CURRENT_TIMESTAMP) >= 5 AND DATEDIFF(HOUR,PyInst.Trn_Time, CURRENT_TIMESTAMP) < 12 ORDER BY Fin_Retry_No ASC, Trn_Time DESC;",e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                                }

                                Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                if (Curr_Rec.Rows.Count > 0)
                                {
                                    foreach (DataRow revRow in Curr_Rec.Rows)
                                    {
                                        Curr_Rec_ID        = revRow["Inst_No_N"].ToString().Trim();
                                        FinWebUserID       = revRow["UsrID"].ToString().Trim();
                                        FinWebUserPassword = revRow["Usr_Pass"].ToString().Trim();

                                        Source_Trn_ID          = revRow["sourceReference"].ToString().Trim();
                                        Source_Trn_ID_Reversed = revRow["Reversed_ID"].ToString().Trim();
                                        XML_Ref                = revRow["tokenId"].ToString().Trim();

                                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BABC_ZW")
                                        {
                                            ChannelRef_Num = revRow["Source_Trn_ID"].ToString().Trim();
                                            NewTrn_ID      = revRow["Trn_ID_C"].ToString().Trim();
                                            RevBatchID     = revRow["Batch_ID_C"].ToString().Trim();

                                            if (revRow["TrnType1"].ToString().Trim().Contains("W2B"))
                                            {
                                                Source_Account = revRow["sourceAccountNo"].ToString().Trim();
                                            }
                                            else
                                            {
                                                Source_Account = revRow["destinationAccount"].ToString().Trim();
                                            }

                                            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient EcoSvc  = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
                                            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.Posting_Response            EcoResp = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.Posting_Response();

                                            EcoResp = EcoSvc.ReverseTransaction_Core_Internal(FinWebUserID, FinWebUserPassword, XML_Ref, ChannelRef_Num, "OWN", NewTrn_ID, Source_Account, RevBatchID, NewTrn_ID);

                                            if (EcoResp.Success == true)
                                            {
                                                SQLStr = string.Format("UPDATE Payment_Instruction SET Reversed_B = 1 WHERE Inst_No_N = '{0}'", Source_Trn_ID_Reversed);
                                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                                //SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y',  Fin_Response_Det_C = '{1} #R# {2}'  WHERE Trn_ID_N = '{0}'", Curr_Rec_ID, tmpPostingResponse.responseMsg, tmpPostingResponse.referenceID);
                                                SQLStr = string.Format("UPDATE Payment_Instruction SET Posted_B = 1, Posted_In_MUB_B = 1, Fin_SuccessOrFailure_C = 'Y', Trn_Response_C = 'SUCCESS', Processing_Time = CURRENT_TIMESTAMP, Fin_Response_Det_C = '{1} #R# {2}' WHERE Inst_No_N = '{0}'", Curr_Rec_ID, EcoResp.responseMsg, "");
                                            }
                                            else
                                            {
                                                SQLStr = string.Format("UPDATE Payment_Instruction SET Fin_Retry_No = Fin_Retry_No + 1, Fin_Response_Det_C = '{1} #R# {2}' WHERE Inst_No_N = '{0}'", Curr_Rec_ID, EcoResp.responseMsg, "");
                                            }
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                        }
                                    }
                                }
                            }
                        }
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                        LogStep("Reverse_Mobile_Transactions", "Reverse_Mobile_Transactions  Main Exit");
                    }
                }
            }
            catch (Exception ex)
            {
                string retErr = LogError(ex.GetHashCode().ToString(), "Reverse_Mobile_Transactions", ex, Curr_Rec_ID);
            }
        }

        public void Reverse_Mobile_Transactions_Data_Insert()
        {
            string Curr_Rec_ID      = "0";
            try
            {
                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Mobile_Trxn_Reversal_Data_Insert)
                {
                    LogStep("Reverse_Mobile_Transactions_Data_Insert", "Reverse_Mobile_Transactions_Data_Insert disabled");
                    //return "0";
                }
                else
                {
                    LogStep("Reverse_Mobile_Transactions_Data_Insert", "Reverse_Mobile_Transactions_Data_Insert - Main Entry");

                    DataTable Curr_Rec = new DataTable();
                    DataTable SysRec   = new DataTable();

                    string Str_TrnAmnt = "0.00";


                    string Curr_License = null;
                    string Svr_Lic_Date = null;

                    string Trn_Desc     = null;
                    string Trn_Ref      = "";

                    int    Lic_Response_Code      = 0;
                    bool   Econet_Integrated      = false;
                    string Source_TrnID           = null;

                    string FinWebUserID           = "";
                    string FinWebUserPassword     = "";
                    string Fin_Trn_Desc_DR        = "";
                    string Fin_Trn_Desc_CR        = "";
                    bool   Fin_PseudoResponse_Use = false;
                    bool   Finacle_Live           = false;

                    string trxnProduct_ID         = "ECOREV_INS";
                    int Processing_Retry_Max      = 0;
                    int Processing_Retry_Interval = 0;

                    string sourceReference = "";
                    string TrnID           = "";
                    string TelephoneNo     = "";
                    string tokenId         = "";
                    string Existing_Rec    = "";
                    string Return_Val      = "";
                    string LocalSQLStr     = "";
                    string batchNo         = "";
                    string CurrBusDate     = "";

                    cls_MobileCredentials MobileCreds = new cls_MobileCredentials();
                    MobileCreds.Initialise();

                    e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient eCoSvc      = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
                    e_Verify_BACK_OFFICE_Service_Interface.eCoCash.cls_batchDet                batchDet    = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.cls_batchDet();
                    e_Verify_BACK_OFFICE_Service_Interface.eCoCash.cls_batchDet                batchDetChg = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.cls_batchDet();
                    e_Verify_BACK_OFFICE_Service_Interface.eCoCash.cls_batchDet                batchDetLvy = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.cls_batchDet();

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID));
                        LocalSQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";

                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], LocalSQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                Econet_Integrated = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                Curr_License      = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date      = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                FinWebUserID      = Sys_Row["FinWebUserID"].ToString();
                                Finacle_Live      = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                FinWebUserPassword        = Sys_Row["FinWebUserPassword"].ToString();
                                Fin_PseudoResponse_Use    = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"].ToString());
                                Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"].ToString());
                            }
                        }

                        if (Econet_Integrated == true)
                        {
                            // Process the Reversals Only
                            Curr_Rec    = new DataTable();
                            LocalSQLStr = "SELECT * FROM vw_New_Reversal_Recs Order by Rev_ReqInst ASC";
                            Curr_Rec    = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], LocalSQLStr);
                            if (Curr_Rec.Rows.Count > 0)
                            {
                                MobileCreds = fn_GetMobCredentials();

                                foreach (DataRow revRow in Curr_Rec.Rows)
                                {
                                    Curr_Rec_ID     = revRow["Rev_ReqInst"].ToString().Trim();
                                    sourceReference = revRow["sourceReference"].ToString().Trim();
                                    TrnID           = revRow["TrnID"].ToString().Trim();
                                    TelephoneNo     = revRow["TelephoneNo"].ToString().Trim();
                                    tokenId         = revRow["tokenId"].ToString().Trim();
                                    Existing_Rec    = revRow["CheckRef"].ToString().Trim();
                                    Return_Val      = revRow["ReqACKResponse"].ToString().Trim();

                                    if (Existing_Rec == "UNKNOWN")
                                    {
                                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BABC_ZW")
                                        {
                                            if (CurrBusDate == "")
                                            {
                                                batchDet    = eCoSvc.GetBatchNumber_Public_NoDate(MobileCreds.mobUserID, MobileCreds.mobUserPassword);
                                                CurrBusDate = batchDet.curr_Business_date;
                                            }
                                            else
                                            {
                                                batchDet = eCoSvc.GetBatchNumber_Public(MobileCreds.mobUserID, MobileCreds.mobUserPassword, CurrBusDate);
                                            }

                                            batchDetChg = eCoSvc.GetBatchNumber_Public(MobileCreds.mobUserID, MobileCreds.mobUserPassword, batchDet.curr_Business_date);
                                            batchDetLvy = eCoSvc.GetBatchNumber_Public(MobileCreds.mobUserID, MobileCreds.mobUserPassword, batchDet.curr_Business_date);
                                            //LocalSQLStr = string.Format("[dbo].[usp_ReverseTransaction] @tokenId = '{0}', @TelephoneNo = '{1}', @TrnID = '{2}', @sourceReference = '{3}', @Return_Val = '{4}', @Source_Instance = '{5}', @Batch_ID = '{6}'", tokenId, TelephoneNo, TrnID, sourceReference, Return_Val, Curr_Rec_ID, batchDet.batchNo);
                                            LocalSQLStr = string.Format("[dbo].[usp_ReverseTransaction_WithCharge] @tokenId = '{0}', @TelephoneNo = '{1}', @TrnID = '{2}', @sourceReference = '{3}', @Return_Val = '{4}', @Source_Instance = '{5}', @Batch_ID = '{6}', @Batch_ID_Chg = '{7}', @Batch_ID_Lvy = '{8}' ", tokenId, TelephoneNo, TrnID, sourceReference, Return_Val, Curr_Rec_ID, batchDet.batchNo, batchDetChg.batchNo, batchDetLvy.batchNo);
                                        }
                                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "SCB")
                                        {
                                            //if (CurrBusDate == "")
                                            //{
                                            //    batchDet = eCoSvc.GetBatchNumber_Public_NoDate(MobileCreds.mobUserID, MobileCreds.mobUserPassword);
                                            //    CurrBusDate = batchDet.curr_Business_date;
                                            //}
                                            //else
                                            //{
                                            //    batchDet = eCoSvc.GetBatchNumber_Public(MobileCreds.mobUserID, MobileCreds.mobUserPassword, CurrBusDate);
                                            //}

                                            //batchDetChg = eCoSvc.GetBatchNumber_Public(MobileCreds.mobUserID, MobileCreds.mobUserPassword, batchDet.curr_Business_date);
                                            //batchDetLvy = eCoSvc.GetBatchNumber_Public(MobileCreds.mobUserID, MobileCreds.mobUserPassword, batchDet.curr_Business_date);
                                            //LocalSQLStr = string.Format("[dbo].[usp_ReverseTransaction] @tokenId = '{0}', @TelephoneNo = '{1}', @TrnID = '{2}', @sourceReference = '{3}', @Return_Val = '{4}', @Source_Instance = '{5}', @Batch_ID = '{6}'", tokenId, TelephoneNo, TrnID, sourceReference, Return_Val, Curr_Rec_ID, batchDet.batchNo);
                                            LocalSQLStr = string.Format("[dbo].[usp_ReverseTransaction_WithCharge] @tokenId = '{0}', @TelephoneNo = '{1}', @TrnID = '{2}', @sourceReference = '{3}', @Return_Val = '{4}', @Source_Instance = '{5}', @Batch_ID = '{6}', @Batch_ID_Chg = '{7}', @Batch_ID_Lvy = '{8}' ", tokenId, TelephoneNo, TrnID, sourceReference, Return_Val, Curr_Rec_ID, sourceReference, sourceReference, sourceReference);
                                        }
                                    }
                                    else
                                    {
                                        LocalSQLStr = string.Format("UPDATE Payment_Instruction_RevRequest SET ReqRetry = ReqRetry + 1 WHERE Rev_ReqInst = '{0}'", Curr_Rec_ID);
                                    }
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], LocalSQLStr);
                                }
                            }
                        }
                    }
                    LocalSQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], LocalSQLStr);

                    LogStep("Reverse_Mobile_Transactions_Data_Insert", "Reverse_Mobile_Transactions_Data_Insert Main Exit");
                }
            }
            catch (Exception exRevDataInst)
            {
                string retErr = LogError(exRevDataInst.GetHashCode().ToString(), "Reverse_Mobile_Transactions_Data_Insert", exRevDataInst, Curr_Rec_ID);
            }
        }


        public cls_MobileCredentials fn_GetMobCredentials()
        {
            string                LocalSQLStr = "SELECT TOP 1 *  FROM dbo.UserInfo WHERE Live_YN_B = 1 ";
            DataTable             tmpRec      = new DataTable();
            cls_MobileCredentials tmpCred     = new cls_MobileCredentials();
            tmpCred.Initialise();        


            //e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.return 

            tmpRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], LocalSQLStr);
            if (tmpRec.Rows.Count > 0)
            {
                // batchDet = eCoSvc.GetBatchNumber_Public_NoDate()
                foreach (DataRow dtRow in tmpRec.Rows)
                {
                    tmpCred.mobUserID       = dtRow["id"].ToString().Trim();
                    tmpCred.mobUserPassword = dtRow["Password"].ToString().Trim();
                    tmpCred.mobUserLive     = true;
                }
            }
            return tmpCred;
        }


        
        public string Alert_for_ZIMRA_Transactions()
        {
            if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Alert_ZimraTransactions)
            {
                LogStep("Alert_for_ZIMRA_Transactions Step 0", "Alert_for_ZIMRA_Transactions disabled");
                return "0";
            }
            else
            {
                LogStep("Alert_for_ZIMRA_Transactions Step 1", "Alert_for_ZIMRA_Transactions Main Entry");
                int File_Loop_Max = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
                string temp_Proxy_InUse   = "";
                bool   Proxy_InUse        = true;
                bool   Proxy_BypassProxyOnLocal = true;
                string Proxy_IP           = "";
                string Proxy_Domain       = "";
                string Proxy_User         = "";
                string Proxy_Password     = "";
                int    Proxy_Port         = 80;
                string SMS_API_User       = "";
                string SMS_API_Pwd        = "";
                string Target_SMS_IMSISDN = "";
                string Target_User_FName  = "";
                string Target_User_SName  = "";
                string Target_User_Mail   = "";
                string InstNo             = "";
                string SQLStr             = "";
                string Proxy_Port_Str     = "";
                //string Selcom_UserId   = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
                //string SelCom_UserPass = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];

                string Source_SMS_IMSISDN = "";
                string SMS_Response  = "";
                string SMS_Amount;
                double SMS_Amount_N  = 0.00;
                double SMS_New_Bal_N = 0.00;
                string SMS_Narration = "";
                string SMS_Date      = "";
                string MsgToSend     = "";
                string SMS_Message   = "";
                string Trn_Type      = "to";
                MsgToSend            = "";

                bool      Alerts_Sent = false;
                DataTable SMS_Tbl     = new DataTable();
                m_SMSDatabaseClass    = new Select_Research.SQLDB(ConfigurationManager.AppSettings["SMS_DB_Connection"]);

                try
                {
                    //Archive Old messages
                    SQLStr = "exec [dbo].[ustp_MoveProcessed_SMSes]";
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["SMS_DB_Connection"], SQLStr);
                    // Read the Proxy settings
                    m_SMSDatabaseClass = new Select_Research.SQLDB(m_SMSConnection.ConnString);

                    SMS_Tbl = new DataTable();
                    SQLStr  = string.Format("SELECT TOP 1 *, (SELECT TOP 1 Proxy_InUse_YN_B FROM tbl_Entities WITH (NOLOCK) WHERE Entity_ID_C = 'SMS') Entity_Proxy FROM dbo.tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'");
                    SMS_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                    if (SMS_Tbl != null && SMS_Tbl.Rows.Count > 0)
                    {
                        foreach (DataRow dr in SMS_Tbl.Rows)
                        {

                            bool.TryParse(dr["Entity_Proxy"].ToString().Trim(), out Proxy_InUse);
                            bool.TryParse(dr["Proxy_BypassProxyOnLocal"].ToString().Trim(), out Proxy_BypassProxyOnLocal);
                            Proxy_Domain   = dr["Proxy_Domain_C"].ToString().Trim();
                            Proxy_IP       = dr["Proxy_IP_C"].ToString().Trim();
                            Proxy_Port_Str = dr["Proxy_Port"].ToString().Trim();
                            int.TryParse(Proxy_Port_Str, out Proxy_Port);
                            Proxy_User     = dr["Proxy_UserID_C"].ToString().Trim();
                            Proxy_Password = dr["Proxy_Pass_C"].ToString().Trim();
                            SMS_API_User   = dr["SMS_API_User_C"].ToString().Trim();
                            SMS_API_Pwd    = dr["SMS_API_Pass_C"].ToString().Trim();
                        }
                    }
                    try
                    {

                        WebProxy Http_proxy;
                        Http_proxy                    = (Proxy_Port_Str == "") ? new WebProxy(Proxy_IP) : new WebProxy(Proxy_IP, Proxy_Port);
                        Http_proxy.Credentials        = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                        Http_proxy.BypassProxyOnLocal = Proxy_BypassProxyOnLocal;

                        WebClient client = new WebClient();
                        client.Proxy     = (Proxy_InUse) ? Http_proxy : null;

                        // Read Transactions from View Table 
                        SMS_Tbl = new DataTable();
                        SQLStr  = string.Format("SELECT * FROM dbo.tbl_SMS Where SMS_Response_C is NULL ORDER BY 1 ASC");
                        SMS_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["SMS_DB_Connection"], SQLStr);
                        if (SMS_Tbl != null && SMS_Tbl.Rows.Count > 0)
                        {
                            foreach (DataRow dr in SMS_Tbl.Rows)
                            {
                                //if (dr["Alert_Status"].ToString().Trim() == "NOT OK FOR ALERT")
                                //{
                                //    break;
                                //}
                                //else
                                {
                                    Alerts_Sent = true;
                                    Source_SMS_IMSISDN = "Barclays";
                                    //Source_SMS_IMSISDN = "SelTech";
                                    Target_SMS_IMSISDN = dr["SMS_Target_IMSISDN_C"].ToString().Trim();
                                    //Target_User_FName  = dr["Alert_UserName_C"].ToString().Trim();
                                    //Target_User_SName  = dr["Alert_UserSurname_C"].ToString().Trim();
                                    //Target_User_Mail   = dr["Alert_eMail_C"].ToString().Trim();
                                    InstNo = dr["SMS_Inst_No_N"].ToString().Trim();
                                    SMS_Message = string.Format("{0:yyyy-MM-dd HH:mm}. {1}", DateTime.Now, dr["SMS_Message_C"].ToString());
                                    //SMS_Message = string.Format("{0:yyyy-MM-dd HH:mm}. Hi {1} {2}. No Mobile trxns since {3:yyyy-MM-dd HH:mm} ({4}). Call for Support.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, dr["Last_Trxn_Time"], dr["IdleTime"].ToString());
                                    //SMS_Message = string.Format("No Mobile Trxns since {3:yyyy-MM-dd HH:mm} ({4}). Call for Support.", dr["Curr_Time"].ToString(), Target_User_FName, Target_User_SName, dr["Last_Trxn_Time"], dr["IdleTime"].ToString());

                                    MsgToSend = string.Format("http://smsbuzz.rsrit.co.za/api/httpsend.php?username={0}&password={1}&mobiles={2}&senderID={3}&message={4}", SMS_API_User, SMS_API_Pwd, Target_SMS_IMSISDN, Source_SMS_IMSISDN, SMS_Message);
                                    ////if (dr["Alert_Type_C"].ToString().Trim() == "SMS")
                                    //{
                                    Uri targetURI = new Uri(MsgToSend);
                                    //Failed_At = string.Format("Seven = {0}", MsgToSend);
                                    Stream data = client.OpenRead(targetURI);

                                    StreamReader reader = new StreamReader(data);
                                    //Failed_At = string.Format("Eight = {0}", MsgToSend);
                                    SMS_Response = reader.ReadToEnd();
                                    //Failed_At = string.Format("Nine = {0}", MsgToSend);
                                    SQLStr = string.Format("UPDATE dbo.tbl_SMS SET SMS_Sent_Date_D = CURRENT_TIMESTAMP, SMS_Response_C = '{0}' WHERE SMS_Inst_No_N = '{1}'", SMS_Response, InstNo);
                                    SqlHelper.RunSql(m_SMSConnection.ConnString, SQLStr);
                                }
                            }
                            if (Alerts_Sent)
                            {
                                SQLStr = string.Format("INSERT INTO tbl_AlertType_Log( Alert_ID_C, Alert_Time)");
                                SQLStr += string.Format(" SELECT 'ZIMRA SMS',CURRENT_TIMESTAMP");
                                SqlHelper.RunSql(m_SMSConnection.ConnString, SQLStr);
                            }
                        }
                    }
                    catch (Exception Record_Exception)
                    {
                        string retErr = LogError(Record_Exception.GetHashCode().ToString(), "Alert_for_ZIMRA_Transactions", Record_Exception, InstNo);
                    }
                    SMS_Tbl = null;

                    LogStep("Alert_for_ZIMRA_Transactions Step 21", "Alert_for_ZIMRA_Transactions Main Exit");
                    return "1";
                }
                catch (Exception expt_Outer)
                {
                    string retErr = LogError(expt_Outer.GetHashCode().ToString(), "Alert_for_ZIMRA_Transactions", expt_Outer, InstNo);
                    return "2";
                }
                //finally
                //{
                //    Application.DoEvents();
                //}
            }
        }

        public static byte[] ReadFully(Stream input)
        {
            byte[] buffer = new byte[16 * 1024];
            using (MemoryStream ms = new MemoryStream())
            {
                int read;
                while ((read = input.Read(buffer, 0, buffer.Length)) > 0)
                {
                    ms.Write(buffer, 0, read);
                }
                return ms.ToArray();
            }
        }

        //public string Import_SCB_AML_Transactions()
        //{
        //    ImportResponse_cls    localImportResponse  = new ImportResponse_cls();
        //    System.Data.DataTable Curr_Rec             = new System.Data.DataTable();
        //    System.Data.DataTable ChkRec               = new System.Data.DataTable();
        //    System.Data.DataTable AccCust_ExclusionTbl = new System.Data.DataTable();

        //    string Curr_File   = "";
        //    string Curr_File_1 = null;
        //    string Curr_File_2 = null;

        //    string currline         = "";
        //    string currline_Detail  = "";
        //    double LineNo           = 0;
          
        //    try
        //    {
        //        if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Import_SCB_AML_Transactions)
        //        {
        //            LogStep("Import_SCB_AML_Transactions Step 0", "Import_SCB_AML_Transactions disabled");
        //            return "Import_SCB_AML_Transactions not Enabled";
        //        }
        //        else
        //        {
        //            LogStep("Import_SCB_AML_Transactions Step 1", "Import_SCB_AML_Transactions Main Entry");
        //            Curr_File                      = null;
        //            string SQLStr                  = "";
        //            string RTGS_Ref                = "";
        //            string sErrorString            = "";
        //            string Bck_Up_File             = "";
        //            string Bck_Up_File_Name        = "";
        //            double LineNumber              = 0;
        //            string TrnDate                 = " ";
        //            string TrnDate2                = "";
        //            string Response_File           = "";
        //            string Finacle_Resp_File       = "";
        //            string Finacle_Resp_File_1     = "";
        //            string Finacle_Remote_File     = "";
        //            string Finacle_Remote_File_Bkp = "";
        //            int    PosSep                  = 0;
        //            int    PosSep2                 = 0;
        //            int    PosSep3                 = 0;
        //            string[] Tag_Separator         = { "BCN" };
        //            int    Trn_Len                 = 0;
        //            string Account_Num             = "";

        //            //string Trn_Codes = System.Configuration.ConfigurationManager.AppSettings["AML_Trn_Codes"];

        //            string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Import_SCB_AML_Transactions_FolderName;
        //            if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //            {
        //                In_Path += System.IO.Path.DirectorySeparatorChar;
        //            }
        //            string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Import_SCB_AML_Backup_Folder;
        //            if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //            {
        //                Back_Path += System.IO.Path.DirectorySeparatorChar;
        //            }
        //            string[] FileList = Directory.GetFiles(In_Path, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.SCB_Trxn_Data_Stem);
        //            string FileName = null;

        //            Fin_Trn_Detail tmp_Fin_Trn = new Fin_Trn_Detail();
        //            tmp_Fin_Trn.Initialise_Details();

        //            int File_Number = 0;

        //            // Load Exclusion Table
        //            AccCust_ExclusionTbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "SELECT * FROM tbl_CustomerAccount_Exclusion WITH (NOLOCK)");

        //            foreach (string FileName_loopVariable in FileList)
        //            {
        //                FileName         = FileName_loopVariable;
        //                PosSep           = FileName.LastIndexOf("\\");

        //                Curr_File        = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
        //                Curr_File_1      = In_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //                Bck_Up_File_Name = Back_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //                FileInfo CurrFileInfo = new FileInfo(Curr_File_1);
        //                if (!Utilities.IsFileLocked(CurrFileInfo))
        //                {
        //                   // Check if file has been imported
        //                    int File_Found = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("SELECT COUNT(*) FROM [tbl_FileHistory] WITH (NOLOCK) WHERE [File_Name_C] = '{0}'", Curr_File)).Rows[0][0].ToString());
        //                    if (File_Found == 0)
        //                    {
        //                        // Log the file
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("INSERT INTO [tbl_FileHistory](File_Date_D,File_Name_C,File_Import_Date_D,Exported_B,STR_Exported_B,File_Source_C,importStage_C) SELECT '{0:yyyy-MM-dd}','{1}' ,'{0:yyyy-MM-dd HH:mm:ss}','0','0', 'CTR_SCB','0' ", DateTime.Now, Curr_File));

        //                        string LineData1 = "";
        //                        string LineData2 = "";
        //                        string LineData3 = "";
        //                        Hashtable Fin_Trxn_Hash = new Hashtable();

        //                        var lines = File.ReadAllLines(Curr_File_1);
        //                        char[] ExclusionSeparator     = { '§' };
        //                        string AML_Excluded_Trxns_str = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.AML_Excluded_Trxns;
        //                        string[] Exclusion_Params     = AML_Excluded_Trxns_str.Split(ExclusionSeparator);

        //                        foreach (var line in lines)
        //                        {
        //                            LineNumber++;
        //                            currline        = line.ToString().Trim();
        //                            currline_Detail = string.Format(" Line {0} in File {1}", currline, FileName);
        //                            if (currline.Length > 3)
        //                            {
        //                                if ((currline.Substring(0, 3) == "01§") || (currline.Substring(0, 3) == "02§") || (currline.Substring(0, 3) == "03§"))
        //                                {
        //                                    if (currline.Substring(0, 3) == "01§") LineData1 = currline;
        //                                    if (currline.Substring(0, 3) == "02§") LineData2 = currline;
        //                                    if (currline.Substring(0, 3) == "03§") LineData3 = currline;

        //                                    if ((currline.Substring(0, 3) == "03§") && (LineData1 != "") && (LineData2 != ""))
        //                                    {
        //                                        Fin_Trxn_Hash.Clear();
        //                                        Fin_Trxn_Hash.Add("Trxn_Data1"     , LineData1);
        //                                        Fin_Trxn_Hash.Add("Trxn_Data2"     , LineData2);
        //                                        Fin_Trxn_Hash.Add("Trxn_Data3"     , LineData3);
        //                                        Fin_Trxn_Hash.Add("Trxn_Imported_B", "0");
        //                                        Fin_Trxn_Hash.Add("File_name_C"    , Curr_File_1);
        //                                        if (LineData3.Trim().Length > 33)
        //                                        {
        //                                            Account_Num = LineData3.Substring(19, 13);
        //                                        }

        //                                        //if ((!LineData2.Contains("FEE")) || (!LineData2.Contains("TAXAT")) || (!LineData2.Contains("GOVERNMENT TAX")) && (!LineData2.Contains("CONTRA EBRANCH")) && (!LineData2.Contains("CHARGE")) && (!LineData2.Contains("REVERSAL")) && (!LineData2.Contains("TRANSFER")) && (!LineData2.Contains("STATEMENT")) && (!LineData3.Contains("CONTRA")) && (!LineData3.Contains("REVERSAL"))  && (!LineData3.Contains("ZIPIT")));
        //                                        // if ((!trxnIsExcluded(Exclusion_Params,LineData2)) && (!trxnIsExcluded(Exclusion_Params,LineData3)))
        //                                        if ((!trxnIsExcluded(Exclusion_Params, LineData2)) && (!trxnIsExcluded(Exclusion_Params, LineData3, AccCust_ExclusionTbl, Account_Num)))
        //                                        {
        //                                            SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "tbl_AML_FinTransaction_Staging_SCB", Fin_Trxn_Hash);
        //                                        }
        //                                        LineData1   = "";
        //                                        LineData2   = "";
        //                                        LineData3   = "";
        //                                        Account_Num = "";
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        //Log the file as having finished importing
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE [tbl_FileHistory] SET importStage_C = '1' WHERE File_Name_C = '{0}' AND File_Source_C = '{1}'", Curr_File, "CTR_SCB"));
        //                    }
        //                    System.IO.File.Copy(FileName, Bck_Up_File_Name, overwrite: true);
        //                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Allow_File_Deletion)
        //                    {
        //                        System.IO.File.Delete(FileName);
        //                    }
                        
        //                    LineNumber = 0;
        //                    // Now Insert into Main TABLE FROM staging table
        //                    System.Data.DataTable SCB_Rec = new System.Data.DataTable();
        //                    SQLStr  = "SELECT Stg.InstNo AS RecID, Stg.Trxn_Data1 + '§' + Stg.Trxn_Data2 + '§' + Stg.Trxn_Data3 AS TxnDetail, Stg.File_Name_C FROM tbl_AML_FinTransaction_Staging_SCB Stg INNER JOIN tbl_FileHistory Hst ON RIGHT(Stg.File_name_C, LEN(Hst.File_Name_C)) = Hst.File_Name_C WHERE Stg.Trxn_Imported_B = 0 AND Hst.importStage_C = 1";
        //                    SCB_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                    foreach (DataRow AML_Row in SCB_Rec.Rows)
        //                    {
        //                        LineNumber++;
        //                        char[] Detail_Separator       = { '§' };
        //                        string Data_Detail_1          = AML_Row["TxnDetail"].ToString().Trim();
        //                        string Trn_RecID              = AML_Row["RecID"].ToString().Trim();
        //                        Curr_File_1                   = AML_Row["File_Name_C"].ToString().Trim();
        //                        string[] Data_Detail_1_Params = Data_Detail_1.Split(Detail_Separator);
        //                        Trn_Len                       = Data_Detail_1_Params.Length;
        //                        if (Trn_Len > 10)
        //                        {
        //                            tmp_Fin_Trn.Customer_Number          = Data_Detail_1_Params[Trn_Len - 6];    // OK
        //                            tmp_Fin_Trn.Customer_First_Name      = "";
        //                            tmp_Fin_Trn.Customer_Middle_Name     = "";
        //                            tmp_Fin_Trn.Customer_Last_Name       = "";
        //                            tmp_Fin_Trn.Title                    = "";
        //                            tmp_Fin_Trn.Gender                   = "";
        //                            tmp_Fin_Trn.Physical_Address_Line_1  = "";
        //                            tmp_Fin_Trn.Physical_Address_Line_2  = "";
        //                            tmp_Fin_Trn.Physical_Address_Line_3  = "";
        //                            tmp_Fin_Trn.Physical_Postal_City     = "";
        //                            tmp_Fin_Trn.Physical_Postal_Code     = "";
        //                            tmp_Fin_Trn.Residential_Country_Code = "";
        //                            tmp_Fin_Trn.Account_Number           = Data_Detail_1_Params[Trn_Len - 6]; //OK
        //                            tmp_Fin_Trn.Account_Name             = Data_Detail_1_Params[Trn_Len - 2]; //OK FOR ATM 
        //                            tmp_Fin_Trn.Scheme_Type              = "";
        //                            tmp_Fin_Trn.Scheme_Code              = "";
        //                            tmp_Fin_Trn.Scheme_Code_Description  = "";
        //                            tmp_Fin_Trn.Transaction_Type_Code            = Data_Detail_1_Params[19]; // OK
        //                            tmp_Fin_Trn.Transaction_Domicile_Branch_Code = Data_Detail_1_Params[3];  // OK
        //                            tmp_Fin_Trn.Transaction_Domicile_Branch_Name = Data_Detail_1_Params[18]; // OK
        //                            tmp_Fin_Trn.Transaction_Currency             = Data_Detail_1_Params[Trn_Len - 3]; // OK
        //                            tmp_Fin_Trn.Transaction_Amount               = Data_Detail_1_Params[14];          // OK
        //                            tmp_Fin_Trn.Transaction_Amount_LCY           = Math.Round(Convert.ToDecimal(Data_Detail_1_Params[14]) * Convert.ToDecimal(Data_Detail_1_Params[15]),2).ToString();          // OK
        //                            tmp_Fin_Trn.exchangeRate                     = Data_Detail_1_Params[15];
        //                            tmp_Fin_Trn.Transaction_Detail               = Data_Detail_1_Params[Trn_Len - 5]; // OK
        //                            tmp_Fin_Trn.Transaction_Narrative            = Data_Detail_1_Params[Trn_Len - 5]; // OK
        //                            tmp_Fin_Trn.NewBal                           = Data_Detail_1_Params[Trn_Len - 4]; // OK
        //                            tmp_Fin_Trn.Transaction_Remark               = Data_Detail_1_Params[Trn_Len - 7]; // OK
        //                            tmp_Fin_Trn.Teller_ID                        = "";
        //                            tmp_Fin_Trn.Teller                           = Data_Detail_1_Params[5];
        //                            tmp_Fin_Trn.TrnDate                          = Data_Detail_1_Params[4];

        //                            var stringwriter = new System.IO.StringWriter();
        //                            var serializer   = new XmlSerializer(tmp_Fin_Trn.GetType());
        //                            serializer.Serialize(stringwriter, tmp_Fin_Trn);

        //                            currline_Detail = string.Format("FileName = {0} - RecID in tbl_AML_FinTransaction_Staging_SCB = {1}, Object to Save = {2} ", Curr_File, Trn_RecID, stringwriter.ToString());

        //                            if ((!((tmp_Fin_Trn.Account_Number == "8760698967899") && (tmp_Fin_Trn.Transaction_Type_Code == "C"))) && (!((tmp_Fin_Trn.Account_Number == "8774499760704") && (tmp_Fin_Trn.Transaction_Type_Code == "C"))))
        //                            {
        //                                if (tmp_Fin_Trn.Transaction_Currency != "USD")
        //                                {
        //                                    string SaveResponse = save_SCB_Trxn(tmp_Fin_Trn, Curr_File_1);
        //                                }
        //                                else
        //                                {
        //                                    string SaveResponse1 = save_SCB_Trxn(tmp_Fin_Trn, Curr_File_1);
        //                                }
        //                            }

        //                            SQLStr = string.Format("Update tbl_AML_FinTransaction_Staging_SCB Set Trxn_Imported_B  = {0} Where InstNo = '{1}'", 1, Trn_RecID);
        //                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                        }
        //                    }
        //                    //Log the file as having finished importing and remove staging Records
        //                    SQLStr = string.Format("UPDATE [tbl_FileHistory] SET importStage_C = '2' WHERE File_Name_C = '{0}' AND File_Source_C = '{1}'", Curr_File, "CTR_SCB");
        //                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                    LogStep("Import_SCB_AML_Transactions Step 2", "Import_SCB_AML_Transactions Main Exit");

        //                   //Delete The staging Transaction Records
        //                    SQLStr = string.Format("DELETE FROM tbl_AML_FinTransaction_Staging_SCB  WHERE File_Name_C = '{0}'", Curr_File_1);
        //                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                    LogStep("Import_SCB_AML_Transactions Step 3", string .Format("Import_SCB_AML_Transactions Main Exit", Curr_File));
        //                }
        //            }
        //        }
        //    }
        //    catch (Exception ExGlobal)
        //    {
        //        string retErr = LogError("23333141", "Import_SCB_AML_Transactions", ExGlobal, string.Format("{0} - {1}",Curr_File_1,currline_Detail));
        //    }
        //    return "Nothing";
        //}


        public bool trxnIsExcluded(string[] ExclusionList, string searchedStr)
        {
            string tmpSearchNarr = "";
            bool   tmpStrFound   = false;
            int    Array_Len     = 0;
            for (Array_Len = 0; (Array_Len <= (ExclusionList.Length - 1)); Array_Len++)
            {
                tmpSearchNarr  = ExclusionList[Array_Len].Trim();
                if (tmpSearchNarr != "")
                {
                    if (searchedStr.Contains(tmpSearchNarr))
                    {
                        tmpStrFound = true;
                    }
                }
            }
            return tmpStrFound;
        }

        public bool trxnIsExcluded(string[] ExclusionList, string searchedStr, DataTable tblExclusion, string AccountNumber)
        {
            string tmpSearchNarr = "";
            bool   tmpStrFound   = false;
            int    Array_Len     = 0;
            string AccNum        = "";
            string CustNum       = "";
            string tmpCustNum    = "";

            for (Array_Len = 0; (Array_Len <= (ExclusionList.Length - 1)); Array_Len++)
            {
                tmpSearchNarr = ExclusionList[Array_Len].Trim();
                if (tmpSearchNarr != "")
                {
                    if (searchedStr.Contains(tmpSearchNarr))
                    {
                        tmpStrFound = true;
                    }
                }
            }
            if (AccountNumber.Trim().Length > 0)
            {
                foreach (DataRow Exclusion_Row in tblExclusion.Rows)
                {
                    AccNum  = "";
                    CustNum = "";

                    if (Exclusion_Row["Excl_Type"].ToString().Trim() == "ACCOUNT")
                    {
                        AccNum = Exclusion_Row["Excl_Identity"].ToString().Trim();
                        if (AccNum == AccountNumber)
                        {
                            tmpStrFound = true;
                        }
                    }

                    if ((Exclusion_Row["Excl_Type"].ToString().Trim() == "CUSTOMER") && (AccountNumber.Length >= 13))
                    {
                        CustNum    = Exclusion_Row["Excl_Identity"].ToString().Trim();
                        tmpCustNum = AccountNumber.Substring(5, 6);
                        if (CustNum == tmpCustNum)
                        {
                            tmpStrFound = true;
                        }
                    }
                }
            }
            return tmpStrFound;
        }

        //public string Import_SCB_Static_Data()
        //{
        //    string Curr_File   = null;
        //    string Curr_File_1 = null;
        //    string Curr_File_2 = null;
        //    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Import_SCB_AML_StaticData)
        //    {
        //        LogStep("Import_SCB_Static_Data", "Import_SCB_Static_Data disabled");
        //        return "Fin_AML_Transactions_SCB not Enabled";
        //    }
        //    else
        //    {
        //        LogStep("Import_SCB_Static_Data", "Import_SCB_Static_Data  Step 1 - Main Entry");
        //        ImportResponse_cls    localImportResponse = new ImportResponse_cls();
        //        System.Data.DataTable Curr_Rec            = new System.Data.DataTable();
        //        System.Data.DataTable ChkRec              = new System.Data.DataTable();
        //        string RTGS_Ref          = "";
        //        string sErrorString      = "";
        //        string Bck_Up_File       = "";
        //        string Bck_Up_File_Name  = "";
        //        double DLL_Status        = 0;
        //        string TrnDate           = " ";
        //        string TrnDate2          = " ";
        //        string Response_File     = "";
        //        string Finacle_Resp_File = "";
        //        string Finacle_Resp_File_1     = "";
        //        string Finacle_Remote_File     = "";
        //        string Finacle_Remote_File_Bkp = "";
        //        int    PosSep  = 0;
        //        int    PosSep2 = 0;
        //        int    PosSep3 = 0;
        //        char[] Detail_Separator = {'§'};
        //        string RELATIONSHIPNO   = "";
        //        string SQLStr           = "";
        //        double LineNo           = 0;

        //        //string Trn_Codes = System.Configuration.ConfigurationManager.AppSettings["AML_Trn_Codes"];
        //        try
        //        {
        //            string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Import_SCB_AML_StaticData_FolderName;
        //            if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //            {
        //                In_Path += System.IO.Path.DirectorySeparatorChar;
        //            }
        //            string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Import_SCB_AML_Backup_Folder;
        //            if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //            {
        //                Back_Path += System.IO.Path.DirectorySeparatorChar;
        //            }

        //            string[] FileList = Directory.GetFiles(In_Path, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.SCB_Static_Data_Stem);
        //            string FileName = null;

        //            SCB_Static_Data_RL tmp_StaticDet = new SCB_Static_Data_RL();
        //            tmp_StaticDet.Initialise_Details();

        //            SCB_DirectorSign_cls tmpDirSign = new SCB_DirectorSign_cls();
        //            tmpDirSign.Initialise_Details();

        //            int File_Number = 0;
        //            foreach (string FileName_loopVariable in FileList)
        //            {
        //                FileName         = FileName_loopVariable;
        //                PosSep           = FileName.LastIndexOf("\\");
        //                Curr_File        = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
        //                Curr_File_1      = In_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
        //                Bck_Up_File_Name = Back_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //                FileInfo CurrFileInfo = new FileInfo(Curr_File_1);
        //                if (!Utilities.IsFileLocked(CurrFileInfo))
        //                {
        //                    // Check if file has been imported
        //                    int File_Found = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("SELECT COUNT(*) FROM [tbl_FileHistory] WITH (NOLOCK) WHERE [File_Name_C] = '{0}'", Curr_File)).Rows[0][0].ToString());
        //                    if (File_Found == 0)
        //                    {
        //                        SQLStr = string.Format("INSERT INTO [tbl_FileHistory](File_Date_D,File_Name_C,File_Import_Date_D,Exported_B,STR_Exported_B,File_Source_C,importStage_C) SELECT '{0:yyyy-MM-dd}','{1}' ,'{0:yyyy-MM-dd HH:mm:ss}','0','0', 'CTR_SCB', '0'", DateTime.Now, Curr_File);
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                        string LineData1 = "";
        //                        string LineData2 = "";
        //                        string LineData3 = "";
        //                        Hashtable Fin_Trxn_Hash = new Hashtable();

        //                        var lines = File.ReadAllLines(Curr_File_1);
        //                        foreach (var line in lines)
        //                        {
        //                            LineNo++;
        //                            string currline = line.ToString().Trim();
        //                            if (currline.Length > 3)
        //                            {
        //                                if ((currline.Substring(0, 3) == "RL§") || (currline.Substring(0, 3) == "RC§"))
        //                                {
        //                                    if (currline.Substring(0, 3) == "RL§")
        //                                    {
        //                                        string Data_Detail_1 = currline;
        //                                        string[] Data_Detail_1_Params = Data_Detail_1.Split(Detail_Separator);
        //                                        if (Data_Detail_1_Params.Length > 62)
        //                                        {
        //                                            int ConstantNum = 1;

        //                                            RELATIONSHIPNO = Data_Detail_1_Params[0 + 1];

        //                                            if (RELATIONSHIPNO != "999999999")
        //                                            {
        //                                                string RELOPENDATE       = Data_Detail_1_Params[3 + 1];
        //                                                if (RELOPENDATE.Length   == 8) RELOPENDATE = string.Format("{0}-{1}-{2}", RELOPENDATE.Substring(0, 2), RELOPENDATE.Substring(2, 2), RELOPENDATE.Substring(4, 4));
        //                                                string DATEOFBIRTH       = Data_Detail_1_Params[13 + 1];
        //                                                if (DATEOFBIRTH.Length   == 8) DATEOFBIRTH = string.Format("{0}-{1}-{2}", DATEOFBIRTH.Substring(0, 2), DATEOFBIRTH.Substring(2, 2), DATEOFBIRTH.Substring(4, 4));
        //                                                string DATEOFJOINING     = Data_Detail_1_Params[19 + 1];
        //                                                if (DATEOFJOINING.Length == 8) DATEOFJOINING = string.Format("{0}-{1}-{2}", DATEOFJOINING.Substring(0, 2), DATEOFJOINING.Substring(2, 2), DATEOFJOINING.Substring(4, 4));
        //                                                string ACOPENDATE        = Data_Detail_1_Params[64 + 1];
        //                                                if (ACOPENDATE.Length    == 8) ACOPENDATE = string.Format("{0}-{1}-{2}", ACOPENDATE.Substring(0, 2), ACOPENDATE.Substring(2, 2), ACOPENDATE.Substring(4, 4));

        //                                                tmp_StaticDet.Initialise_Details();

        //                                                tmp_StaticDet.RELATIONSHIPNO     = Data_Detail_1_Params[0 + 1];
        //                                                tmp_StaticDet.RELATIONSHIPTYPE   = Data_Detail_1_Params[1 + 1];
        //                                                tmp_StaticDet.ACTIVATEDDT        = Data_Detail_1_Params[2 + 1];
        //                                                //tmp_StaticDet.RELOPENDATE        = Data_Detail_1_Params[3+1];
        //                                                tmp_StaticDet.RELOPENDATE        = RELOPENDATE;
        //                                                tmp_StaticDet.RELSTATUS          = Data_Detail_1_Params[4 + 1];
        //                                                tmp_StaticDet.SEX                = Data_Detail_1_Params[5 + 1];
        //                                                tmp_StaticDet.SALUTATIONCODE     = Data_Detail_1_Params[6 + 1];
        //                                                tmp_StaticDet.FIRSTNAME          = Data_Detail_1_Params[7 + 1];
        //                                                tmp_StaticDet.MIDDLENAME         = Data_Detail_1_Params[8 + 1];
        //                                                tmp_StaticDet.LASTNAME           = Data_Detail_1_Params[9 + 1];
        //                                                tmp_StaticDet.FULLNAME           = Data_Detail_1_Params[10 + 1];
        //                                                tmp_StaticDet.MOTHERSMAIDENNAME  = Data_Detail_1_Params[11 + 1];
        //                                                tmp_StaticDet.BIRTHPLACE         = Data_Detail_1_Params[12 + 1];
        //                                                //tmp_StaticDet.DATEOFBIRTH = Data_Detail_1_Params[13 + 1];
        //                                                tmp_StaticDet.DATEOFBIRTH        = DATEOFBIRTH;
        //                                                tmp_StaticDet.NATIONALITYCODE    = Data_Detail_1_Params[14 + 1];
        //                                                tmp_StaticDet.RESIDENTCOUNTRY    = Data_Detail_1_Params[15 + 1];
        //                                                tmp_StaticDet.RESIDENTSTATUS     = Data_Detail_1_Params[16 + 1];
        //                                                tmp_StaticDet.EMPLOYERCODE       = Data_Detail_1_Params[17 + 1];
        //                                                tmp_StaticDet.DESIGNATIONCODE    = Data_Detail_1_Params[18 + 1];
        //                                                //tmp_StaticDet.DATEOFJOINING      = Data_Detail_1_Params[19+1];
        //                                                tmp_StaticDet.DATEOFJOINING      = DATEOFJOINING;
        //                                                tmp_StaticDet.SALARYDAY          = Data_Detail_1_Params[20 + 1];
        //                                                tmp_StaticDet.ORGANISATIONNAME   = Data_Detail_1_Params[21 + 1];
        //                                                tmp_StaticDet.NATUREOFBUSINESS   = Data_Detail_1_Params[22 + 1];
        //                                                tmp_StaticDet.GROSSMTHLYINCOME   = Data_Detail_1_Params[23 + 1];
        //                                                tmp_StaticDet.ANNUALINCOME       = Data_Detail_1_Params[24 + 1];
        //                                                tmp_StaticDet.UNIQUEID1          = Data_Detail_1_Params[25 + 1];
        //                                                tmp_StaticDet.UNIQUEID2          = Data_Detail_1_Params[26 + 1];
        //                                                tmp_StaticDet.ADDTYPECODE        = Data_Detail_1_Params[27 + 1];
        //                                                tmp_StaticDet.FLATNO             = Data_Detail_1_Params[28 + 1];
        //                                                tmp_StaticDet.BLDGNAME           = Data_Detail_1_Params[29 + 1];
        //                                                tmp_StaticDet.POSTBOX            = Data_Detail_1_Params[30 + 1];
        //                                                tmp_StaticDet.POSTALCODE         = Data_Detail_1_Params[31 + 1];
        //                                                tmp_StaticDet.CITYCODE           = Data_Detail_1_Params[32 + 1];
        //                                                tmp_StaticDet.COUNTRYCODE        = Data_Detail_1_Params[33 + 1];
        //                                                tmp_StaticDet.CITYNAME           = Data_Detail_1_Params[34 + 1];
        //                                                tmp_StaticDet.ADDTYPECODE_1      = Data_Detail_1_Params[35 + 1];
        //                                                tmp_StaticDet.FLATNO_1           = Data_Detail_1_Params[36 + 1];
        //                                                tmp_StaticDet.BLDGNAME_1         = Data_Detail_1_Params[37 + 1];
        //                                                tmp_StaticDet.POSTBOX_1          = Data_Detail_1_Params[38 + 1];
        //                                                tmp_StaticDet.POSTALCODE_1       = Data_Detail_1_Params[39 + 1];
        //                                                tmp_StaticDet.CITYCODE_1         = Data_Detail_1_Params[40 + 1];
        //                                                tmp_StaticDet.COUNTRYCODE_1      = Data_Detail_1_Params[41 + 1];
        //                                                tmp_StaticDet.CITYNAME_1         = Data_Detail_1_Params[42 + 1];
        //                                                tmp_StaticDet.ADDTYPECODE_2      = Data_Detail_1_Params[43 + 1];
        //                                                tmp_StaticDet.FLATNO_2           = Data_Detail_1_Params[44 + 1];
        //                                                tmp_StaticDet.BLDGNAME_2         = Data_Detail_1_Params[45 + 1];
        //                                                tmp_StaticDet.POSTBOX_2          = Data_Detail_1_Params[46 + 1];
        //                                                tmp_StaticDet.POSTALCODE_2       = Data_Detail_1_Params[47 + 1];
        //                                                tmp_StaticDet.CITYCODE_2         = Data_Detail_1_Params[48 + 1];
        //                                                tmp_StaticDet.COUNTRYCODE_2      = Data_Detail_1_Params[49 + 1];
        //                                                tmp_StaticDet.CITYNAME_2         = Data_Detail_1_Params[50 + 1];
        //                                                tmp_StaticDet.CONTACTTYPECODE    = Data_Detail_1_Params[51 + 1];
        //                                                tmp_StaticDet.CONTACT            = Data_Detail_1_Params[52 + 1];
        //                                                tmp_StaticDet.PRIMARYCONTACT     = Data_Detail_1_Params[53 + 1];
        //                                                tmp_StaticDet.CONTACTTYPECODE_1  = Data_Detail_1_Params[54 + 1];
        //                                                tmp_StaticDet.CONTACT_1          = Data_Detail_1_Params[55 + 1];
        //                                                tmp_StaticDet.PRIMARYCONTACT_1   = Data_Detail_1_Params[56 + 1];
        //                                                tmp_StaticDet.CONTACTDESCRIPTION = Data_Detail_1_Params[57 + 1];
        //                                                tmp_StaticDet.NUM_DIRECTORS      = Data_Detail_1_Params[58 + 1];
        //                                                tmp_StaticDet.NUM_SIGNATORIES    = Data_Detail_1_Params[59 + 1];
        //                                                tmp_StaticDet.MASTERNO           = Data_Detail_1_Params[60 + 1];
        //                                                tmp_StaticDet.PRIMARYFLAG        = Data_Detail_1_Params[61 + 1];
        //                                                tmp_StaticDet.ACCOUNTNO          = Data_Detail_1_Params[62 + 1];
        //                                                tmp_StaticDet.SHORTNAME          = Data_Detail_1_Params[63 + 1];
        //                                                // tmp_StaticDet.ACOPENDATE      = Data_Detail_1_Params[64+1];
        //                                                tmp_StaticDet.ACOPENDATE         = ACOPENDATE;
        //                                                tmp_StaticDet.ACCTCURRENTSTATUS  = Data_Detail_1_Params[65 + 1];
        //                                                tmp_StaticDet.ACCOUNTBRANCH      = Data_Detail_1_Params[66 + 1];
        //                                                tmp_StaticDet.ISICDESCRIPTION    = Data_Detail_1_Params[67 + 1];

        //                                                string SaveResponse = saveSCB_Static_Data(tmp_StaticDet, Curr_File);
        //                                            }
        //                                        }
        //                                    }
        //                                    if (RELATIONSHIPNO != "999999999")
        //                                    {
        //                                        if (currline.Substring(0, 3) == "RC§")
        //                                        {
        //                                            tmpDirSign.Initialise_Details();
        //                                            string Data_Detail_1          = currline;
        //                                            string[] Data_Detail_1_Params = Data_Detail_1.Split(Detail_Separator);
        //                                            if (Data_Detail_1_Params.Length > 3)
        //                                            {
        //                                                tmp_StaticDet.Initialise_Details();
        //                                                tmpDirSign.RLRELATIONSHIPNO   = RELATIONSHIPNO;
        //                                                tmpDirSign.PRINRELATIONSHIPNO = Data_Detail_1_Params[1];
        //                                                tmpDirSign.FIRSTNAME          = Data_Detail_1_Params[2];
        //                                                tmpDirSign.LASTNAME           = Data_Detail_1_Params[3];
        //                                                tmpDirSign.CORPORATETITLE     = Data_Detail_1_Params[4];

        //                                                string SaveResponse = saveSCB_DirectorSignature_Data(tmpDirSign, Curr_File);
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                        //log the file HAVING finished in File History Table
        //                        SQLStr = string.Format("UPDATE [tbl_FileHistory] SET importStage_C = '1' WHERE File_Name_C = '{0}' AND File_Source_C = '{1}'", Curr_File, "CTR_SCB");
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                        //if (localImportResponse.ImportStatus == "SUCCESS")
        //                        System.IO.File.Copy(FileName, Bck_Up_File_Name, overwrite: true);
        //                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Allow_File_Deletion)
        //                        {
        //                            System.IO.File.Delete(FileName);
        //                        }
        //                    }
        //                }
        //            }
        //         }
        //        catch (Exception ImportSCBEx)
        //        {
        //            string retErr = LogError(ImportSCBEx.GetHashCode().ToString(), "Import_SCB_Static_Data", ImportSCBEx, string.Format("{0} - {1}",Curr_File, LineNo.ToString()));
        //            return string.Format("FAILURE {0}", ImportSCBEx.StackTrace.ToString());
        //        }
        //        LogStep("Import_SCB_Static_Data", "Import_SCB_Static_Data  Step 1 - Main Exit");
        //    }
        //    return "Nothing";
        //}

        public string save_SCB_Trxn(Fin_Trn_Detail localFinDetail, string fileNme)
        {
            Hashtable Fin_Trxn_Hash = new Hashtable();
            string    Constr        = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
            try
            {
                if (localFinDetail.Business_Unit_Description        != "") Fin_Trxn_Hash.Add("Business_Unit_Description"       , localFinDetail.Business_Unit_Description);
                if (localFinDetail.Customer_Number                  != "") Fin_Trxn_Hash.Add("Customer_Number"                 , localFinDetail.Customer_Number);
                if (localFinDetail.Customer_First_Name              != "") Fin_Trxn_Hash.Add("Customer_First_Name"             , localFinDetail.Customer_First_Name);
                if (localFinDetail.Customer_Middle_Name             != "") Fin_Trxn_Hash.Add("Customer_Middle_Name"            , localFinDetail.Customer_Middle_Name);
                if (localFinDetail.Customer_Last_Name               != "") Fin_Trxn_Hash.Add("Customer_Last_Name"              , localFinDetail.Customer_Last_Name);
                if (localFinDetail.Title                            != "") Fin_Trxn_Hash.Add("Title"                           , localFinDetail.Title);
                if (localFinDetail.Gender                           != "") Fin_Trxn_Hash.Add("Gender"                          , localFinDetail.Gender);
                if (localFinDetail.Physical_Address_Line_1          != "") Fin_Trxn_Hash.Add("Physical_Address_Line_1"         , localFinDetail.Physical_Address_Line_1);
                if (localFinDetail.Physical_Address_Line_2          != "") Fin_Trxn_Hash.Add("Physical_Address_Line_2"         , localFinDetail.Physical_Address_Line_2);
                if (localFinDetail.Physical_Address_Line_3          != "") Fin_Trxn_Hash.Add("Physical_Address_Line_3"         , localFinDetail.Physical_Address_Line_3);
                if (localFinDetail.Physical_Postal_City             != "") Fin_Trxn_Hash.Add("Physical_Postal_City"            , localFinDetail.Physical_Postal_City);
                if (localFinDetail.Physical_Postal_Code             != "") Fin_Trxn_Hash.Add("Physical_Postal_Code"            , localFinDetail.Physical_Postal_Code);
                if (localFinDetail.Residential_Country_Code         != "") Fin_Trxn_Hash.Add("Residential_Country_Code"        , localFinDetail.Residential_Country_Code);
                if (localFinDetail.Account_Number                   != "") Fin_Trxn_Hash.Add("Account_Number"                  , localFinDetail.Account_Number);
                if (localFinDetail.Account_Name                     != "") Fin_Trxn_Hash.Add("Account_Name"                    , localFinDetail.Account_Name);
                if (localFinDetail.Scheme_Type                      != "") Fin_Trxn_Hash.Add("Scheme_Type"                     , localFinDetail.Scheme_Type);
                if (localFinDetail.Scheme_Code                      != "") Fin_Trxn_Hash.Add("Scheme_Code"                     , localFinDetail.Scheme_Code);
                if (localFinDetail.Scheme_Code_Description          != "") Fin_Trxn_Hash.Add("Scheme_Code_Description"         , localFinDetail.Scheme_Code_Description);
                if (localFinDetail.Transaction_Type_Code            != "") Fin_Trxn_Hash.Add("Transaction_Type_Code"           , localFinDetail.Transaction_Type_Code);
                if (localFinDetail.Transaction_Domicile_Branch_Code != "") Fin_Trxn_Hash.Add("Transaction_Domicile_Branch_Code", localFinDetail.Transaction_Domicile_Branch_Code);
                if (localFinDetail.Transaction_Domicile_Branch_Name != "") Fin_Trxn_Hash.Add("Transaction_Domicile_Branch_Name", localFinDetail.Transaction_Domicile_Branch_Name);
                if (localFinDetail.Transaction_Currency             != "") Fin_Trxn_Hash.Add("Transaction_Currency"            , localFinDetail.Transaction_Currency);
                if (localFinDetail.Transaction_Amount               != "") Fin_Trxn_Hash.Add("Transaction_Amount"              , localFinDetail.Transaction_Amount);
                if (localFinDetail.Transaction_Amount_LCY           != "") Fin_Trxn_Hash.Add("Transaction_Amount_LCY"          , localFinDetail.Transaction_Amount_LCY);
                if (localFinDetail.exchangeRate                     != "") Fin_Trxn_Hash.Add("RAT_Exchangerate"                , localFinDetail.exchangeRate);
                if (localFinDetail.Transaction_Detail               != "") Fin_Trxn_Hash.Add("Transaction_Detail"              , localFinDetail.Transaction_Detail);
                if (localFinDetail.Transaction_Narrative            != "") Fin_Trxn_Hash.Add("Transaction_Narrative"           , localFinDetail.Transaction_Narrative);
                if (localFinDetail.Transaction_Remark               != "") Fin_Trxn_Hash.Add("Transaction_Remark"              , localFinDetail.Transaction_Remark);
                if (localFinDetail.Teller_ID                        != "") Fin_Trxn_Hash.Add("Teller_ID"                       , localFinDetail.Teller_ID);
                if (localFinDetail.Teller                           != "") Fin_Trxn_Hash.Add("Teller"                          , localFinDetail.Teller);
                if (localFinDetail.NewBal                           != "") Fin_Trxn_Hash.Add("NewBal"                          , localFinDetail.NewBal);

                Fin_Trxn_Hash.Add("File_Name_C"     , fileNme);
                Fin_Trxn_Hash.Add("TrnDate"         , localFinDetail.TrnDate);
                Fin_Trxn_Hash.Add("Posted_B"        , "0");
                Fin_Trxn_Hash.Add("ImportTime"      , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                string InsertResulst = SqlHelper.insertSQL(Constr, "tbl_AML_FinTransaction", Fin_Trxn_Hash);
                return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }

        public string saveSCB_DirectorSignature_Data(SCB_DirectorSign_cls localSCB_DirSigning, string fileNme)
        {
            string Constr = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
            Hashtable Fin_Trxn_Hash = new Hashtable();
            try
            {
                if (localSCB_DirSigning.PRINRELATIONSHIPNO != "")
                {
                    if (localSCB_DirSigning.PRINRELATIONSHIPNO  != "") Fin_Trxn_Hash.Add("PRINRELATIONSHIPNO", localSCB_DirSigning.PRINRELATIONSHIPNO);
                    if (localSCB_DirSigning.FIRSTNAME           != "") Fin_Trxn_Hash.Add("FIRSTNAME", localSCB_DirSigning.FIRSTNAME);
                    if (localSCB_DirSigning.LASTNAME            != "") Fin_Trxn_Hash.Add("LASTNAME", localSCB_DirSigning.LASTNAME);
                    if (localSCB_DirSigning.CORPORATETITLE      != "") Fin_Trxn_Hash.Add("CORPORATETITLE", localSCB_DirSigning.CORPORATETITLE);

                    Fin_Trxn_Hash.Add("RLRELATIONSHIPNO",   localSCB_DirSigning.RLRELATIONSHIPNO);
                    Fin_Trxn_Hash.Add("File_Name_C",        fileNme);
                    Fin_Trxn_Hash.Add("Posted_B",           "0");
                    Fin_Trxn_Hash.Add("ImportTime",         string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                    Int16 AccCount = Convert.ToInt16(SqlHelper.GetTable(Constr, string.Format("SELECT TOP 1 PRINRELATIONSHIPNO FROM tbl_AML_DirectorSign  WITH (NOLOCK) WHERE PRINRELATIONSHIPNO = '{0}' AND RLRELATIONSHIPNO = '{1}'", localSCB_DirSigning.PRINRELATIONSHIPNO, localSCB_DirSigning.RLRELATIONSHIPNO)).Rows.Count);
                    if (AccCount == 0)
                    {
                        string InsertResulst = SqlHelper.insertSQL(Constr, "tbl_AML_DirectorSign", Fin_Trxn_Hash);
                    }
                    else
                    {
                        Hashtable WhereHash = new Hashtable();
                        WhereHash.Add("RLRELATIONSHIPNO",       localSCB_DirSigning.RLRELATIONSHIPNO);
                        WhereHash.Add("PRINRELATIONSHIPNO",     localSCB_DirSigning.PRINRELATIONSHIPNO);
                        SqlHelper.updateSQL(Constr, "tbl_AML_DirectorSign", Fin_Trxn_Hash, WhereHash);
                    }
                }
                return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }

        public string saveSCB_Static_Data(SCB_Static_Data_RL localSCB_StaticDetail, string fileNme)
        {
            Hashtable Fin_Trxn_Hash = new Hashtable();
            try
            {
                if (localSCB_StaticDetail.ACCOUNTNO != "")
                {
                    if (localSCB_StaticDetail.RELATIONSHIPNO     != "") Fin_Trxn_Hash.Add("RELATIONSHIPNO    ", localSCB_StaticDetail.RELATIONSHIPNO);
                    if (localSCB_StaticDetail.RELATIONSHIPTYPE   != "") Fin_Trxn_Hash.Add("RELATIONSHIPTYPE  ", localSCB_StaticDetail.RELATIONSHIPTYPE);
                    if (localSCB_StaticDetail.ACTIVATEDDT        != "") Fin_Trxn_Hash.Add("ACTIVATEDDT       ", localSCB_StaticDetail.ACTIVATEDDT);
                    if (localSCB_StaticDetail.RELOPENDATE        != "") Fin_Trxn_Hash.Add("RELOPENDATE       ", localSCB_StaticDetail.RELOPENDATE);
                    if (localSCB_StaticDetail.RELSTATUS          != "") Fin_Trxn_Hash.Add("RELSTATUS         ", localSCB_StaticDetail.RELSTATUS);
                    if (localSCB_StaticDetail.SEX                != "") Fin_Trxn_Hash.Add("SEX               ", localSCB_StaticDetail.SEX);
                    if (localSCB_StaticDetail.SALUTATIONCODE     != "") Fin_Trxn_Hash.Add("SALUTATIONCODE    ", localSCB_StaticDetail.SALUTATIONCODE);
                    if (localSCB_StaticDetail.FIRSTNAME          != "") Fin_Trxn_Hash.Add("FIRSTNAME         ", localSCB_StaticDetail.FIRSTNAME);
                    if (localSCB_StaticDetail.MIDDLENAME         != "") Fin_Trxn_Hash.Add("MIDDLENAME        ", localSCB_StaticDetail.MIDDLENAME);
                    if (localSCB_StaticDetail.LASTNAME           != "") Fin_Trxn_Hash.Add("LASTNAME          ", localSCB_StaticDetail.LASTNAME);
                    if (localSCB_StaticDetail.FULLNAME           != "") Fin_Trxn_Hash.Add("FULLNAME          ", localSCB_StaticDetail.FULLNAME);
                    if (localSCB_StaticDetail.MOTHERSMAIDENNAME  != "") Fin_Trxn_Hash.Add("MOTHERSMAIDENNAME ", localSCB_StaticDetail.MOTHERSMAIDENNAME);
                    if (localSCB_StaticDetail.BIRTHPLACE         != "") Fin_Trxn_Hash.Add("BIRTHPLACE        ", localSCB_StaticDetail.BIRTHPLACE);
                    if (localSCB_StaticDetail.DATEOFBIRTH        != "") Fin_Trxn_Hash.Add("DATEOFBIRTH       ", localSCB_StaticDetail.DATEOFBIRTH);
                    if (localSCB_StaticDetail.NATIONALITYCODE    != "") Fin_Trxn_Hash.Add("NATIONALITYCODE   ", localSCB_StaticDetail.NATIONALITYCODE);
                    if (localSCB_StaticDetail.RESIDENTCOUNTRY    != "") Fin_Trxn_Hash.Add("RESIDENTCOUNTRY   ", localSCB_StaticDetail.RESIDENTCOUNTRY);
                    if (localSCB_StaticDetail.RESIDENTSTATUS     != "") Fin_Trxn_Hash.Add("RESIDENTSTATUS    ", localSCB_StaticDetail.RESIDENTSTATUS);
                    if (localSCB_StaticDetail.EMPLOYERCODE       != "") Fin_Trxn_Hash.Add("EMPLOYERCODE      ", localSCB_StaticDetail.EMPLOYERCODE);
                    if (localSCB_StaticDetail.DESIGNATIONCODE    != "") Fin_Trxn_Hash.Add("DESIGNATIONCODE   ", localSCB_StaticDetail.DESIGNATIONCODE);
                    if (localSCB_StaticDetail.DATEOFJOINING      != "") Fin_Trxn_Hash.Add("DATEOFJOINING     ", localSCB_StaticDetail.DATEOFJOINING);
                    if (localSCB_StaticDetail.SALARYDAY          != "") Fin_Trxn_Hash.Add("SALARYDAY         ", localSCB_StaticDetail.SALARYDAY);
                    if (localSCB_StaticDetail.ORGANISATIONNAME   != "") Fin_Trxn_Hash.Add("ORGANISATIONNAME  ", localSCB_StaticDetail.ORGANISATIONNAME);
                    if (localSCB_StaticDetail.NATUREOFBUSINESS   != "") Fin_Trxn_Hash.Add("NATUREOFBUSINESS  ", localSCB_StaticDetail.NATUREOFBUSINESS);
                    if (localSCB_StaticDetail.GROSSMTHLYINCOME   != "") Fin_Trxn_Hash.Add("GROSSMTHLYINCOME  ", localSCB_StaticDetail.GROSSMTHLYINCOME);
                    if (localSCB_StaticDetail.ANNUALINCOME       != "") Fin_Trxn_Hash.Add("ANNUALINCOME      ", localSCB_StaticDetail.ANNUALINCOME);
                    if (localSCB_StaticDetail.UNIQUEID1          != "") Fin_Trxn_Hash.Add("UNIQUEID1         ", localSCB_StaticDetail.UNIQUEID1);
                    if (localSCB_StaticDetail.UNIQUEID2          != "") Fin_Trxn_Hash.Add("UNIQUEID2         ", localSCB_StaticDetail.UNIQUEID2);
                    if (localSCB_StaticDetail.ADDTYPECODE        != "") Fin_Trxn_Hash.Add("ADDTYPECODE       ", localSCB_StaticDetail.ADDTYPECODE);
                    if (localSCB_StaticDetail.FLATNO             != "") Fin_Trxn_Hash.Add("FLATNO            ", localSCB_StaticDetail.FLATNO);
                    if (localSCB_StaticDetail.BLDGNAME           != "") Fin_Trxn_Hash.Add("BLDGNAME          ", localSCB_StaticDetail.BLDGNAME);
                    if (localSCB_StaticDetail.POSTBOX            != "") Fin_Trxn_Hash.Add("POSTBOX           ", localSCB_StaticDetail.POSTBOX);
                    if (localSCB_StaticDetail.POSTALCODE         != "") Fin_Trxn_Hash.Add("POSTALCODE        ", localSCB_StaticDetail.POSTALCODE);
                    if (localSCB_StaticDetail.CITYCODE           != "") Fin_Trxn_Hash.Add("CITYCODE          ", localSCB_StaticDetail.CITYCODE);
                    if (localSCB_StaticDetail.COUNTRYCODE        != "") Fin_Trxn_Hash.Add("COUNTRYCODE       ", localSCB_StaticDetail.COUNTRYCODE);
                    if (localSCB_StaticDetail.CITYNAME           != "") Fin_Trxn_Hash.Add("CITYNAME          ", localSCB_StaticDetail.CITYNAME);
                    if (localSCB_StaticDetail.ADDTYPECODE_1      != "") Fin_Trxn_Hash.Add("ADDTYPECODE_1     ", localSCB_StaticDetail.ADDTYPECODE_1);
                    if (localSCB_StaticDetail.FLATNO_1           != "") Fin_Trxn_Hash.Add("FLATNO_1          ", localSCB_StaticDetail.FLATNO_1);
                    if (localSCB_StaticDetail.BLDGNAME_1         != "") Fin_Trxn_Hash.Add("BLDGNAME_1        ", localSCB_StaticDetail.BLDGNAME_1);
                    if (localSCB_StaticDetail.POSTBOX_1          != "") Fin_Trxn_Hash.Add("POSTBOX_1         ", localSCB_StaticDetail.POSTBOX_1);
                    if (localSCB_StaticDetail.POSTALCODE_1       != "") Fin_Trxn_Hash.Add("POSTALCODE_1      ", localSCB_StaticDetail.POSTALCODE_1);
                    if (localSCB_StaticDetail.CITYCODE_1         != "") Fin_Trxn_Hash.Add("CITYCODE_1        ", localSCB_StaticDetail.CITYCODE_1);
                    if (localSCB_StaticDetail.COUNTRYCODE_1      != "") Fin_Trxn_Hash.Add("COUNTRYCODE_1     ", localSCB_StaticDetail.COUNTRYCODE_1);
                    if (localSCB_StaticDetail.CITYNAME_1         != "") Fin_Trxn_Hash.Add("CITYNAME_1        ", localSCB_StaticDetail.CITYNAME_1);
                    if (localSCB_StaticDetail.ADDTYPECODE_2      != "") Fin_Trxn_Hash.Add("ADDTYPECODE_2     ", localSCB_StaticDetail.ADDTYPECODE_2);
                    if (localSCB_StaticDetail.FLATNO_2           != "") Fin_Trxn_Hash.Add("FLATNO_2          ", localSCB_StaticDetail.FLATNO_2);
                    if (localSCB_StaticDetail.BLDGNAME_2         != "") Fin_Trxn_Hash.Add("BLDGNAME_2        ", localSCB_StaticDetail.BLDGNAME_2);
                    if (localSCB_StaticDetail.POSTBOX_2          != "") Fin_Trxn_Hash.Add("POSTBOX_2         ", localSCB_StaticDetail.POSTBOX_2);
                    if (localSCB_StaticDetail.POSTALCODE_2       != "") Fin_Trxn_Hash.Add("POSTALCODE_2      ", localSCB_StaticDetail.POSTALCODE_2);
                    if (localSCB_StaticDetail.CITYCODE_2         != "") Fin_Trxn_Hash.Add("CITYCODE_2        ", localSCB_StaticDetail.CITYCODE_2);
                    if (localSCB_StaticDetail.COUNTRYCODE_2      != "") Fin_Trxn_Hash.Add("COUNTRYCODE_2     ", localSCB_StaticDetail.COUNTRYCODE_2);
                    if (localSCB_StaticDetail.CITYNAME_2         != "") Fin_Trxn_Hash.Add("CITYNAME_2        ", localSCB_StaticDetail.CITYNAME_2);
                    if (localSCB_StaticDetail.CONTACTTYPECODE    != "") Fin_Trxn_Hash.Add("CONTACTTYPECODE   ", localSCB_StaticDetail.CONTACTTYPECODE);
                    if (localSCB_StaticDetail.CONTACT            != "") Fin_Trxn_Hash.Add("CONTACT           ", localSCB_StaticDetail.CONTACT);
                    if (localSCB_StaticDetail.PRIMARYCONTACT     != "") Fin_Trxn_Hash.Add("PRIMARYCONTACT    ", localSCB_StaticDetail.PRIMARYCONTACT);
                    if (localSCB_StaticDetail.CONTACTTYPECODE_1  != "") Fin_Trxn_Hash.Add("CONTACTTYPECODE_1 ", localSCB_StaticDetail.CONTACTTYPECODE_1);
                    if (localSCB_StaticDetail.CONTACT_1          != "") Fin_Trxn_Hash.Add("CONTACT_1         ", localSCB_StaticDetail.CONTACT_1);
                    if (localSCB_StaticDetail.PRIMARYCONTACT_1   != "") Fin_Trxn_Hash.Add("PRIMARYCONTACT_1  ", localSCB_StaticDetail.PRIMARYCONTACT_1);
                    if (localSCB_StaticDetail.CONTACTDESCRIPTION != "") Fin_Trxn_Hash.Add("CONTACTDESCRIPTION", localSCB_StaticDetail.CONTACTDESCRIPTION);
                    if (localSCB_StaticDetail.NUM_DIRECTORS      != "") Fin_Trxn_Hash.Add("NUM_DIRECTORS     ", localSCB_StaticDetail.NUM_DIRECTORS);
                    if (localSCB_StaticDetail.NUM_SIGNATORIES    != "") Fin_Trxn_Hash.Add("NUM_SIGNATORIES   ", localSCB_StaticDetail.NUM_SIGNATORIES);
                    if (localSCB_StaticDetail.MASTERNO           != "") Fin_Trxn_Hash.Add("MASTERNO          ", localSCB_StaticDetail.MASTERNO);
                    if (localSCB_StaticDetail.PRIMARYFLAG        != "") Fin_Trxn_Hash.Add("PRIMARYFLAG       ", localSCB_StaticDetail.PRIMARYFLAG);
                    if (localSCB_StaticDetail.ACCOUNTNO          != "") Fin_Trxn_Hash.Add("ACCOUNTNO         ", localSCB_StaticDetail.ACCOUNTNO);
                    if (localSCB_StaticDetail.SHORTNAME          != "") Fin_Trxn_Hash.Add("SHORTNAME         ", localSCB_StaticDetail.SHORTNAME);
                    if (localSCB_StaticDetail.ACOPENDATE         != "") Fin_Trxn_Hash.Add("ACOPENDATE        ", localSCB_StaticDetail.ACOPENDATE);
                    if (localSCB_StaticDetail.ACCTCURRENTSTATUS  != "") Fin_Trxn_Hash.Add("ACCTCURRENTSTATUS ", localSCB_StaticDetail.ACCTCURRENTSTATUS);
                    if (localSCB_StaticDetail.ACCOUNTBRANCH      != "") Fin_Trxn_Hash.Add("ACCOUNTBRANCH     ", localSCB_StaticDetail.ACCOUNTBRANCH);
                    if (localSCB_StaticDetail.ISICDESCRIPTION    != "") Fin_Trxn_Hash.Add("ISICDESCRIPTION   ", localSCB_StaticDetail.ISICDESCRIPTION);

                    Fin_Trxn_Hash.Add("File_Name_C", fileNme);
                    Fin_Trxn_Hash.Add("Posted_B", "0");
                    Fin_Trxn_Hash.Add("ImportTime", string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                    Int16 AccCount = Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("SELECT TOP 1 ACCOUNTNO FROM Tbl_AML_Static_Staging  WITH (NOLOCK) WHERE ACCOUNTNO = '{0}'", localSCB_StaticDetail.ACCOUNTNO)).Rows.Count);
                    if (AccCount == 0)
                    {
                        string InsertResulst = SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "tbl_AML_Static_Staging", Fin_Trxn_Hash);
                    }
                    else
                    {
                        Hashtable WhereHash = new Hashtable();
                        WhereHash.Add("ACCOUNTNO", localSCB_StaticDetail.ACCOUNTNO);
                        SqlHelper.updateSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "tbl_AML_Static_Staging", Fin_Trxn_Hash, WhereHash);
                    }
                }
                // m_databaseClass.insertSQL("tbl_AML_Static", Fin_Trxn_Hash);
                return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }
    
        //public void CreateAML_File_CTR_SCB()
        //{
        //    string transactionnumber = "";
        //    try
        //    {             
        //    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Create_SCB_CTR == false)
        //    {
        //        LogStep("CreateAML_File_CTR_SCB Step 0", "CreateAML_File_CTR_SCB disabled");
        //        return;
        //    }
        //        // This Creates the Central Bank AML File
        //        LogStep("CreateAML_File_CTR_SCB Step 1", "CreateAML_File_CTR_SCB Main Entry");
        //        DataTable Data_Table    = new DataTable();
        //        DataTable Data_Rec      = new DataTable();
        //        DataTable Temp_Rec      = new DataTable();
        //        DataTable Curr_Rec      = new DataTable();
        //        DataTable Sig_Rec       = new DataTable();
        //        DataTable SysRec        = new DataTable();
        //        string    Str_TrnAmnt   = "0.00";
        //        string    AML_Product   = "CTR_SCB";

        //        string    Out_Dir       = "";
        //        decimal   Curr_Run_No   =0 ;
        //        string    Out_File_Name = "";
        //        string    Instance_Name;
        //        bool      CreateTestXML = false;
        //        string    Curr_License  = "";
        //        string    Svr_Lic_Date  = "";
        //        DateTime  Bnk_RunDate   = default(DateTime);
        //        DateTime  AsAtDate      = default(DateTime);
        //        int       Days_Difference;
        //        string    Bank_ID       = "";

        //        int       Lic_Response_Code = 0;
        //        bool      Econet_Integrated = false;
        //        bool      LCs_Integrated    = false;

        //        bool      Finacle_Live      = true;
        //        string    Trn_GUID          = "";
        //        var       Transaction_Str   = "";
        //        string    from_account_str  = "";

        //        StringWriter objStreamWriter = new StringWriter();
        //        string Temp_goAMLXML  = "";
        //        string XML_Header_Str = "";
        //        XmlSerializer x = default(XmlSerializer);
        //        string[] Transaction_Parms     = null;
        //        int      Transaction_Parms_Len = 0;
        //        string   SQLStr   = "";
        //        string   SQL_Str  = "";
        //        string   tempVar  = "";

        //        report goAML_Report = new report();
        //        //Dim ttt As goAML_Report.
        //        reportTransaction             goAML_Transaction     = new reportTransaction();
        //        reportTransactionLate_deposit goAML_LateDeposit     = new reportTransactionLate_deposit();
        //        conduction_type               goAML_conduction_type = new conduction_type();
        //        goAML_LateDeposit.Value                             = false;
        //        List<reportTransaction>       goAML_TransactionList = new List<reportTransaction>();

        //        t_person_my_client goAML_MyClient  = new t_person_my_client();
        //        funds_type         from_funds_code = new funds_type();
        //        t_account          t_account       = new t_account();
        //        trans_item_type    t_trans_item    = new trans_item_type();
        //        t_trans_item                       = trans_item_type.E;

        //        Int32 rentity_id      =   Int32.Parse("13");
        //        string rentity_branch = "HeadOffice";

        //        submission_type submission_code = new submission_type();
        //        submission_code = submission_type.E;

        //        report_type report_code = new report_type();
        //        report_code = report_type.CTR;

        //        from_funds_code = funds_type.D;
        //        string InstitutionName = "";

        //        string        entity_reference    = string.Format("SBIC{0:yyyyMMdd_HHMMsss}", DateTime.Now);
        //        string        fiu_ref_number      = "";
        //        DateTime      submission_date     = DateTime.Parse(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
        //        currency_type currency_code_local = new currency_type();
        //        currency_code_local               = currency_type.USD;


        //        t_person_registration_in_report reporting_person_email_C = new t_person_registration_in_report();
        //        t_person_registration_in_report reporting_person = new t_person_registration_in_report();
        //        reporting_person.first_name  = "Tendai";
        //        reporting_person.middle_name = "T";
        //        reporting_person.last_name   = "Rwodzi";
        //        reporting_person.title       = "Mrs";
        //        //reporting_person.email = "rwodzit@stanbic.com";


        //        string Imported_File   = "";
        //        int File_Name_Length   = System.Convert.ToInt32(" 0");
        //        bool All_Imported      = false;
        //        string Processing_ID   = "";
        //        string Processing_Time = "";
        //        double MinBatch_ID     = 0;
        //        double MaxBatch_ID     = 0;

        //        t_address location    = new t_address();
        //        location.address      = "15 Samora Macheal Avenue";
        //        location.address_type = contact_type.Item;
        //        location.city         = "Harare";
        //        location.state        = "Harare";
        //        location.country_code = country_type.ZW;

        //        //  Add all the other user details
        //        SysRec = new DataTable();
        //        SQLStr = "SELECT *, (SELECT TOP 1 Parameter_Value FROM tbl_System_Parameters WITH (NOLOCK) WHERE Bank_ID = 'SCB' AND Parameter_ID = 'AML_INSTITUTION_NAME') INSTITUTION_NAME FROM tbl_CTR_STR_Reporting_Person RPerson WITH (NOLOCK) WHERE Rpt_Inst_ID = 'STR' AND Bank_ID = 'SCB'";
        //        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //        if (SysRec.Rows.Count > 0)
        //        {
        //            foreach (DataRow Sys_Row in SysRec.Rows)
        //            {
        //                InstitutionName                = System.Convert.ToString(Sys_Row["INSTITUTION_NAME"].ToString());
        //                entity_reference               = string.Format("{1}{0:yyyyMMdd_HHMMsss}", DateTime.Now , Sys_Row["entity_reference"].ToString());
        //                fiu_ref_number                 = System.Convert.ToString(Sys_Row["fiu_ref_number"].ToString()); //  // = "SBICZWHX";
        //                rentity_id                     = System.Convert.ToInt32(Convert.ToInt16(Sys_Row["rentity_id"].ToString())); //  // = 13;
        //                reporting_person.first_name    = Sys_Row["first_name"].ToString();
        //                reporting_person.middle_name   = Sys_Row["middle_name"].ToString();
        //                reporting_person.last_name     = Sys_Row["last_name"].ToString();
        //                reporting_person.title         = Sys_Row["title"].ToString();

        //                reporting_person.birthdate       = Convert.ToDateTime( string.Format("{0:yyyy-MM-dd}",  Convert.ToDateTime(Sys_Row["Rpt_birthdate"])));
        //                reporting_person.birth_place     = Utilities.Remove_XML_SpecialCharacters(Sys_Row["Rpt_birth_place"].ToString());
        //                reporting_person.mothers_name    = Utilities.Remove_XML_SpecialCharacters(Sys_Row["Rpt_mothers_name"].ToString());
        //                reporting_person.alias           = Sys_Row["Rpt_alias"].ToString();
        //                reporting_person.ssn             = Sys_Row["Rpt_ssn"].ToString().Trim();
        //                //reporting_person.passport_number = Sys_Row["Rpt_passport_number"].ToString().Trim();
        //                reporting_person.id_number       = Sys_Row["Rpt_id_number"].ToString().Trim();
        //                reporting_person.email           = new []{ Sys_Row["email_c"].ToString().Trim()};
        //                //reporting_person.email           = (reporting_person.email())(Enum.Parse(typeof(reporting_person.email), Sys_Row["email_c"].ToString().Trim())); ;
       
        //                //(country_type)(Enum.Parse(typeof(country_type), nationality_1C));
        //                //(country_type)(Enum.Parse(typeof(country_type), nationality_1C));

        //                string nationality_1C                  = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Sys_Row["Rpt_nationality1"].ToString().Trim()));
        //                reporting_person.nationality1          = (country_type)(Enum.Parse(typeof(country_type), nationality_1C));
        //                reporting_person.nationality1Specified = true;

        //                string nationality_2C                  = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Sys_Row["Rpt_nationality1"].ToString().Trim()));
        //                reporting_person.nationality2          = (country_type)(Enum.Parse(typeof(country_type), nationality_2C));
        //                reporting_person.nationality2Specified = true;

        //                string nationality_3C                  = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Sys_Row["Rpt_nationality3"].ToString().Trim()));
        //                reporting_person.nationality3          = (country_type)(Enum.Parse(typeof(country_type), nationality_3C));
        //                reporting_person.nationality3Specified = true;

        //                string residence_C                     = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Sys_Row["Rpt_residence"].ToString().Trim()));
        //                reporting_person.residence             = (country_type)(Enum.Parse(typeof(country_type), residence_C));
        //                reporting_person.residenceSpecified    = true;

        //                t_person_registration_in_reportPhones    ReportPerson_Phone        = new t_person_registration_in_reportPhones();
        //                t_person_registration_in_reportAddresses ReportingPerson_Addresses = new t_person_registration_in_reportAddresses();

        //                t_phone                         reporting_person_phones = new t_phone();
        //                t_entityPhones                  reporting_person_phone  = new t_entityPhones();
        //                t_person_registration_in_report reporting_person_email  = new t_person_registration_in_report();

        //                location.address = Utilities.Remove_XML_SpecialCharacters(Sys_Row["ADDRESS_C"].ToString().Trim());

        //                //Dim tph_contact_type_C As String = Sys_Row["tph_contact_type").ToString.Trim()
        //                //reporting_person_phonestph_contact_type = [Enum].Parse(contact_type.Item.GetType, tph_contact_type_C)

        //                //reporting_person_phones.tph_communication_type = Sys_Row["tph_communication_type").ToString.Trim()
        //                //reporting_person_phones.tph_country_prefix = Sys_Row["tph_country_prefix").ToString.Trim()
        //                //reporting_person_phones.tph_number = Sys_Row["tph_number").ToString.Trim()
        //                //reporting_person_phones.tph_extension = Sys_Row["tph_extension").ToString.Trim()
        //                //reporting_person_phones.comments = Sys_Row["comments").ToString.Trim()

        //                //reporting_person_phone.phone = [Enum].Parse(communication_type.P.GetType, reporting_person_phones.tph_communication_type)
        //                reporting_person.phones    = ReportPerson_Phone;
        //                reporting_person.addresses = ReportingPerson_Addresses;
        //                //reporting_person.email = Sys_Row["reporting_person_email").ToString
        //            }
        //        }

        //        //reporting_person_phone.phone = reporting_person_phones()
        //        //reporting_person.phones = reporting_person_phone.
        //        //reporting_person.phones = reporting_person_phone.phone
        //        //reporting_person.email = reporting_person_email.email

        //        string reason = "";
        //        string action = "";

        //        goAML_Report.rentity_id          = rentity_id;
        //        goAML_Report.rentity_branch      = rentity_branch;
        //        goAML_Report.submission_code     = submission_code;
        //        goAML_Report.report_code         = report_code;
        //        goAML_Report.entity_reference    = entity_reference;
        //        goAML_Report.fiu_ref_number      = fiu_ref_number;
        //        goAML_Report.submission_date     = submission_date;
        //        goAML_Report.currency_code_local = currency_code_local;
        //        goAML_Report.reporting_person    = reporting_person;
        //        goAML_Report.location            = location;
        //        goAML_Report.reason              = reason;
        //        goAML_Report.action              = action;

        //        x = new XmlSerializer(goAML_Report.GetType());
        //        x.Serialize(objStreamWriter, goAML_Report);
        //        Temp_goAMLXML  = System.Convert.ToString(objStreamWriter.ToString());
        //        XML_Header_Str = Temp_goAMLXML;

        //        Tag_Separator.SetValue("<rentity_id>", 0);
        //        Transaction_Parms     = XML_Header_Str.Split(Tag_Separator, StringSplitOptions.None);
        //        Transaction_Parms_Len = Transaction_Parms.Length;
        //        if (Transaction_Parms_Len > 1)
        //        {
        //            XML_Header_Str = string.Format("{0}{3}{1}{2}{3}", "<report>", "<rentity_id>", Transaction_Parms[1], Environment.NewLine);
        //        }

        //        string   internal_ref_number     = "";
        //        string   transaction_location    = "";
        //        string   transaction_description = "";
        //        DateTime date_transaction        = DateTime.Now;
        //        string   teller                  = "";
        //        string   authorized              = "";
        //        reportTransactionLate_deposit late_deposit;
        //        DateTime        date_posting   = DateTime.Now;
        //        DateTime        value_date     = DateTime.Now;
        //        conduction_type transmode_code = new conduction_type();
        //        string  transmode_comment    = "";
        //        decimal amount_local         = 0;
        //        string  Curr_Code            = "";
        //        string  CTR_STR_ReportDay    = "";
        //        string  CurrentDayOfWeek     = "";
        //        string  DaytoRun             = DateTime.Now.ToString("ddd", new CultureInfo("de-DE"));
        //        string  DaysToReport         = "7";
        //        bool    Manual_CTR_Run_YN    = false;
        //        string  Manual_CTR_StartDate = "";
        //        string  Manual_CTR_EndDate   = "";


        //        string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", AML_Product,e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_SCBCTR);
        //        string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
        //        if (Thread_Busy == "OK FOR POSTING")
        //        {
        //            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", AML_Product));

        //            //  Clear Old Records in the database and Prepare New records for Reporting
        //            SQLStr = "[dbo].[ustp_Insert_AML_CTR_Reporting_Records_SCB]";
        //            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //            SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
        //            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //            if (SysRec.Rows.Count > 0)
        //            {
        //                foreach (DataRow Sys_Row in SysRec.Rows)
        //                {
        //                    Instance_Name         = System.Convert.ToString(Sys_Row["Instance_Name_C"].ToString().Trim());
        //                    Econet_Integrated     = bool.Parse(Sys_Row["EcoCash_Interface_YN_B"].ToString());
        //                    LCs_Integrated        = bool.Parse(Sys_Row["LC_Enabled_YN"].ToString());
        //                    Finacle_Live          = bool.Parse(Sys_Row["Finacle_Live"].ToString());
        //                    CreateTestXML         = bool.Parse(Sys_Row["Create_TestXML_YN_B"].ToString());
        //                    Curr_License          = Sys_Row["License_Code_C"].ToString().Trim();
        //                    Out_Dir               = Sys_Row["Out_Dir_CTR_STR"].ToString().Trim();
        //                    Svr_Lic_Date          = System.Convert.ToString(Sys_Row["Svr_Lic_Date"].ToString().Trim());
        //                    CTR_STR_ReportDay     = Sys_Row["CTR_STR_ReportDay"].ToString().ToUpper();
        //                    DaysToReport          = System.Convert.ToString(Sys_Row["CTR_STR_NumberOfDaysToReport"].ToString().Trim());
        //                    Manual_CTR_Run_YN     = bool.Parse(Sys_Row["Manual_CTR_Run_YN"].ToString());
        //                    Manual_CTR_StartDate  = string.Format("{0:yyyy-MM-dd}", DateTime.Parse(Sys_Row["Manual_CTR_StartDate"].ToString())).ToString();
        //                    Manual_CTR_EndDate    = string.Format("{0:yyyy-MM-dd}", DateTime.Parse(Sys_Row["Manual_CTR_EndDate"].ToString())).ToString();
        //                }
        //            }
        //            //Check_License
        //            //Lic_Response_Code = System.Convert.ToInt32(Check_License(Curr_License, 64, "VFY", Svr_Lic_Date));
        //            //if (Lic_Response_Code != 0)
        //            //{
        //            //    //XML_Timer.Stop();
        //            //    //Interaction.MsgBox("Current System License is either Invalid or has expired - Code (" + Lic_Response_Code.ToString() + ")." + Constants.vbCr + "Please Contact Select Technologies for a New License.", (int)MsgBoxStyle.OkOnly + MsgBoxStyle.Critical, "e-Verify License");

        //            //    return;
        //            //}

        //            // Check if we did not generate the file for today

        //            SQLStr = "SELECT TOP 1 File_Name_C, LEN(File_Name_C) AS File_Name_Length FROM tbl_FileHistory WITH (NOLOCK) WHERE File_Name_C like '%ZW_TrxData_%' AND Exported_B = 0 AND importStage_C = 2 AND File_Source_C = 'CTR_SCB' ORDER BY File_Inst_No ASC";
        //            SysRec = new DataTable();
        //            SysRec =  SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //            if (SysRec.Rows.Count > 0)
        //            {
        //                foreach (DataRow Sys_Row in SysRec.Rows)
        //                {
        //                    Imported_File    = Sys_Row["File_Name_C"].ToString().Trim();
        //                    File_Name_Length = int.Parse(Sys_Row["File_Name_Length"].ToString());
        //                    SQLStr           = string.Format("SELECT COUNT(*) as Trn_Recs FROM tbl_AML_FinTransaction_ALL WHERE Posted_B = 0 AND Processing_ID IS NULL AND  ISDATE(TRH_Post_Date) = 1 AND RIGHT(File_Name_C,{1}) = '{0}'", Imported_File, File_Name_Length);
        //                    if (Convert.ToDouble(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0]["Trn_Recs"].ToString()) == 0)
        //                    {
        //                        SQLStr        = string.Format("UPDATE tbl_FileHistory set Exported_B = 1 WHERE File_Name_C = '{0}' AND File_Source_C = 'CTR_SCB'", Imported_File);
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                        Imported_File = "";
        //                    }
        //                }
        //            }

        //            if (string.IsNullOrEmpty(Imported_File))
        //            {
        //                SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", AML_Product);
        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                return;
        //            }

        //            SQL_Str = string.Format("[dbo].[ustp_getCTR_Batch_SCB] @HistFileName = '{0}',  @FileLength = '{1}'", Imported_File, File_Name_Length);
        //            SysRec = new DataTable();
        //            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str);
        //            if (SysRec.Rows.Count > 0)
        //            {
        //                foreach (DataRow Sys_Row in SysRec.Rows)
        //                {
        //                    if (IsDate(Sys_Row["TrnDate"].ToString()))
        //                    {
        //                        Imported_File    = Sys_Row["File_Name_C"].ToString();
        //                        Bnk_RunDate      = DateTime.Parse(Sys_Row["TrnDate"].ToString());
        //                        AsAtDate         = DateTime.Parse(Sys_Row["TrnDate"].ToString());
        //                        All_Imported     = (Sys_Row["AllPosted"].ToString().Trim() == "1") ? true : false;
        //                        Processing_ID    = Sys_Row["Batch_ID_Num"].ToString();
        //                        Processing_Time  = Sys_Row["ThisBatchTime"].ToString();
        //                        MinBatch_ID      = System.Convert.ToDouble(double.Parse(Sys_Row["Min_Inst"].ToString()));
        //                        MaxBatch_ID      = System.Convert.ToDouble(double.Parse(Sys_Row["Max_Inst"].ToString()));
        //                        Days_Difference  = 0;
        //                        CurrentDayOfWeek = System.Convert.ToString(AsAtDate.ToString("ddd", CultureInfo.InvariantCulture).ToUpper());
        //                    }
        //                }
        //                // Mark the Batch
                        
        //                Out_File_Name = string.Format("{0}\\{2}_{3:yyyyMMdd}{4:HHmmsss}_{1}.xml", Out_Dir, decimal.Round(Curr_Run_No,0), AML_Product, Bnk_RunDate, DateTime.Now);
        //                SQLStr = string.Format("UPDATE tbl_AML_FinTransaction_ALL SET Processing_ID = '{0}', Processing_Time = '{1}', OutPutFileName_C = '{2}' WHERE TRH_ID >= {3} AND TRH_ID <= {4}", Processing_ID, Processing_Time, Out_File_Name, MinBatch_ID, MaxBatch_ID);
        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //            }

        //            //Dim DaysRun As Integer = CInt(TrxnDB.getDataSet(String.Format("Select count(*) as RunDays from [tbl_CTR_STR_Days] WHERE CONVERT(VARCHAR(10),[CTR_STR_Sys_Date_D],25) = '{0:yyyy-MM-dd}'", Bnk_RunDate)).Tables(0).Rows(0).Item(0).ToString)
        //            ///If (((DaysRun = 0) And (Bnk_RunDate = AsAtDate) And (CurrentDayOfWeek = CTR_STR_ReportDay)) Or (Manual_CTR_Run_YN)) Or (Finacle_Live) Then
        //            if (MaxBatch_ID > MinBatch_ID)
        //            {
        //                string Trn_Desc_Dr = "";

        //                if (Finacle_Live)
        //                {
        //                    //If Manual_CTR_Run_YN Then
        //                    //    SQLStr = String.Format("SELECT *,CONVERT(VARCHAR(10),CONVERT(DATETIME,TRH_POST_Date),25) FROM vw_GoAML_Transaction_Fin WHERE TRH_TR_Type_C in ('3','4','03','04') AND CONVERT(VARCHAR(10),CONVERT(DATETIME,TRH_POST_Date),25) >= '{0}' AND CONVERT(VARCHAR(10),CONVERT(DATETIME,TRH_POST_Date),25) <= '{1}' ORDER by TRH_ID DESC", Manual_CTR_StartDate, Manual_CTR_EndDate)
        //                    //Else
        //                    //    'SQLStr = String.Format("SELECT * FROM tbl_AML_FinTransaction_ALL WHERE TRH_TR_Type_C in ('03','04','3','4') AND CONVERT(VARCHAR(10),CONVERT(DATETIME,TRH_POST_Date),25) > DATEADD(dd,-{1},'{0:yyyy-MM-dd}') ORDER by TRH_ID DESC", CDate(Bnk_RunDate), DaysToReport)
        //                    //End If
        //                    SQLStr   = string.Format("SELECT * FROM tbl_AML_FinTransaction_ALL WHERE TRH_ID >= {0} AND TRH_ID <= {1}", MinBatch_ID, MaxBatch_ID);
        //                    Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                }
        //                else
        //                {
        //                    if (Manual_CTR_Run_YN)
        //                    {
        //                        SQLStr = string.Format("SELECT * FROM tbl_AML_FinTransaction_ALL WHERE TRH_TR_Type_C in ('03','04') AND CONVERT(VARCHAR(10),TRH_POST_Date,25) >= '{0}' AND CONVERT(VARCHAR(10),TRH_POST_Date,25) <= '{1}' ORDER by TRH_ID DESC", Manual_CTR_StartDate, Manual_CTR_EndDate);
        //                    }
        //                    else
        //                    {
        //                        SQLStr = string.Format("SELECT * FROM tbl_AML_FinTransaction_ALL WHERE TRH_TR_Type_C in ('03','04') AND CONVERT(VARCHAR(10),TRH_POST_Date,25) > DATEADD(dd,-{1},'{0:yyyy-MM-dd}') ORDER by TRH_ID DESC", Bnk_RunDate, DaysToReport);
        //                    }
        //                    Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                }

        //                if (Curr_Rec.Rows.Count > 0)
        //                {
        //                    foreach (DataRow Row1 in Curr_Rec.Rows)
        //                    {
                                
        //                        transactionnumber       = Row1["TRH_ID"].ToString().Trim();
        //                        internal_ref_number     = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Row1["TRH_Reference"].ToString().Trim()));
        //                        transaction_location    = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Row1["TRH_User_ID"].ToString().Trim()));
        //                        transaction_description = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(string.Format("{0}{1}{2}{3}", (string.IsNullOrEmpty(Row1["TRH_TR_Desc"].ToString())) ? "" : Row1["TRH_TR_Desc"].ToString().Trim(), (string.IsNullOrEmpty(Row1["TRH_Narr_1"].ToString())) ? "" : Row1["TRH_Narr_1"].ToString().Trim(), (string.IsNullOrEmpty(Row1["TRH_Narr_1"].ToString())) ? "" : Row1["TRH_Narr_1"].ToString().Trim(), (string.IsNullOrEmpty(Row1["TRH_Narr_2"].ToString())) ? "" : Row1["TRH_Narr_3"].ToString().Trim())));
        //                        date_transaction        = DateTime.Parse(string.Format("{0:yyyy-MM-dd}", (System.Convert.ToDateTime(Row1["TRH_Post_Date"])).ToString()));
        //                        teller                  = System.Convert.ToString(Utilities.Remove_XML_SpecialCharacters(Row1["TRH_User_ID"].ToString().Trim()));
        //                        authorized              = Row1["TRH_User_ID"].ToString().Trim();
        //                        late_deposit            = goAML_LateDeposit;
        //                        date_posting            = DateTime.Parse(string.Format("{0:yyyy-MM-dd}", Row1["TRH_Post_Date"]).ToString());
        //                        value_date              = DateTime.Parse(string.Format("{0:yyyy-MM-dd}", Row1["TRH_Value_Date"]).ToString());

        //                        transmode_code          = (conduction_type)(Enum.Parse(typeof(conduction_type), Row1["TRH_TR_Type_C"].ToString().Trim()));
        //                        //transmode_code        = System.Convert.ToString(Enum.Parse(conduction_type.E.GetType, Row1["TRH_TR_Type_C"].ToString().Trim()));
        //                        //transmode_code = "E"
        //                        transmode_comment       = "";
        //                        //If Row1["Trn_Source"].ToString.Trim = "INDIVIDUAL" Then
        //                        //    amount_local = Val(CStr(Format(Abs(Val(Row1["TRH_TR_Amt"].ToString)), "####0.00"]))
        //                        //Else
        //                        tempVar                 = Row1["Based_Amnt"].ToString().Trim().Replace("-", "");
        //                        amount_local            = Convert.ToDecimal(tempVar);
        //                        //End If
        //                        Curr_Code               = Row1["CUR_Short_Desc"].ToString().Trim();

        //                        from_funds_code         = funds_type.A;
        //                        t_account               = new t_account();
        //                        t_account.account       = Row1["AccountNo"].ToString().Trim();
        //                        t_account.account_name  = Utilities.Remove_XML_SpecialCharacters(Row1["DTL_Desc"].ToString().Trim());
        //                        tempVar                 = Row1["TRH_New_Bal"].ToString().Trim().Replace("-", "");
        //                        t_account.balance       = Convert.ToDecimal(tempVar);
        //                        t_account.branch        = Row1["DTL_Branch_N"].ToString().Trim();
        //                        t_account.currency_code = (currency_type)(Enum.Parse(typeof(currency_type), Row1["TRH_TR_Type_C"].ToString().Trim()));
        //                        t_account.client_number = Row1["AccountNo"].ToString().Trim();
        //                        t_account.date_balance  = Convert.ToDateTime(string.Format("{0:yyyy-MM-dd}T00:00:00", System.Convert.ToDateTime(Row1["TRH_Post_Date"].ToString())));

        //                        from_account_str = "";
        //                        //from_account_str += String.Format(" <transmode_code>{1}</transmode_code>{0}", Environment.NewLine, "E")
        //                        //from_account_str += String.Format(" <transmode_comment></transmode_comment>{0}", Environment.NewLine, "E")
        //                        from_account_str += string.Format(" <t_from_my_client>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 		    <from_funds_code>K</from_funds_code>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 			<from_funds_comment>{1}</from_funds_comment>{0}", Environment.NewLine, Row1["TRH_Narr_1"].ToString().Trim());
        //                        from_account_str += string.Format(" 			<from_account>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				<institution_name>{0}</institution_name>{1}", InstitutionName, Environment.NewLine);
        //                        from_account_str += string.Format(" 				<institution_code>{0}</institution_code>{1}", fiu_ref_number, Environment.NewLine);
        //                        from_account_str += string.Format(" 				<branch>{1}</branch>{0}", Environment.NewLine, Row1["DTL_Branch_N"].ToString().Trim());
        //                        from_account_str += string.Format(" 				<account>{1}</account>{0}", Environment.NewLine, Row1["AccountNo"].ToString().Trim());
        //                        from_account_str += string.Format(" 				<currency_code>{1}</currency_code>{0}", Environment.NewLine, Curr_Code);
        //                        from_account_str += string.Format(" 				<account_name>{1}</account_name>{0}", Environment.NewLine, t_account.account_name);
        //                        from_account_str += string.Format(" 				<iban>{1}</iban>{0}", Environment.NewLine, Row1["AccountNo"].ToString().Trim());
        //                        from_account_str += string.Format(" 				<client_number>{1}</client_number>{0}", Environment.NewLine, Row1["AccountNo"].ToString().Trim());
        //                        from_account_str += string.Format(" 				<personal_account_type>A</personal_account_type>{0}", Environment.NewLine);

        //                        // Signatory Details
        //                        Sig_Rec = new DataTable();
        //                        SQLStr = string.Format("SELECT TOP 5 * FROM vw_AML_SignDetails_SCB WHERE ACCOUNTNO = '{0}'", Row1["AccountNo"].ToString().Trim());
        //                        Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                        if (Curr_Rec.Rows.Count > 0)
        //                        {
        //                            foreach (DataRow SigRow in Curr_Rec.Rows)
        //                            {
        //                                from_account_str += string.Format(" 				<signatory>{0}", Environment.NewLine);
        //                                from_account_str += string.Format(" 					<is_primary>true</is_primary>{0}", Environment.NewLine);
        //                                from_account_str += string.Format(" 					<t_person> {0}", Environment.NewLine);
        //                                from_account_str += string.Format(" 						<gender>{0}</gender>{1}", SigRow["SEX"].ToString().Trim(), Environment.NewLine);
        //                                from_account_str += string.Format(" 						<title>{1}</title>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["SALUTATIONCODE"].ToString().Trim()));

        //                                from_account_str += string.Format(" 						<first_name>{1} </first_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["FIRSTNAME"].ToString().Trim()));
        //                                from_account_str += string.Format(" 						<middle_name> </middle_name>{0}", Environment.NewLine);
        //                                from_account_str += string.Format(" 						<last_name>{1} </last_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["LASTNAME"].ToString().Trim()));

        //                                DateTime usrBirthDate = System.Convert.ToDateTime(Convert.ToDateTime(SigRow["DATEOFBIRTH"]));
        //                                from_account_str += string.Format(" 						    <birthdate>{1:yyyy-MM-dd}T00:00:00</birthdate>{0}", Environment.NewLine, usrBirthDate);
        //                                from_account_str += string.Format(" 						    <birth_place>{1}</birth_place>{0}", Environment.NewLine, "Harare");
        //                                from_account_str += string.Format(" 						    <mothers_name>{1}</mothers_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["MOTHERSMAIDENNAME"].ToString().Trim()));
        //                                from_account_str += string.Format(" 						    <alias>{1}</alias>{0}", Environment.NewLine, "Alias");
        //                                from_account_str += string.Format(" 						    <ssn>{1}</ssn>{0}", Environment.NewLine, "9999999");
        //                                from_account_str += string.Format(" 						    <passport_number>{1}</passport_number>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["ACCOUNTNO"].ToString().Trim().Substring(0,6)));
        //                                //from_account_str += String.Format(" 						    <id_number>{1}</id_number>{0}", Environment.NewLine, "70-699999A-63")
        //                                from_account_str += string.Format(" 						    <passport_country>{1}</passport_country>{0}", Environment.NewLine, "ZW");
        //                                from_account_str += string.Format(" 						    <nationality1>{1}</nationality1>{0}", Environment.NewLine, "ZW");
        //                                from_account_str += string.Format(" 						    <nationality2>{1}</nationality2>{0}", Environment.NewLine, "ZW");
        //                                from_account_str += string.Format(" 						    <nationality3>{1}</nationality3>{0}", Environment.NewLine, "ZW");
        //                                from_account_str += string.Format(" 						    <residence>{1}</residence>{0}", Environment.NewLine, "ZW");
        //                                from_account_str += string.Format(" 						    <phones/>{0}", Environment.NewLine, "");
        //                                //from_account_str += String.Format(" 						    <phones>{1}</phones>{0}", Environment.NewLine, "")

        //                                //Dim tmpPersonAddr As New t_personAddresses()
        //                                //Dim tmpAddr As New t_address

        //                                //tmpAddr.address_type = contact_type.Item
        //                                //tmpAddr.address = Utilities.Remove_XML_SpecialCharacters(SigRow["ADDRESS_LINE").ToString.Trim)
        //                                //tmpAddr.town = Utilities.Remove_XML_SpecialCharacters(SigRow["CITYCODE").ToString.Trim)
        //                                //tmpAddr.city = Utilities.Remove_XML_SpecialCharacters(SigRow["CITYCODE").ToString.Trim)
        //                                //tmpAddr.zip = "NA"
        //                                //tmpAddr.country_code = "ZW"

        //                                //from_account_str += String.Format(" 						    <addresses>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["ADDRESS_LINE").ToString.Trim))
        //                                //from_account_str += String.Format(" 						          <address>{0}", Environment.NewLine)
        //                                //from_account_str += String.Format(" 						              <address_type>-</address_type>{0}", Environment.NewLine)
        //                                //from_account_str += String.Format(" 						              <address>{1}</address>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["ADDRESS_LINE").ToString.Trim))
        //                                //from_account_str += String.Format(" 						              <town>{1}</town>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["CITYCODE").ToString.Trim))
        //                                //from_account_str += String.Format(" 						              <city>{1}</city>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(SigRow["CITYCODE").ToString.Trim))
        //                                //from_account_str += String.Format(" 						              <zip>NA</zip>{0}", Environment.NewLine)
        //                                //from_account_str += String.Format(" 						              <country_code>ZW</country_code>{0}", Environment.NewLine)
        //                                //from_account_str += String.Format(" 						          </address>{0}", Environment.NewLine)
        //                                //from_account_str += String.Format(" 						    </addresses>{0}", Environment.NewLine)

        //                                from_account_str += string.Format(" 						    <addresses/>{0}", Environment.NewLine);

        //                                from_account_str += string.Format(" 					</t_person>{0}", Environment.NewLine);
        //                                from_account_str += string.Format(" 				</signatory>{0}", Environment.NewLine);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            // Zvazvanga Zviri
        //                            from_account_str += string.Format(" 				<signatory>{0}", Environment.NewLine);
        //                            from_account_str += string.Format(" 					<is_primary>true</is_primary>{0}", Environment.NewLine);
        //                            from_account_str += string.Format(" 					<t_person> {0}", Environment.NewLine);
        //                            from_account_str += string.Format(" 						<gender>M</gender>{0}", Environment.NewLine);
        //                            from_account_str += string.Format(" 						<title> </title>{0}", Environment.NewLine);

        //                            from_account_str += string.Format(" 						<first_name>{1} </first_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(Row1["Customer_First_Name"].ToString().Trim()));
        //                            from_account_str += string.Format(" 						<middle_name> </middle_name>{0}", Environment.NewLine);
        //                            from_account_str += System.Convert.ToString(string.Format(" 						<last_name>{1} </last_name>{0}", Environment.NewLine, (Utilities.Remove_XML_SpecialCharacters(Row1["Customer_Last_Name"].ToString().Trim()) == Utilities.Remove_XML_SpecialCharacters(Row1["Customer_First_Name"].ToString().Trim())) ? "" : (Utilities.Remove_XML_SpecialCharacters(Row1["Customer_Last_Name"].ToString().Trim()))));

        //                            from_account_str += string.Format(" 						    <birthdate>{1}</birthdate>{0}", Environment.NewLine, "2015-03-31T00:00:00");
        //                            from_account_str += string.Format(" 						    <birth_place>{1}</birth_place>{0}", Environment.NewLine, "Harare");
        //                            from_account_str += string.Format(" 						    <mothers_name>{1}</mothers_name>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format(" 						    <alias>{1}</alias>{0}", Environment.NewLine, "Alias");
        //                            from_account_str += string.Format(" 						    <ssn>{1}</ssn>{0}", Environment.NewLine, "9999999");
        //                            from_account_str += string.Format(" 						    <passport_number>ZW{1}</passport_number>{0}", Environment.NewLine, Row1["AccountNo"].ToString().Trim());
        //                            //from_account_str += String.Format(" 						    <id_number>{1}</id_number>{0}", Environment.NewLine, "70-699999A-63")
        //                            from_account_str += string.Format(" 						    <passport_country>ZW</passport_country>{0}", Environment.NewLine);
        //                            from_account_str += string.Format(" 						    <nationality1>{1}</nationality1>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format(" 						    <nationality2>{1}</nationality2>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format(" 						    <nationality3>{1}</nationality3>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format(" 						    <residence>{1}</residence>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format(" 						    <phones>{1}</phones>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format(" 						    <addresses>{1}</addresses>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format(" 					</t_person>{0}", Environment.NewLine);
        //                            from_account_str += string.Format(" 				</signatory>{0}", Environment.NewLine);

        //                        }

        //                        from_account_str += string.Format(" 				<opened>{1}</opened>{0}", Environment.NewLine, "2010-03-31T00:00:00");
        //                        from_account_str += string.Format(" 				<closed>{1}</closed>{0}", Environment.NewLine, "2015-03-31T00:00:00");
        //                        from_account_str += string.Format(" 				<balance>{1}</balance>{0}", Environment.NewLine, Row1["TRH_New_Bal"].ToString().Trim());
        //                        from_account_str += string.Format(" 				<date_balance>{1}</date_balance>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                        from_account_str += string.Format(" 				<status_code>{1}</status_code>{0}", Environment.NewLine, "A");
        //                        from_account_str += string.Format(" 			</from_account>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 			<from_country>ZW</from_country>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 		</t_from_my_client>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 		<t_to_my_client>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 		    <to_funds_code>K</to_funds_code>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 			<to_funds_comment></to_funds_comment>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 			<to_account>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				<institution_name>{0}</institution_name>{1}", InstitutionName, Environment.NewLine);
        //                        from_account_str += string.Format(" 				<institution_code>{0}</institution_code>{1}", fiu_ref_number, Environment.NewLine);
        //                        //from_account_str += string.Format(" 				<branch>1000</branch>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				<branch>{0}</branch>{1}", Row1["DTL_Branch_N"].ToString().Trim(), Environment.NewLine);
        //                        //from_account_str += string.Format(" 				<account>02400000000</account>{0}", Row1["DTL_Branch_N"].ToString().Trim(), Environment.NewLine);
        //                        from_account_str += string.Format(" 				<account>{0}</account>{1}", Row1["AccountNo"].ToString().Trim(), Environment.NewLine);
        //                        from_account_str += string.Format(" 				<currency_code>{1}</currency_code>{0}", Environment.NewLine, Curr_Code);
        //                        from_account_str += string.Format(" 				<account_name>Cash</account_name>{0}", Environment.NewLine);
        //                        //from_account_str += string.Format(" 				<iban>02400000000</iban>{0}", Environment.NewLine);
        //                        //from_account_str += string.Format(" 				<client_number>02400000000</client_number>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				<iban>{0}</iban>{1}", Row1["AccountNo"].ToString().Trim(), Environment.NewLine);
        //                        from_account_str += string.Format(" 				<client_number>{0}</client_number>{1}", Row1["AccountNo"].ToString().Trim(),  Environment.NewLine);
        //                        from_account_str += string.Format(" 				<personal_account_type>A</personal_account_type>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				<signatory>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 					<is_primary>true</is_primary>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 					<t_person> {0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 						<gender>M</gender>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 						<title> </title>{0}", Environment.NewLine);


        //                        if (Utilities.Remove_XML_SpecialCharacters(Row1["Customer_Last_Name"].ToString().Trim()) == "")
        //                        {
        //                            from_account_str += string.Format(" 						<first_name>{1} </first_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(Row1["DTL_Desc"].ToString().Trim()));
        //                        }
        //                        else
        //                        {
        //                            from_account_str += string.Format(" 						<first_name>{1} </first_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(Row1["Customer_Last_Name"].ToString().Trim()));
        //                        }
        //                        from_account_str += string.Format(" 						<middle_name> </middle_name>{0}", Environment.NewLine);
        //                        if (Utilities.Remove_XML_SpecialCharacters(Row1["Customer_Last_Name"].ToString().Trim()) == "")
        //                        {
        //                            from_account_str += string.Format(" 						<last_name>{1} </last_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(Row1["DTL_Desc"].ToString().Trim()));
        //                        }
        //                        else
        //                        {
        //                            from_account_str += string.Format(" 						<last_name>{1} </last_name>{0}", Environment.NewLine, Utilities.Remove_XML_SpecialCharacters(Row1["Customer_First_Name"].ToString().Trim()));
        //                        }

        //                        from_account_str += string.Format(" 						    <birthdate>{1}</birthdate>{0}", Environment.NewLine, "2015-03-31T00:00:00");
        //                        from_account_str += string.Format(" 						    <birth_place>{1}</birth_place>{0}", Environment.NewLine, "Harare");
        //                        from_account_str += string.Format(" 						    <mothers_name>{1}</mothers_name>{0}", Environment.NewLine, "UNK");
        //                        from_account_str += string.Format(" 						    <alias>{1}</alias>{0}", Environment.NewLine, "Alias");
        //                        from_account_str += string.Format(" 						    <ssn>{1}</ssn>{0}", Environment.NewLine, "9999999");
        //                        from_account_str += string.Format(" 						    <passport_number>BN{1}</passport_number>{0}", Environment.NewLine,  Row1["AccountNo"].ToString().Trim().Substring(0,6));
        //                        //from_account_str += String.Format(" 						    <id_number>{1}</id_number>{0}", Environment.NewLine, "70-699999A-63")
        //                        from_account_str += string.Format(" 						    <passport_country>{1}</passport_country>{0}", Environment.NewLine, "ZW");
        //                        from_account_str += string.Format(" 						    <nationality1>{1}</nationality1>{0}", Environment.NewLine, "ZW");
        //                        from_account_str += string.Format(" 						    <nationality2>{1}</nationality2>{0}", Environment.NewLine, "ZW");
        //                        from_account_str += string.Format(" 						    <nationality3>{1}</nationality3>{0}", Environment.NewLine, "ZW");
        //                        from_account_str += string.Format(" 						    <residence>{1}</residence>{0}", Environment.NewLine, "ZW");
        //                        from_account_str += string.Format(" 						    <phones>{1}</phones>{0}", Environment.NewLine, "");
        //                        from_account_str += string.Format(" 						    <addresses>{1}</addresses>{0}", Environment.NewLine, "");
        //                        from_account_str += string.Format(" 					</t_person>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				</signatory>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 				<opened>{1}</opened>{0}", Environment.NewLine, "2010-03-31T00:00:00");
        //                        from_account_str += string.Format(" 				<closed>{1}</closed>{0}", Environment.NewLine, "2015-03-31T00:00:00");
        //                        from_account_str += string.Format(" 				<balance>{1}</balance>{0}", Environment.NewLine, Row1["TRH_New_Bal"].ToString().Trim());
        //                        from_account_str += string.Format(" 				<date_balance>{1}</date_balance>{0}", Environment.NewLine, "2015-03-31T00:00:00");
        //                        from_account_str += string.Format(" 						<status_code>{1}</status_code>{0}", Environment.NewLine, "A");
        //                        from_account_str += string.Format(" 			</to_account>{0}", Environment.NewLine);
        //                        from_account_str += string.Format(" 			<to_country>ZW</to_country>{0}", Environment.NewLine);
        //                        from_account_str += string.Format("		</t_to_my_client>{0}", Environment.NewLine);
        //                        from_account_str += string.Format("		<goods_services>{0}", Environment.NewLine);
        //                        from_account_str += string.Format("         <item>{0}", Environment.NewLine);
        //                        from_account_str += string.Format("              <item_type>{1}</item_type>{0}", Environment.NewLine, "E");
        //                        from_account_str += string.Format("         </item>{0}", Environment.NewLine);
        //                        from_account_str += string.Format("		</goods_services>{0}", Environment.NewLine);
        //                        from_account_str += string.Format("		<comments></comments>", Environment.NewLine);

        //                        goAML_MyClient = new t_person_my_client();

        //                        goAML_MyClient.first_name   = Row1["DTL_Desc"].ToString().Trim();
        //                        goAML_MyClient.last_name    = Row1["DTL_Desc"].ToString().Trim();
        //                        goAML_MyClient.middle_name  = "M";
        //                        goAML_MyClient.nationality1 = country_type.ZW;

        //                        goAML_Transaction.transactionnumber       = transactionnumber;
        //                        goAML_Transaction.internal_ref_number     = internal_ref_number;
        //                        goAML_Transaction.transaction_location    = transaction_location;
        //                        goAML_Transaction.transaction_description = transaction_description;
        //                        goAML_Transaction.date_transaction        = date_transaction;
        //                        goAML_Transaction.teller                  = teller;
        //                        goAML_Transaction.authorized              = authorized;
        //                        goAML_Transaction.late_deposit            = goAML_LateDeposit;
        //                        goAML_Transaction.date_posting            = date_posting;
        //                        goAML_Transaction.value_date              = value_date;
        //                        goAML_Transaction.transmode_code          = transmode_code;
        //                        goAML_Transaction.transmode_comment       = transmode_comment;
        //                        goAML_Transaction.amount_local            = amount_local;

        //                        ///goAML_TransactionList.Add(goAML_Transaction)

        //                        string TransactionXML = "";
        //                        objStreamWriter = new StringWriter();
        //                        x = new XmlSerializer(goAML_Transaction.GetType());     // Of Type reportTransaction
        //                        x.Serialize(objStreamWriter, goAML_Transaction);
        //                        Temp_goAMLXML = System.Convert.ToString(objStreamWriter.ToString());

        //                        Tag_Separator.SetValue("<transactionnumber>", 0);
        //                        Transaction_Parms     = Temp_goAMLXML.Split(Tag_Separator, StringSplitOptions.None);
        //                        Transaction_Parms_Len = 0;
        //                        Transaction_Parms_Len = Transaction_Parms.Length;
        //                        if (Transaction_Parms_Len > 1)
        //                        {
        //                            TransactionXML = string.Format("{0}{1}{2}", "<transaction><transactionnumber>", Transaction_Parms[1].Replace("</reportTransaction>", "</transaction>"), Environment.NewLine);
        //                            TransactionXML = TransactionXML.Replace("</late_deposit>", string.Format("</late_deposit>{2}  <date_posting>{0:yyyy-MM-ddTHH:mm:ss}</date_posting>{2}  <value_date>{1:yyyy-MM-ddTHH:mm:ss}</value_date>{2}", date_posting, value_date, Environment.NewLine));
        //                            //TransactionXML = String.Format("{0}<date_posting>{3}</date_posting><value_date>{4}</value_date><transactionnumber>{1}{2}", "<transaction>", Transaction_Parms(1).Replace("</reportTransaction>", "</transaction>"), Environment.NewLine, date_posting, value_date)
        //                        }
        //                        TransactionXML = TransactionXML.Replace("</amount_local>", string.Format("</amount_local>{0}{1}", Environment.NewLine, from_account_str));
        //                        Transaction_Str += TransactionXML;

        //                        //Dim oWrite As StreamWriter
        //                        //oWrite = File.WriteAllText(Out_File_Name, goAML_Transaction.Items())
        //                        //oWrite.Close()
        //                        //Using objWriter As New System.IO.StreamWriter(Out_File_Name)
        //                        //    For Each Row As DataRow In Data_Rec.Rows
        //                        //        ' Normal Transactions
        //                        //        objWriter.WriteLine(Row["Rec_Str"))
        //                        //    Next
        //                        //    If TrxnDB.DbConnection.State = ConnectionState.Open Then
        //                        //        TrxnDB.DbConnection.Close()
        //                        //    End If
        //                        //    objWriter.Close()
        //                        //End Using
        //                        // Increase Run Number
        //                    }
        //                    XML_Header_Str = XML_Header_Str.Replace("</report>", Transaction_Str);
        //                    XML_Header_Str += "</report>";
        //                    XML_Header_Str += System.Convert.ToString(Environment.NewLine);
        //                    // Write out the XML File
        //                    File.WriteAllText(Out_File_Name, XML_Header_Str);
        //                    // Mark Records as having been Posted
        //                    SQLStr = string.Format("UPDATE tbl_AML_FinTransaction_ALL SET Posted_B = 1 WHERE TRH_ID >= {0} AND TRH_ID <= {1}", MinBatch_ID, MaxBatch_ID);
        //                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                    if (All_Imported)
        //                    {
        //                        SQLStr = string.Format("UPDATE tbl_FileHistory SET Exported_B = 1 WHERE File_Source_C  = '{1}' AND File_Name_C = '{0}'", Imported_File, AML_Product);
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                        SQLStr = string.Format("UPDATE dbo.tbl_AML_FinTransaction SET Posted_B = 1 WHERE RIGHT(File_Name_C,LEN('{0}')) = '{0}'", Imported_File);
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                        SQLStr = string.Format("[dbo].[ustp_Move_CTR_Trxn_to_Hist] @FileName_C = '{0}',  @FileLength = {1}", Imported_File, File_Name_Length);
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                    }
        //                }
        //                //Mark file as Exported in tbl_FileHistory
        //                //If Imported_File <> "" Then
        //                //    SQLStr = String.Format("UPDATE tbl_FileHistory SET Posted_B = 1 WHERE File_Name_C = '{0}'", Imported_File)
        //                //    TrxnDB.exec(SQLStr)
        //                //    TrxnDB.exec("UPDATE tbl_FileHistory SET Exported = 1 WHERE File_Name_C = '{0}")
        //                //End If

        //                // Mark the day has having been run.   // NO LONGER NECCESSARY
        //                //If Manual_CTR_Run_YN Then
        //                //    SQLStr = String.Format("UPDATE tbl_SysParam SET Manual_CTR_Run_YN =  '0', Manual_CTR_Run_Time = CURRENT_TIMESTAMP, Manual_CTR_Run_Rows = {0} WHERE ParamID  = 'CTL'", Curr_Rec.Rows.Count)
        //                //Else
        //                //    SQLStr = String.Format("INSERT INTO [tbl_CTR_STR_Days]([CTR_STR_Sys_Date_D],[CTR_STR_Run_Date_D]) SELECT '{0:yyyy-MM-dd}' AS CTR_STR_Sys_Date_D,  CONVERT(VARCHAR(19),CURRENT_TIMESTAMP,25) AS CTR_STR_Run_Date_D", Bnk_RunDate)
        //                //End If
        //                //TrxnDB.exec(SQLStr)
        //            }
        //        }
        //        LogStep("CreateAML_File_CTR_SCB Step 2", "CreateAML_File_CTR_SCB Main Exit");
        //        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", AML_Product));
        //    }
        //    catch (Exception CTR_Expt)
        //    {
        //        string retErr = LogError(CTR_Expt.GetHashCode().ToString(), "CreateAML_File_CTR_SCB", CTR_Expt, transactionnumber);
        //        //MessageBox.Show(Err_Str);
        //    }
        //}


        string Post_Incoming_to_FCUBS_FT()
        {
            string Reference_C;
            string From_Bank_Desc_C = "";
            string paymentType_Local;
            string tokenId_Local = ""; ;
            string sourceAccountNo_Local;
            string destinationAccount_Local;
            string destinatonAccount_Bank;
            string destinationAccount_Branch;
            string destinationAccount_Local_New = "";
            string sourceReference_Local;
            double paymentAmount_Local;
            string SourceTrxnID_Local;
            string Trxn_Narr_Local = "";
            string Current_Trn_Batch = "";
            string Current_Trxn_Local = "";
            string sourceAccountNo_OG_Local;
            string destinationAccount_OG_Local;
            string destination_CustNo = "";
            string Source_Types_Local;
            string sourceMethod_Local;
            string Remitter_C;
            string Remitter_Details_Str = "";
            string Remitter_Ac;
            string Remitter_Detail;
            string Tmp_Remiter_Detail = "";
            string Benef_C;
            string Benef_Detail;
            string Tmp_Benef_Detail = "";
            string Trn_OIR_C;
            string Num_Retry_Config = "0";
            string lstContents = "";
            bool TxtFound = false;
            string Display_Info = "";
            string[] LocalTag_Separator = { "BCN" };
            string BYORDOF2;
            string BYORDOF3;
            string BYORDOF4;
            string BYORDOF5;
            string ULT_BENEF2;
            string ULT_BENEF3;
            string ULT_BENEF4;
            string ULT_BENEF5;
            string PMTDET1;
            string PMTDET2;
            string PMTDET3;
            string PMTDET4;
            int    PMTDETField_Lenght = 25;
            string Core_Response;
            string Inward_Str    = "";
            int    NonNull_Line  = 0;
            string SQLStr        = "";
            string Curr_SwitchCode_C    = "";
            Account_Branch BranchSearch = new Account_Branch();
            bool   AccountErrorsFound   = false;
            string FCUBS_Schema         = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.FCUBS_Schema;
            if (FCUBS_Schema != "") FCUBS_Schema += ".";
            DataTable SysRec      = new DataTable();
            DataTable CurrencyRec = new DataTable();
            string    INCOMING_SINGLE_DAY_POSTING_DATE   = "";
            bool      ENABLE_INCOMING_SINGLE_DAY_POSTING = false;
            string    RTGS_Inwards_FCUBS_Posting_Retry   = "3";
            string    STP_Currencies = "";
            Int16     CurrrencyCount = 0;
            bool      Curr_Base_YN   = true;
            string    TrxnSource_C   = "";
            bool      RTGS_Outwards_Live_Instance = false;

            try
            {
                bool Post_Incoming = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Inwards_FCUBS_DataPosting;
                if (Post_Incoming)
                {
                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('ENABLE_INCOMING_SINGLE_DAY_POSTING','INCOMING_SINGLE_DAY_POSTING_DATE','RTGS_Inwards_FCUBS_Posting_Retry','STP_Currencies','RTGS_Outwards_Live_Instance') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    if (SysRec.Rows.Count > 0)
                    {
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "INCOMING_SINGLE_DAY_POSTING_DATE".ToUpper())   INCOMING_SINGLE_DAY_POSTING_DATE   = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Inwards_FCUBS_Posting_Retry".ToUpper())   RTGS_Inwards_FCUBS_Posting_Retry   = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "STP_Currencies".ToUpper())                     STP_Currencies                     = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ENABLE_INCOMING_SINGLE_DAY_POSTING".ToUpper()) ENABLE_INCOMING_SINGLE_DAY_POSTING = ((param_Row["Parameter_Value"].ToString().ToUpper().Trim().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().Trim().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().Trim().ToUpper() == "1")) ? true : false;
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_Instance".ToUpper())        RTGS_Outwards_Live_Instance        = ((param_Row["Parameter_Value"].ToString().ToUpper().Trim().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().Trim().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().Trim().ToUpper() == "1")) ? true : false;
                        }
                    }

                    STP_Currencies   = string.Format("'{0}'",  STP_Currencies.Replace(",","','").Replace(" ",""));
                    Num_Retry_Config = RTGS_Inwards_FCUBS_Posting_Retry;

                    DataTable           Inward_Rec;
                    FCUBS_PostingResult FCUBS_Result = new FCUBS_PostingResult();
                    if (ENABLE_INCOMING_SINGLE_DAY_POSTING)
                    {
                        Inward_Str = string.Format("SELECT Trxn.*, tbl_Curr.RTGS_Acc_C, tbl_Curr.RTGS_Suspense_Acc_C,tbl_Curr.Curr_Base_YN, tbl_Curr.Curr_SwitchCode_C FROM tbl_RTGSIn_Trxn Trxn INNER JOIN tbl_Currencies tbl_Curr ON Trxn.Curr_Code_C = tbl_Curr.Curr_Short_Name WHERE Reference_C IS NOT NULL AND COALESCE(Trxn.Posted_B,0)  = 0 AND COALESCE(Posted_to_Suspense_B,0) = 0 AND (COALESCE(0,Trxn.Num_Retry_N) < {0} )  AND (CONVERT(VARCHAR(10),Value_Date_D,25) = '{1}')     AND DATEDIFF(MINUTE, COALESCE(Trxn.Retry_Date, CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Num_Retry_N,0))) AND tbl_Curr.Curr_Short_Name IN ({2}) AND (CASE WHEN SUBSTRING(Trxn.From_Bank_Desc_C,8,1) = '0' THEN 0 ELSE 1 END) = '{3}' Order by Num_Retry_N ASC, Inst_No ASC", Num_Retry_Config, INCOMING_SINGLE_DAY_POSTING_DATE, STP_Currencies, ((RTGS_Outwards_Live_Instance) ? "1" : "0"));
                    }
                    else
                    {
                        //Inward_Str = string.Format("SELECT * FROM (");
                        //Inward_Str += string.Format(" SELECT Trxn.*, tbl_Curr.RTGS_Acc_C, tbl_Curr.RTGS_Suspense_Acc_C,tbl_Curr.Curr_Base_YN, tbl_Curr.Curr_SwitchCode_C, 'Main'      AS TrxnSource_C FROM tbl_RTGSIn_Trxn Trxn INNER JOIN tbl_Currencies tbl_Curr ON Trxn.Curr_Code_C = tbl_Curr.Curr_Short_Name WHERE Reference_C IS NOT NULL AND  COALESCE(Trxn.Posted_B,0)  = 0 AND COALESCE(Posted_to_Suspense_B,0) = 0 AND (COALESCE(0,Trxn.Num_Retry_N)           < {0} )  AND (Value_Date_D > DATEADD(dd,-4,CURRENT_TIMESTAMP)) AND DATEDIFF(MINUTE, COALESCE(Trxn.Retry_Date          , CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Num_Retry_N          ,0))) AND tbl_Curr.Curr_Short_Name IN ({1}) AND (CASE WHEN SUBSTRING(Trxn.From_Bank_Desc_C,8,1) = '0' THEN 0 ELSE 1 END) = '{2}' UNION"                                                 , Num_Retry_Config, STP_Currencies, ((RTGS_Outwards_Live_Instance) ? "1" : "0"));
                        //Inward_Str += string.Format(" SELECT Trxn.*, tbl_Curr.RTGS_Acc_C, tbl_Curr.RTGS_Suspense_Acc_C,tbl_Curr.Curr_Base_YN, tbl_Curr.Curr_SwitchCode_C, 'Mitigated' AS TrxnSource_C FROM tbl_RTGSIn_Trxn Trxn INNER JOIN tbl_Currencies tbl_Curr ON Trxn.Curr_Code_C = tbl_Curr.Curr_Short_Name WHERE Reference_C IS NOT NULL AND  COALESCE(Trxn.Posted_B,0)  = 0 AND COALESCE(Posted_to_Suspense_B,0) = 1 AND (COALESCE(0,Trxn.Mitigated_Num_Retries) < {0} )  AND (Value_Date_D > DATEADD(dd,-4,CURRENT_TIMESTAMP)) AND DATEDIFF(MINUTE, COALESCE(Trxn.Mitigated_Retry_Date, CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Mitigated_Num_Retries,0))) AND tbl_Curr.Curr_Short_Name IN ({1}) AND (CASE WHEN SUBSTRING(Trxn.From_Bank_Desc_C,8,1) = '0' THEN 0 ELSE 1 END) = '{2}' AND Mitigated_YN_B = 1 AND Mitigated_Approved_YN_B = 1", Num_Retry_Config, STP_Currencies, ((RTGS_Outwards_Live_Instance) ? "1" : "0"));
                        //Inward_Str += string.Format(") TrnSources Order by Num_Retries_Suspense_N ASC, Mitigated_Num_Retries ASC, Inst_No ASC");

                        Inward_Str = string.Format("SELECT * FROM (");
                        Inward_Str += string.Format(" SELECT Trxn.*, 'Main'      AS TrxnSource_C FROM tbl_RTGSIn_Trxn Trxn  WHERE Reference_C IS NOT NULL AND  COALESCE(Trxn.Posted_B,0)  = 0 AND COALESCE(Posted_to_Suspense_B,0) = 0 AND (COALESCE(0,Trxn.Num_Retry_N)           < {0} )  AND (Value_Date_D > DATEADD(dd,-4,CURRENT_TIMESTAMP)) AND DATEDIFF(MINUTE, COALESCE(Trxn.Retry_Date          , CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Num_Retry_N          ,0))) AND (CASE WHEN SUBSTRING(Trxn.From_Bank_Desc_C,8,1) = '0' THEN 0 ELSE 1 END) = '{2}' UNION", Num_Retry_Config, STP_Currencies, ((RTGS_Outwards_Live_Instance) ? "1" : "0"));
                        Inward_Str += string.Format(" SELECT Trxn.*, 'Mitigated' AS TrxnSource_C FROM tbl_RTGSIn_Trxn Trxn  WHERE Reference_C IS NOT NULL AND  COALESCE(Trxn.Posted_B,0)  = 0 AND COALESCE(Posted_to_Suspense_B,0) = 1 AND (COALESCE(0,Trxn.Mitigated_Num_Retries) < {0} )  AND (Value_Date_D > DATEADD(dd,-4,CURRENT_TIMESTAMP)) AND DATEDIFF(MINUTE, COALESCE(Trxn.Mitigated_Retry_Date, CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Mitigated_Num_Retries,0))) AND (CASE WHEN SUBSTRING(Trxn.From_Bank_Desc_C,8,1) = '0' THEN 0 ELSE 1 END) = '{2}' AND Mitigated_YN_B = 1 AND Mitigated_Approved_YN_B = 1", Num_Retry_Config, STP_Currencies, ((RTGS_Outwards_Live_Instance) ? "1" : "0"));
                        Inward_Str += string.Format(") TrnSources Order by Num_Retries_Suspense_N ASC, Mitigated_Num_Retries ASC, Inst_No ASC");
                    }
                    Inward_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), Inward_Str);
                    if (Inward_Rec != null)
                    {
                        if (Inward_Rec.Rows.Count != 0)
                        {
                            foreach (DataRow Inward_Row in Inward_Rec.Rows)
                            {
                                AccountErrorsFound = false;
                                BYORDOF2   = "";
                                BYORDOF3   = "";
                                BYORDOF4   = "";
                                BYORDOF5   = "";
                                ULT_BENEF2 = "";
                                ULT_BENEF3 = "";
                                ULT_BENEF4 = "";
                                ULT_BENEF5 = "";
                                PMTDET1    = "";
                                PMTDET2    = "";
                                PMTDET3    = "";
                                PMTDET4    = "";
                                destinationAccount_Local = "";
                                sourceAccountNo_Local    = "";

                                TrxnSource_C                 = Inward_Row["TrxnSource_C"].ToString().Trim();       
                                tokenId_Local                = Inward_Row["Inst_No"].ToString().Trim();
                                From_Bank_Desc_C             = Inward_Row["From_Bank_Desc_C"].ToString().Trim();
                                Reference_C                  = Inward_Row["Reference_C"].ToString().Trim();

                                if (TrxnSource_C == "Main")
                                {
                                    destinationAccount_Local     = Inward_Row["Benef_Acc_C"].ToString().Trim();
                                    destinationAccount_Local_New = Inward_Row["Benef_Acc_C"].ToString().Trim() ;

                                    //sourceAccountNo_Local        = Inward_Row["RTGS_Acc_C"].ToString().Trim();
                                }

                                if (TrxnSource_C == "Mitigated")
                                {
                                    destinationAccount_Local     = Inward_Row["Mitigated_Acc_No_C"].ToString().Trim();
                                    destinationAccount_Local_New = Inward_Row["Mitigated_Acc_No_C"].ToString().Trim();

                                   // sourceAccountNo_Local        = Inward_Row["RTGS_Suspense_Acc_C"].ToString().Trim();
                                }
                               
                                Trn_OIR_C                    = Inward_Row["Trn_OIR_C"].ToString().Trim();
                                sourceReference_Local        = Inward_Row["Trn_PID_C"].ToString().Trim();
                                Curr_SwitchCode_C            = Inward_Row["Curr_SwitchCode_C"].ToString().Trim();
                                Curr_Base_YN                 = Convert.ToBoolean(Inward_Row["Curr_Base_YN"]);

                                if (sourceReference_Local.Length == 0) sourceReference_Local = Trn_OIR_C;
                                paymentAmount_Local     = double.Parse(Inward_Row["Amount_N"].ToString().Trim());
                                // Remitter Details
                                Remitter_C              = Inward_Row["Remitter_C"].ToString().Trim();
                                Remitter_Details_Str    = Remitter_C;
                                Remitter_Ac             = Inward_Row["Remitter_Acc_C"].ToString().Trim();
                                Remitter_Detail         = Inward_Row["Remitter_Detail"].ToString().Trim();
                                if (Remitter_C.Length > 20) Remitter_C = Remitter_C.Substring(0, 20);

                                LocalTag_Separator.SetValue("#R#", 0);
                                string[] RemitterParams = Remitter_Detail.Split(LocalTag_Separator, StringSplitOptions.None);
                                double Remitter_Lines   = RemitterParams.Length;
                                Tmp_Remiter_Detail      = "";
                                NonNull_Line            = 0;

                                // Remitter Details
                                PMTDETField_Lenght = 73;
                                if (Remitter_Details_Str != "")
                                {
                                    BYORDOF2 = Remitter_Details_Str;
                                    if (BYORDOF2.Length >= PMTDETField_Lenght)
                                    {
                                        BYORDOF2 = BYORDOF2.Substring(0, PMTDETField_Lenght);
                                        BYORDOF3 = Remitter_Details_Str.Substring(PMTDETField_Lenght, Remitter_Details_Str.Length - PMTDETField_Lenght);
                                        if (BYORDOF3.Length >= PMTDETField_Lenght)
                                        {
                                            BYORDOF3 = BYORDOF3.Substring(0, PMTDETField_Lenght);
                                            BYORDOF4 = Remitter_Details_Str.Substring(PMTDETField_Lenght * 2, Remitter_Details_Str.Length - PMTDETField_Lenght * 2);
                                            if (BYORDOF4.Length >= PMTDETField_Lenght)
                                            {
                                                BYORDOF4 = BYORDOF4.Substring(0, PMTDETField_Lenght);
                                                BYORDOF5 = Remitter_Details_Str.Substring(PMTDETField_Lenght * 3, Remitter_Details_Str.Length - PMTDETField_Lenght * 3);
                                                if (BYORDOF5.Length >= PMTDETField_Lenght)
                                                {
                                                    BYORDOF5 = BYORDOF5.Substring(0, PMTDETField_Lenght);
                                                }
                                            }
                                        }
                                    }
                                }

                                // Benef Details
                                Benef_C          = Inward_Row["Benef_C"].ToString().Trim();
                                Benef_Detail     = Inward_Row["Benef_Detail"].ToString().Trim();
                                Tmp_Benef_Detail = Benef_C;
                                if (Benef_C.Length > 20) Benef_C = Benef_C.Substring(0, 20);

                                LocalTag_Separator.SetValue("#R#", 0);
                                string[] BenefParams = Benef_Detail.Split(LocalTag_Separator, StringSplitOptions.None);
                                double BenefLines    = BenefParams.Length;
                                // Tmp_Benef_Detail     = "";
                                NonNull_Line = 0;

                                PMTDETField_Lenght = 73;
                                if (Tmp_Benef_Detail != "")
                                {
                                    ULT_BENEF2 = Tmp_Benef_Detail;
                                    if (ULT_BENEF2.Length >= PMTDETField_Lenght)
                                    {
                                        ULT_BENEF2 = ULT_BENEF2.Substring(0, PMTDETField_Lenght);
                                        ULT_BENEF3 = Tmp_Benef_Detail.Substring(PMTDETField_Lenght, Tmp_Benef_Detail.Length - PMTDETField_Lenght);
                                        if (ULT_BENEF3.Length >= PMTDETField_Lenght)
                                        {
                                            ULT_BENEF3 = ULT_BENEF3.Substring(0, PMTDETField_Lenght);
                                            ULT_BENEF4 = Tmp_Benef_Detail.Substring(PMTDETField_Lenght * 2, Tmp_Benef_Detail.Length - PMTDETField_Lenght * 2);
                                            if (ULT_BENEF4.Length >= PMTDETField_Lenght)
                                            {
                                                ULT_BENEF4 = ULT_BENEF4.Substring(0, PMTDETField_Lenght);
                                                ULT_BENEF5 = Tmp_Benef_Detail.Substring(PMTDETField_Lenght * 3, Tmp_Benef_Detail.Length - PMTDETField_Lenght * 3);
                                                if (ULT_BENEF5.Length >= PMTDETField_Lenght)
                                                {
                                                    ULT_BENEF5 = ULT_BENEF5.Substring(0, PMTDETField_Lenght);
                                                }
                                            }
                                        }
                                    }
                                }

                                Trxn_Narr_Local    = string.Format("REM {0}/{1} - {2}", From_Bank_Desc_C, Remitter_C, sourceReference_Local);
                                PMTDETField_Lenght = 73;
                                if (Trxn_Narr_Local != "")
                                {
                                    PMTDET1 = Trxn_Narr_Local;
                                    if (PMTDET1.Length >= PMTDETField_Lenght)
                                    {
                                        PMTDET1 = PMTDET1.Substring(0, PMTDETField_Lenght);
                                        PMTDET2 = Trxn_Narr_Local.Substring(PMTDETField_Lenght, Trxn_Narr_Local.Length - PMTDETField_Lenght);
                                        if (PMTDET2.Length >= PMTDETField_Lenght)
                                        {
                                            PMTDET2 = PMTDET2.Substring(0, PMTDETField_Lenght);
                                            PMTDET3 = Trxn_Narr_Local.Substring(PMTDETField_Lenght * 2, Trxn_Narr_Local.Length - PMTDETField_Lenght * 2);
                                            if (PMTDET3.Length >= PMTDETField_Lenght)
                                            {
                                                PMTDET3 = PMTDET3.Substring(0, PMTDETField_Lenght);
                                                PMTDET4 = Trxn_Narr_Local.Substring(PMTDETField_Lenght * 3, Trxn_Narr_Local.Length - PMTDETField_Lenght * 3);
                                                if (PMTDET4.Length >= PMTDETField_Lenght)
                                                {
                                                    PMTDET4 = PMTDET4.Substring(0, PMTDETField_Lenght);
                                                }
                                            }
                                        }
                                    }
                                }

                                if (TrxnSource_C == "Main")
                                {
                                    Current_Trxn_Local = Inward_Row["XML_File_C"].ToString().Trim();
                                    Current_Trn_Batch  = Inward_Row["Batch_No_C"].ToString().Trim();
                                }
                                if (TrxnSource_C == "Mitigated")
                                {
                                    Current_Trxn_Local = Inward_Row["Mitigated_XML_File_C"].ToString().Trim();
                                    Current_Trn_Batch  = Inward_Row["Mitigated_Batch_No_C"].ToString().Trim();
                                }

                                if (Current_Trxn_Local.Length == 0)
                                {
                                    // Re-Check BatchNum and Reference Number at time of Posting in Case another thread has updated it.
                                    Saved_BatchRef temp_Saved_BatchRef = new Saved_BatchRef();
                                    temp_Saved_BatchRef.IntialiseResults();
                                    temp_Saved_BatchRef = fn_GetSaved_BatchRef(tokenId_Local, TrxnSource_C);
                                    if (temp_Saved_BatchRef.BatchNumber_C.Length > 0)
                                    {
                                        Current_Trxn_Local = temp_Saved_BatchRef.BatchNumber_C;
                                        Current_Trn_Batch  = temp_Saved_BatchRef.TrxnNo_C;
                                    }
                                    else
                                    {
                                        Inward_Str         = "";
                                        Current_Trxn_Local = GetTrxnNo();
                                        Current_Trn_Batch  = GetBatchNumber();
                                        if (TrxnSource_C == "Main")
                                        {
                                            Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET XML_File_C = '{0}',  Batch_No_C = '{1}' WHERE Inst_No = '{2}'", Current_Trxn_Local, Current_Trn_Batch, tokenId_Local);
                                        }
                                        if (TrxnSource_C == "Mitigated")
                                        {
                                            Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Mitigated_XML_File_C = '{0}',  Mitigated_Batch_No_C = '{1}' WHERE Inst_No = '{2}'", Current_Trxn_Local, Current_Trn_Batch, tokenId_Local);
                                        }
                                        if (Inward_Str != "")
                                        {
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                        }
                                    }
                                }
                                SourceTrxnID_Local          = Current_Trxn_Local;
                                destinationAccount_OG_Local = "";

                                Source_Types_Local          = "FCUBSFCUBS";
                                sourceMethod_Local          = "CREDITPUSH";
                                destinationAccount_OG_Local = destinationAccount_Local;

                                if ((destinationAccount_Local.Trim().Length == 14) || (destinationAccount_Local.Trim().Length == 17) || (destinationAccount_Local.Trim().Length == 19))
                                {
                                    if (destinationAccount_Local.Trim().Length == 19)
                                    {
                                        destinationAccount_OG_Local  = destinationAccount_Local;
                                        destinatonAccount_Bank       = destinationAccount_Local.Substring(0, 2);
                                        destinationAccount_Branch    = destinationAccount_Local.Substring(2, 3);
                                        destinationAccount_Local_New = destinationAccount_Local.Substring(2, 17);

                                        if (destinatonAccount_Bank != "21")
                                        {
                                            AccountErrorsFound = true;
                                            Display_Info       = string.Format("{0} : Not Processed - Invalid Bank Code {1} ", Reference_C, destinatonAccount_Bank);
                                            Inward_Str         = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Invalid Bank Code {4}.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, destinationAccount_Local.Trim().Length, Num_Retry_Config, destinatonAccount_Bank);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                        }
                                    }

                                    if (destinationAccount_Local.Trim().Length == 17)
                                    {
                                        destinationAccount_OG_Local  = destinationAccount_Local;
                                        destinationAccount_Local_New = destinationAccount_Local;
                                        destinationAccount_Branch    = destinationAccount_Local.Substring(0, 3);
                                        //Target_Curr = GetCurrencyFCUBS(LocaldestinationAccountNo);
                                    }

                                    if (destinationAccount_Local.Trim().Length == 14)
                                    {
                                        destinationAccount_OG_Local  = destinationAccount_Local;
                                        destinationAccount_Local_New = destinationAccount_Local;
                                        destinationAccount_Branch    = "666";

                                        BranchSearch = fn_GetAccount_Branch(destinationAccount_Local.Trim());
                                      
                                        if (BranchSearch.Branch_Instances == 0)
                                        {
                                            AccountErrorsFound = true;
                                            Display_Info       = string.Format("{0} : Not Processed ({1}.) ", Reference_C, "Invalid Account Number - Not Found.");
                                            Inward_Str         = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Invalid Account Number - Not Found.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, destinationAccount_Local.Trim().Length, Num_Retry_Config);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                        }
                                        else
                                        {
                                            if (BranchSearch.Branch_Instances > 1)
                                            {
                                                AccountErrorsFound = true;
                                                Display_Info       = string.Format("{0} : Not Processed (Account exists in {1}) branches.) ", Reference_C, BranchSearch.Branch_Instances);
                                                Inward_Str         = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Invalid Account Number - Not Found.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, destinationAccount_Local.Trim().Length, Num_Retry_Config);
                                                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                            }
                                            else
                                            {
                                                CurrencyRec = new DataTable();
                                                SQLStr      = string.Format("SELECT * FROM tbl_Currencies WITH (NOLOCK) WHERE Curr_SwitchCode_C = '{1}' AND Curr_Short_Name IN ({0})", STP_Currencies, BranchSearch.CCY);
                                                CurrencyRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQLStr);
                                                //SQLStr         = string.Format("SELECT COUNT(*) CurrCount FROM tbl_Currencies WITH (NOLOCK) WHERE Curr_SwitchCode_C = '{1}' AND Curr_Short_Name IN ({0})", STP_Currencies, BranchSearch.CCY);
                                                //CurrrencyCount = Convert.ToInt16( SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"],SQLStr).Rows[0][0].ToString());
                                                //if (!STP_Currencies.Contains(BranchSearch.CCY))
                                                //if (CurrrencyCount == 0)

                                                if (CurrencyRec != null)
                                                {
                                                    if (CurrencyRec.Rows.Count != 0)
                                                    {
                                                        foreach (DataRow Currency_Row in CurrencyRec.Rows)
                                                        {
                                                            destinationAccount_Branch    = BranchSearch.BRANCH_CODE;
                                                            destinationAccount_Local_New = string.Format("{0}{1}", BranchSearch.BRANCH_CODE, destinationAccount_Local);

                                                            if (TrxnSource_C == "Main")
                                                            {
                                                                sourceAccountNo_Local    = Currency_Row["RTGS_Acc_C"].ToString().Trim();
                                                                sourceAccountNo_OG_Local = Currency_Row["RTGS_Acc_C"].ToString().Trim();
                                                            }
                                                                
                                                            if (TrxnSource_C == "Mitigated")
                                                            {
                                                                sourceAccountNo_Local    = Currency_Row["RTGS_Suspense_Acc_C"].ToString().Trim();
                                                                sourceAccountNo_OG_Local = Currency_Row["RTGS_Suspense_Acc_C"].ToString().Trim();
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        AccountErrorsFound = true;
                                                        Display_Info       = string.Format("{0} : Not Processed Account Currency {1} is NOT in the permissible List. ", Reference_C, BranchSearch.CCY);
                                                        Inward_Str         = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Account Currency {2} is not Allowed for Posting.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, BranchSearch.CCY, Num_Retry_Config);
                                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                                    }
                                                }
                                                else
                                                {
                                                    AccountErrorsFound = true;
                                                    Display_Info       = string.Format("{0} : Not Processed Account Currency {1} is NOT in the permissible List. ", Reference_C, BranchSearch.CCY);
                                                    Inward_Str         = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Account Currency {2} is not Allowed for Posting.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, BranchSearch.CCY, Num_Retry_Config);
                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                                }
                                            }
                                        }
                                    }

                                    // Now Check if the account Number does not have flags
                                    destination_CustNo        = "";
                                    destinationAccount_Branch = "";
                                    if (destinationAccount_Local_New.Length == 17)
                                    {
                                        destinationAccount_Branch = destinationAccount_Local_New.Substring(0, 3);
                                        destination_CustNo        = destinationAccount_Local_New.Substring(3, 14);
                                    }
                                    SQLStr = string.Format("SELECT COUNT(*) FROM {0}STTM_CUST_ACCOUNT WHERE (CUST_AC_NO = '{1}' AND BRANCH_CODE = '{2}') AND (AC_STAT_NO_CR = 'Y'  OR AC_STAT_DORMANT = 'Y' OR AC_STAT_FROZEN = 'Y' OR RECORD_STAT <> 'O' OR AUTH_STAT <> 'A' OR CAS_ACCOUNT <> 'N')", FCUBS_Schema, destination_CustNo, destinationAccount_Branch);
                                    string Flag_Records = OracleHelper.GetTable(SQLStr).Rows[0][0].ToString();
                                    if (Flag_Records != "0")
                                    {
                                        AccountErrorsFound = true;
                                        Display_Info       = string.Format("{0} : Not Processed. Account number {1} has Posting Flags. ", Reference_C, BranchSearch.CUST_AC_NO);
                                        Inward_Str         = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Account Number {2} has Flags.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, destinationAccount_Local_New.Trim(), Num_Retry_Config);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                    }

                                    if (AccountErrorsFound == false)
                                    {
                                        FCUBS_Result = fn_Post_Incoming_To_FCUBS_FT("IAT", tokenId_Local, "26371777", sourceAccountNo_Local, destinationAccount_Local_New, sourceReference_Local, paymentAmount_Local, SourceTrxnID_Local, "D", Trxn_Narr_Local, Current_Trxn_Local, "", destinationAccount_OG_Local, "FCUBSFCUBS", "CREDITPUSH", Reference_C, sourceReference_Local, Trn_OIR_C, Remitter_Ac, BYORDOF2, BYORDOF3, BYORDOF4, BYORDOF5, ULT_BENEF2, ULT_BENEF3, ULT_BENEF4, ULT_BENEF5, PMTDET1, PMTDET2, PMTDET3, PMTDET4, Curr_Base_YN,Curr_SwitchCode_C,BranchSearch.CCY);
             
                                        if (FCUBS_Result.DE_Result == "SUCCESS")
                                        {
                                            Inward_Str = "";
                                            Display_Info = string.Format("{0} : Successfully Processsed ", Reference_C);
                                            if (TrxnSource_C == "Main")
                                            {
                                                Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Posted_B = '1', XML_File_C           = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Core_Reference_C = '{3}' WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result, FCUBS_Result.DE_Core_Ref);
                                            }
                                            if (TrxnSource_C == "Mitigated")
                                            {
                                                Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Posted_B = '1', Mitigated_XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Core_Reference_C = '{3}' WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result, FCUBS_Result.DE_Core_Ref);
                                            }
                                            if (Inward_Str != "")
                                            {
                                                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                            }
                                        }
                                        else
                                        {
                                            if (FCUBS_Result.DE_Result_Desc.Contains("Duplicate External Reference Number") == true)
                                            {
                                                Inward_Str   = "";
                                                Display_Info = string.Format("{0} : Successfully Processsed ", Reference_C);
                                                if (TrxnSource_C == "Main")
                                                {
                                                    Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Posted_B = '1', XML_File_C = '{1}'          , XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Core_Reference_C = '{3}' WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result, FCUBS_Result.DE_Core_Ref);
                                                }
                                                if (TrxnSource_C == "Mitigated")
                                                {
                                                    Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Posted_B = '1', Mitigated_XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Core_Reference_C = '{3}' WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result, FCUBS_Result.DE_Core_Ref);
                                                }
                                                if (Inward_Str != "")
                                                {
                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                                }
                                            }
                                            else
                                            {
                                                if ((FCUBS_Result.DE_Result_Desc.Contains("Possible message id duplication") == true) || (FCUBS_Result.DE_Result_Desc.Contains("Record already exists") == true))
                                                {
                                                    Inward_Str   = "";
                                                    Display_Info = string.Format("{0} : Not Processed ({1}.  Retrying) ", Reference_C, FCUBS_Result.DE_Result_Desc);
                                                    if (TrxnSource_C == "Main")
                                                    {
                                                        Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = 0, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result_Desc);
                                                    }
                                                    if (TrxnSource_C == "Mitigated")
                                                    {
                                                        Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Mitigated_Num_Retries = 0, Mitigated_XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result_Desc);
                                                    }
                                                    if (Inward_Str != "")
                                                    {
                                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                                    }
                                                }
                                                else
                                                {
                                                    Display_Info = string.Format("{0} : Not Processed ({1}.) ", Reference_C, FCUBS_Result.DE_Result_Desc);
                                                    if (TrxnSource_C == "Main")
                                                    {
                                                        Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = Num_Retry_N+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result_Desc);
                                                    }
                                                    else
                                                    {
                                                        Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Mitigated_Num_Retries = Mitigated_Num_Retries+1, Mitigated_XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='{2}', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result_Desc);
                                                    }
                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    Display_Info = string.Format("{0} : Not Processed . (Invalid Account Number. Length cannot be {1}) ", Reference_C, destinationAccount_Local.Trim().Length);
                                    Inward_Str   = string.Format("UPDATE tbl_RTGSIn_Trxn SET Status_C = '1', Num_Retry_N = {3}+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Status_Desc ='Invalid Account Number. Length cannot be {2}.', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, destinationAccount_Local.Trim().Length, Num_Retry_Config);
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                }
                                string Str_to_display = string.Format("STP Incoming : {0}. {2}{0}", DateTime.Now.ToString(), (char)13, Display_Info);
                            }
                        }
                    }
                }
                return "OK";
            }
            catch (Exception ex)
            {
                if (TrxnSource_C == "Main")
                {
                    Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET XML_File_C = '{0}',  Batch_No_C = '{1}' WHERE Inst_No = '{2}'", Current_Trxn_Local, Current_Trn_Batch, tokenId_Local);
                }
                else
                {
                    Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET Mitigated_XML_File_C = '{0}',  Mitigated_Batch_No_C = '{1}' WHERE Inst_No = '{2}'", Current_Trxn_Local, Current_Trn_Batch, tokenId_Local);
                }
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);

                string Err_String = ex.StackTrace.ToString();
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                Inward_Str       = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Update Detbit Accounts", Err_Date2);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);

                return "Failed";
            }
        }

        FCUBS_PostingResult fn_Post_Incoming_To_FCUBS_FT(string paymentType, string tokenId, string telephoneNo, string sourceAccountNo, string destinationAccount, string sourceReference, double paymentAmount, string SourceTrxnID, string DRCR_Flag, string Trxn_Narr, string Current_Trxn, string sourceAccountNo_OG, string destinationAccount_OG, string Source_Types, string sourceMethod, string Reference_C, string sourceRef, string TargetRef, string fn_Originator_Acc, string fn_BYORDOF2, string fn_BYORDOF3, string fn_BYORDOF4, string fn_BYORDOF5, string fn_ULTBEN2, string fn_ULTBEN3, string fn_ULTBEN4, string fn_ULTBEN5, string fn_PMTDET1, string fn_PMTDET2, string fn_PMTDET3, string fn_PMTDET4, bool IsLocalCurrency, string SourceCurrency, string TargetCurrency)
        {
            Hashtable           m_hashtable = new Hashtable();
            FCUBS_PostingResult Tmp_Result  = new FCUBS_PostingResult();
            Tmp_Result.IntialiseResults();
            string    Current_Batch = "";
            DataTable SysRec        = new DataTable();
            string    SQLStr        = "";
            string    TXNMAIN_Code  = "";
        
            try
            {
                string SourceAccNo     = "";
                string SourceAccBranch = "";
                string TargetAccNo     = "";
                string TargetAccBranch = "";
                double AccLength       = 0;
                string Trn_EntryXML    = "";
                string TrnPostingStr   = "";
                string DE_Result       = "";
                string DE_Result_Desc  = "";
                string DE_Core_Ref     = "";
                string Warning_Str     = "";
                string Posting_Result  = "NOT SUCCESSFUL";
                ReversalPostingDetail_Obj RevObj_Charge = new ReversalPostingDetail_Obj();

                if (sourceAccountNo.Length > 3)
                {
                    AccLength       = sourceAccountNo.Length;
                    SourceAccBranch = sourceAccountNo.Substring(0, 3).Trim();
                    SourceAccNo     = sourceAccountNo.Substring(3, sourceAccountNo.Length - 3).Trim();
                }

                if (destinationAccount.Length > 3)
                {
                    AccLength       = destinationAccount.Length;
                    TargetAccBranch = destinationAccount.Substring(0, 3).Trim();
                    TargetAccNo     = destinationAccount.Substring(3, destinationAccount.Length - 3).Trim();
                }

                Current_Batch = GetBatchNumber();
                SysRec        = new DataTable();
                SQLStr        = string.Format("SELECT Parameter_Value, Parameter_ID  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('TXNMAIN_Code') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                SysRec        = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                if (SysRec.Rows.Count > 0)
                {
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "TXNMAIN_Code".ToUpper()) TXNMAIN_Code = param_Row["Parameter_Value"].ToString();
                    }
                }

                Trn_EntryXML = createTransaction_FT_XML_Manu(Current_Trxn, Current_Batch, SourceAccNo, SourceAccBranch, paymentAmount, Trxn_Narr, TargetAccNo, TargetAccBranch, DRCR_Flag, TXNMAIN_Code, paymentType, RevObj_Charge, SourceCurrency,TargetCurrency, Reference_C, sourceRef, TargetRef, fn_Originator_Acc, fn_BYORDOF2, fn_BYORDOF3, fn_BYORDOF4, fn_BYORDOF5, fn_ULTBEN2, fn_ULTBEN3, fn_ULTBEN4, fn_ULTBEN5, fn_PMTDET1, fn_PMTDET2, fn_PMTDET3, fn_PMTDET4, IsLocalCurrency);

                e_Verify_BACK_OFFICE_Service_Interface.FCUBSFTService.FCUBSFTServiceSEIClient scFT = new e_Verify_BACK_OFFICE_Service_Interface.FCUBSFTService.FCUBSFTServiceSEIClient();
                e_Verify_BACK_OFFICE_Service_Interface.FCUBSRTService.FCUBSRTServiceSEIClient scRT = new e_Verify_BACK_OFFICE_Service_Interface.FCUBSRTService.FCUBSRTServiceSEIClient();
                try
                {
                    //TrnPostingStr = scFT.CreateFTContract(Trn_EntryXML).ToString();
                    //if (IsLocalCurrency)
                    {
                        TrnPostingStr = scFT.CreateFTContract(Trn_EntryXML).ToString();
                    }
                    //else
                    //{
                    //    TrnPostingStr = scRT.CreateTransaction(Trn_EntryXML).ToString();
                    //}
                }
                catch (Exception Sc_CreateContact_Except)
                {
                    string Error_Text         = System.Text.RegularExpressions.Regex.Replace(string.Format("{0} - {1}", Sc_CreateContact_Except.ToString(), Sc_CreateContact_Except.StackTrace.ToString()), @"\s{2,}", " ").Replace("\n", "");
                    string Err_Narr           = LogError("fn_Post_Incoming_To_FCUBS_FT 1", Error_Text, tokenId);
                    Tmp_Result.DE_Result_Desc = Error_Text;
                }

                TrnPostingStr = System.Text.RegularExpressions.Regex.Replace(TrnPostingStr, @"\s{2,}", " ").Replace("\n", "");
                // Log The Response
                m_hashtable = new Hashtable();
                m_hashtable.Add("XML_Date_D"  , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                m_hashtable.Add("XML_String_C", TrnPostingStr);
                m_hashtable.Add("XML_Ref_C"   , Current_Trxn);
                m_hashtable.Add("XML_Type_C"  , "Response");
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_XML_Log", m_hashtable);

                string[] Tag_Separator = { "BCN" };
                Tag_Separator.SetValue("<FCUBS_HEADER>", 0);
                string[] TrnPostingStr_Parms = TrnPostingStr.Split(Tag_Separator, StringSplitOptions.None);
                int TrnPostingStr_Len  = 0;
                TrnPostingStr_Len      = TrnPostingStr_Parms.Length;
                if (TrnPostingStr_Len > 1)
                {
                    TrnPostingStr = string.Format("{0}{1}", "<FCUBS_RES_ENV><FCUBS_HEADER>", TrnPostingStr_Parms[1]);
                    try
                    {
                        XmlDocument xml = new XmlDocument();
                        XmlNodeList m_nodelist;

                        // Load the xml document
                        xml.LoadXml(TrnPostingStr);

                        if (xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/EDESC") != null)
                        {
                            DE_Result = "FAILURE";
                            DE_Result_Desc = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/EDESC").InnerText;
                        }
                        if (xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_HEADER/MSGSTAT") != null)
                        {
                            DE_Result = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_HEADER/MSGSTAT").InnerText;
                        }

                        Tmp_Result.DE_Result = DE_Result;
                        if (DE_Result == "FAILURE")
                        {
                            DE_Result_Desc            = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/EDESC").InnerText;
                            Tmp_Result.DE_Result_Desc = DE_Result_Desc;
                            string MainError_str      = LogError("Trx Posting Error", string.Format("{0} {1} {2} {3} Error : {4}", paymentType, sourceAccountNo, TargetAccNo, paymentAmount, Posting_Result), tokenId);
                        }
                        else
                        {
                            // Transaction is Successful. Record it and  Now Post Charges
                            if (DE_Result == "SUCCESS")
                            {
                                Warning_Str = Utilities.Get_TagValueWithEnd(TrnPostingStr, "<FCUBS_WARNING_RESP>", "</FCUBS_WARNING_RESP>", true);
                                DE_Core_Ref = Utilities.Get_TagValueWithEnd(TrnPostingStr, "<FCCREF>", "</FCCREF>", true);
                                if ((Warning_Str.Contains("Contract Successfully Saved")) || (Warning_Str.Contains("Contract Successfully Saved and Authorized")))
                                {
                                    DE_Result_Desc = "Contract Successfully Saved";
                                }
                                //DE_Result_Desc = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/Multi-Offset-Master/Mlt-Offset-Detail/FCCREF").InnerText;
                                Tmp_Result.DE_Result_Desc = DE_Result_Desc;
                                Tmp_Result.DE_Core_Ref    = DE_Core_Ref;
                                recordTransaction(paymentType, tokenId, telephoneNo, destinationAccount, sourceAccountNo, sourceReference, Current_Batch, Current_Trxn, DE_Result, paymentAmount, "1", "0", "", "", "SUCCESS", "", "", SourceTrxnID, sourceAccountNo_OG, destinationAccount_OG, Source_Types, sourceMethod, Warning_Str);
                            }
                        }
                    }
                    catch (Exception PostOracleChg_Err)
                    {
                        string Error_Text = System.Text.RegularExpressions.Regex.Replace(string.Format("{0} - {1}", PostOracleChg_Err.ToString(), PostOracleChg_Err.StackTrace.ToString()), @"\s{2,}", " ").Replace("\n", "");
                        string Err_Narr   = LogError("fn_Post_Incoming_To_FCUBS_FT 2", Error_Text, tokenId);
                        Tmp_Result.DE_Result_Desc = Error_Text;
                    }
                }
            }
            catch (XmlException ChargePosting_Error)
            {
                string Error_Text1 = System.Text.RegularExpressions.Regex.Replace(string.Format("{0} - {1}", ChargePosting_Error.ToString(), ChargePosting_Error.StackTrace.ToString()), @"\s{2,}", " ").Replace("\n", "");
                string Err_Narr    = LogError("fn_Post_Incoming_To_FCUBS_FT 3", Error_Text1, tokenId);
                Tmp_Result.DE_Result_Desc = Error_Text1;
            }
            finally
            {
                // Nothing to do
            }
            return Tmp_Result;
        }


        string recordTransaction(string TType, string tokenId, string telephoneNo, string sourceAccountNo, string destinationAccount, string sourceReference, string batchID, string trnID, string ServiceRef, double paymentAmount, string posted, string reversed, string reversedID, string reversal_TrnID, string response, string ErrorCode, string ErrorDesc, string srcTrn_ID, string sourceAccountNo_OG_C, string destinationAccount_OG_C, string SourceType_C, string src_Method, string Warnings_C)
        {
            try
            {
                StringBuilder builder         = new StringBuilder();
                string        trnTime         = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss:ff"));
                string        storedProcedure = "usp_RecordPayment";
                List<SqlParameter> p = new List<SqlParameter>();

                p.Add(new SqlParameter("Ttype"                  , TType));
                p.Add(new SqlParameter("tokenId"                , tokenId));
                p.Add(new SqlParameter("telephoneNo"            , telephoneNo));
                p.Add(new SqlParameter("sourceAccountNo"        , sourceAccountNo));
                p.Add(new SqlParameter("destinationAccount"     , destinationAccount));
                //p.Add(new SqlParameter("paymentAmount", string.Format("'{0:0.00}'", paymentAmount)));
                p.Add(new SqlParameter("paymentAmount"          , paymentAmount));
                p.Add(new SqlParameter("Posted_B"               , posted));
                p.Add(new SqlParameter("Reversed_B"             , reversed));
                p.Add(new SqlParameter("Reversed_ID"            , reversedID));
                p.Add(new SqlParameter("Reversal_Trn_ID"        , reversal_TrnID));
                p.Add(new SqlParameter("trnReference"           , ServiceRef));
                p.Add(new SqlParameter("sourceReference"        , sourceReference));
                p.Add(new SqlParameter("Batch_ID_C"             , batchID));
                p.Add(new SqlParameter("Trn_ID_C"               , trnID));
                p.Add(new SqlParameter("Trn_Response_C"         , response));
                p.Add(new SqlParameter("Trn_Date_D"             , trnTime));
                p.Add(new SqlParameter("Err_Code_C"             , ErrorCode));
                p.Add(new SqlParameter("Err_Desc_C"             , ErrorDesc));
                p.Add(new SqlParameter("Source_TrnID"           , srcTrn_ID));
                p.Add(new SqlParameter("sourceAccountNo_OG_C"   , sourceAccountNo_OG_C));
                p.Add(new SqlParameter("destinationAccount_OG_C", destinationAccount_OG_C));
                p.Add(new SqlParameter("SourceType_C"           , SourceType_C));
                p.Add(new SqlParameter("SourceMethod_C"         , src_Method));
                p.Add(new SqlParameter("Warnings_C"             , Warnings_C));
                //p.Add(new SqlParameter("Core_Ref", Core_Ref));

                string result = SqlHelper.ExecuteScalar(storedProcedure, p.ToArray());

                if (result.Trim().Length < 10)
                {
                    string ErrorSaveString  = string.Format("exec [dbo].usp_RecordPayment @Ttype = '{0}', @tokenId = '{1}', @telephoneNo = '{2}', @sourceAccountNo = '{3}', @destinationAccount = '{4}', @paymentAmount = '{5:0.00}', @Posted_B = '{6}', @Reversed_B = '{7}', @Reversed_ID = '{8}', @Reversal_Trn_ID = '{9}', @trnReference = '{10}', @sourceReference = '{11}', @Batch_ID_C = '{12}', @Trn_ID_C = '{13}', @Trn_Response_C = '{14}', @Trn_Date_D = '{15}', @Err_Code_C = '{16}', @Err_Desc_C = '{17}', @Source_TrnID = '{18}', @sourceAccountNo_OG_C = '{19}', @destinationAccount_OG_C = '{20}', @SourceType_C = '{21}', @SourceMethod_C = '{22}', @Warnings_C = '{23}'", TType, tokenId, telephoneNo, sourceAccountNo, destinationAccount, paymentAmount, posted, reversed, reversedID, reversal_TrnID, ServiceRef, sourceReference, batchID, trnID, response, trnTime, ErrorCode, ErrorDesc, srcTrn_ID, sourceAccountNo_OG_C, destinationAccount_OG_C, SourceType_C, src_Method, Warnings_C);
                    result                  = SqlHelper.RunSqlScalar(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),ErrorSaveString);
                    string ErrlorLogsresult = LogError("usp_RecordPayment", ErrorSaveString, tokenId);
                }
                return result;
            }
            catch (XmlException TrxnError)
            {
                string Error_Text1 = System.Text.RegularExpressions.Regex.Replace(string.Format("{0} - {1}", TrxnError.ToString(), TrxnError.StackTrace.ToString()), @"\s{2,}", " ").Replace("\n", "");
                string Err_Narr    = LogError("Record Transaction", Error_Text1, tokenId);
                return TrxnError.ToString();
            }
        }

        string fn_createTransactionXML_WithForex(string localCurrent_Trxn, string localCurrent_Batch, string localSourceAccNo, string localSourceAccBranch, double localpaymentAmount, string localTrxn_Narr, string localTargetAccNo, string localTargetAccBranch, string DR_CR_Flag, string localTrnType, string TransferType, ReversalPostingDetail_Obj RevObjectDet, string source_Curr_C, string target_Curr_C, Exchange_Rate RateObj, double TokenID)
        {
            try
            {
                // Get the  Posting Branch
                string postingBranch = "";
                bool   IsReversal    = false;
                string SOURCE_Tmp    = "";
                string Trn_XML       = "";
                string ACCOUNT_C     = "";
                string DRCR_C        = "";
                string BRN_1         = "";
                double AMT           = 0.00;
                string ADDL_TXT      = "";
                string ACCOUNT       = "";
                double AMT_2         = 0.00;
                string BRN_2         = "";
                string BRANCH_CODE   = "";
                double DR_CHK_TOTAL  = 0.00;
                double CR_CHK_TOTAL  = 0.00;
                string BRANCH_1      = "";
                string CCY_1         = "";
                double EXRATE        = 0.0000;
                double LCYAMT        = 0.00;
                double TrnAMNT       = localpaymentAmount;
                string TrnCCY_2      = "";
                string busDate       = "";
                bool   USE_TEST_BUSINESS_DATE = false;
                string TEST_BUSINESS_DATE = "";
                string FX_RATE_         = "";
                string RT_SOURCE        = "";
                string RT_SOURCE_USERID = "";
                string RT_DESTINATION   = "";
                string RT_PRODUCT       = "";
                string DE_SOURCE        = "";
                string DE_SOURCE_USERID = "";
                string LocaCurrencyCode = "";

                DataTable paramTable = new DataTable();
                string    SQL_Str    = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('USE_TEST_BUSINESS_DATE','TEST_BUSINESS_DATE','RT_SOURCE','RT_SOURCE_USERID','RT_DESTINATION','RT_PRODUCT','DE_SOURCE','DE_SOURCE_USERID','{1}') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1 UNION SELECT TOP 1 Curr_SwitchCode_C AS Parameter_Value, 'Local_Currency' AS Parameter_ID FROM tbl_Currencies WITH (NOLOCK) WHERE Curr_Base_YN = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, string.Format("FX_RATE_{0}_{1}", source_Curr_C, target_Curr_C).ToUpper());
                paramTable           = SqlHelper.GetTable(ConfigurationManager.ConnectionStrings["BankingWebService.Properties.Settings.SQL_DB"].ConnectionString, SQL_Str);
                if (paramTable.Rows.Count > 0)
                {
                    foreach (DataRow param_Row in paramTable.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "USE_TEST_BUSINESS_DATE".ToUpper()) USE_TEST_BUSINESS_DATE  = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "TEST_BUSINESS_DATE".ToUpper())     TEST_BUSINESS_DATE      = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == string.Format("FX_RATE_{0}_{1}",    source_Curr_C, target_Curr_C).ToUpper()) FX_RATE_ = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_SOURCE")                        RT_SOURCE               = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_SOURCE_USERID")                 RT_SOURCE_USERID        = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_DESTINATION")                   RT_DESTINATION          = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_PRODUCT")                       RT_PRODUCT              = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "DE_SOURCE")                        DE_SOURCE               = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "DE_SOURCE_USERID")                 DE_SOURCE_USERID        = param_Row["Parameter_Value"].ToString().ToUpper();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "LocaCurrencyCode".ToUpper())       LocaCurrencyCode        = param_Row["Parameter_Value"].ToString().ToUpper();
                    }
                }

                if (TransferType == "REV")
                {
                    IsReversal    = true;
                    postingBranch = RevObjectDet.BRANCH;
                    ACCOUNT_C     = RevObjectDet.ACCOUNT1;
                    DRCR_C        = RevObjectDet.DRCR;
                    BRN_1         = RevObjectDet.BRN1;
                    AMT           = RevObjectDet.AMT1 * (-1);
                    ADDL_TXT      = RevObjectDet.ADDL_TXT;
                    ACCOUNT       = RevObjectDet.ACCOUNT2;
                    AMT_2         = RevObjectDet.AMT2 * (-1);
                    BRN_2         = RevObjectDet.BRN2;
                    BRANCH_CODE   = RevObjectDet.BRANCH_CODE;
                    DR_CHK_TOTAL  = RevObjectDet.DR_CHK_TOTAL * (-1);
                    CR_CHK_TOTAL  = RevObjectDet.CR_CHK_TOTAL * (-1);
                    BRANCH_1      = RevObjectDet.BRANCH1;
                    CCY_1         = RevObjectDet.CCY;
                }
                else
                {
                    if ((TransferType == "IAT") || (TransferType == "CHG") || (TransferType == "AGENT_DEPOSIT"))
                    {
                        postingBranch = localSourceAccBranch;
                    }
                    else
                    {
                        postingBranch = GetPostingBranch();
                    }
                    ACCOUNT_C    = localSourceAccNo;
                    DRCR_C       = DR_CR_Flag;
                    BRN_1        = localSourceAccBranch;
                    AMT          = localpaymentAmount;
                    ADDL_TXT     = localTrxn_Narr;
                    ACCOUNT      = localTargetAccNo;
                    AMT_2        = localpaymentAmount;
                    BRN_2        = localTargetAccBranch;
                    BRANCH_CODE  = postingBranch;
                    DR_CHK_TOTAL = localpaymentAmount;
                    CR_CHK_TOTAL = localpaymentAmount;
                    BRANCH_1     = postingBranch;
                    CCY_1        = source_Curr_C;
                }
                if ((source_Curr_C != LocaCurrencyCode) || (target_Curr_C != LocaCurrencyCode))
                {
                    EXRATE       = RateObj.Mid_Rate;
                    AMT          = RateObj.Amount_FromCurr;
                    DR_CHK_TOTAL = RateObj.Amount_ToCurr;
                    CR_CHK_TOTAL = RateObj.Amount_ToCurr;
                    CCY_1        = RateObj.From_Curr;

                    ACCOUNT_C = localSourceAccNo;
                    BRN_1     = localSourceAccBranch;
                    ACCOUNT   = localTargetAccNo;
                    BRN_2     = localTargetAccBranch;
                    CCY_1     = source_Curr_C;
                    TrnCCY_2  = target_Curr_C;

                    //if (source_Curr_C == Properties.Settings.Default.Local_Currency)
                    //               {
                    //                   ACCOUNT_C = localSourceAccNo;
                    //                   BRN_1     = localSourceAccBranch;
                    //                   ACCOUNT   = localTargetAccNo;
                    //                   BRN_2     = localTargetAccBranch;
                    //                   CCY_1     = source_Curr_C;
                    //                   TrnCCY_2  = target_Curr_C;
                    //               }
                    //               else
                    //               {
                    //                   ACCOUNT_C = localSourceAccNo;
                    //                   BRN_1     = localSourceAccBranch;
                    //                   ACCOUNT   = localTargetAccNo;
                    //                   BRN_2     = localTargetAccBranch;
                    //                   CCY_1     = source_Curr_C;
                    //                   TrnCCY_2  = target_Curr_C;
                    //               }

                    if (USE_TEST_BUSINESS_DATE)
                    {
                        busDate = TEST_BUSINESS_DATE;
                    }
                    else
                    {
                        busDate = GetFCUB_Businessdate(BRN_1);
                        if (busDate.Length == 8)
                        {
                            busDate = string.Format("{0}-{1}{2}", busDate.Substring(0, 4), busDate.Substring(4, 2), busDate.Substring(6, 2));
                        }
                    }

                    paramTable = new DataTable();
                    SQL_Str    = string.Format("SELECT Parameter_Value, Parameter_ID, Parameter_Authorised_Date FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('{1}') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, string.Format("FX_RATE_{0}_{1}", CCY_1, TrnCCY_2));
                    paramTable = SqlHelper.GetTable(ConfigurationManager.ConnectionStrings["BankingWebService.Properties.Settings.SQL_DB"].ConnectionString, SQL_Str);
                    if (paramTable.Rows.Count > 0)
                    {
                        foreach (DataRow param_Row in paramTable.Rows)
                        {
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == string.Format("FX_RATE_{0}_{1}", CCY_1, TrnCCY_2)) FX_RATE_ = param_Row["Parameter_Value"].ToString().ToUpper();
                        }
                    }
                    
                    // New Framework 
                    Trn_XML += string.Format("<FCUBS_REQ_ENV>");
                    Trn_XML += string.Format("     <FCUBS_HEADER>");
                    Trn_XML += string.Format("            <SOURCE>{0}</SOURCE>", RT_SOURCE);
                    Trn_XML += string.Format("            <UBSCOMP>FCUBS</UBSCOMP>");
                    Trn_XML += string.Format("            <MSGID>{0}</MSGID>", localCurrent_Trxn);             // Must be Unique (max 14 Characters)
                    Trn_XML += string.Format("            <USERID>{0}</USERID>", RT_SOURCE_USERID);
                    Trn_XML += string.Format("            <BRANCH>{0}</BRANCH>", postingBranch);                 // Transaction Branch. 
                    Trn_XML += string.Format("            <MODULEID/>");
                    Trn_XML += string.Format("            <SERVICE>FCUBSRTService</SERVICE>");
                    Trn_XML += string.Format("            <OPERATION>CreateTransaction</OPERATION>");
                    Trn_XML += string.Format("            <SOURCE_OPERATION>{0}</SOURCE_OPERATION>", RT_SOURCE);
                    Trn_XML += string.Format("            <SOURCE_USERID>{0}</SOURCE_USERID>", RT_SOURCE_USERID);
                    Trn_XML += string.Format("            <DESTINATION>{0}</DESTINATION>", RT_DESTINATION);
                    //Trn_XML += string.Format("            <FUNCTIONID>DEGRTTLR</FUNCTIONID>");
                    //Trn_XML += string.Format("            <ACTION>NEW</ACTION>");
                    Trn_XML += string.Format("     </FCUBS_HEADER>");
                    Trn_XML += string.Format("     <FCUBS_BODY>");
                    Trn_XML += string.Format("           <Transaction-Details>");
                    Trn_XML += string.Format("           	    <PRD>{0}</PRD>", RT_PRODUCT);


                    Trn_XML += string.Format("           	    <BRN>{0}</BRN>", localSourceAccBranch);
                    Trn_XML += string.Format("           	    <TXNACC>{0}</TXNACC>", localSourceAccNo);           // Transaction Account to be passed				     
                    Trn_XML += string.Format("           	    <TXNCCY>{0}</TXNCCY>", source_Curr_C);              // Transaction account currency ( local currency )			      
                    Trn_XML += string.Format("           	    <TXNBRN>{0}</TXNBRN>", localSourceAccBranch);       // Transaction acc branch	
                    Trn_XML += string.Format("          	    <TXNAMT></TXNAMT>");                                // Pass the transaction amount as null. Since you are going to pass the FCY amount, system will derive the TXNAMT based on the exchange rate

                    //               Trn_XML += string.Format("           	    <BRN>{0}</BRN>", BRN_1);
                    //               Trn_XML += string.Format("           	    <TXNACC>{0}</TXNACC>", ACCOUNT_C);           // Transaction Account to be passed				     
                    //               Trn_XML += string.Format("           	    <TXNCCY>{0}</TXNCCY>", CCY_1);               // Transaction account currency ( local currency )			      
                    //               Trn_XML += string.Format("           	    <TXNBRN>{0}</TXNBRN>", BRN_1);               // Transaction acc branch	

                    //               Trn_XML += string.Format("           	    <BRN>{0}</BRN>", BRN_1);
                    //               Trn_XML += string.Format("           	    <TXNACC>{0}</TXNACC>", ACCOUNT_C);           // Transaction Account to be passed				     
                    //               Trn_XML += string.Format("           	    <TXNCCY>{0}</TXNCCY>", CCY_1);               // Transaction account currency ( local currency )			      
                    //               Trn_XML += string.Format("           	    <TXNBRN>{0}</TXNBRN>", BRN_1);               // Transaction acc branch	
                    //Trn_XML += string.Format("          	    <TXNAMT></TXNAMT>");

                    //if (source_Curr_C == Properties.Settings.Default.Local_Currency)
                    //               {
                    //                   Trn_XML += string.Format("          	    <TXNAMT></TXNAMT>");                             // Pass the transaction amount as null. Since you are going to pass the FCY amount, system will derive the TXNAMT based on the exchange rate
                    //               }
                    //               else
                    //               {
                    //                   Trn_XML += string.Format("          	    <TXNAMT>{0}</TXNAMT>", TrnAMNT);                 // Pass the transaction amount as null. Since you are going to pass the FCY amount, system will derive the TXNAMT based on the exchange rate
                    //               }

                    Trn_XML += string.Format("                  <OFFSETCCY>{0}</OFFSETCCY>", target_Curr_C);            // Offset currency ( FCY currency )				 
                    Trn_XML += string.Format("                  <OFFSETACC>{0}</OFFSETACC>", localTargetAccNo);         // Offset Account		
                    Trn_XML += string.Format("           	    <OFFSETBRN>{0}</OFFSETBRN>", localTargetAccBranch);     // Offset account branch  
                    Trn_XML += string.Format("           	    <OFFSETAMT>{0}</OFFSETAMT>", localpaymentAmount);       // Offset amount ( amount in FCY )  
                    Trn_XML += string.Format("           	    <XRATE></XRATE>");                                      // Exchange rate ( Pass this value as null, system will derive the exchange rate )

                    //if (source_Curr_C == Properties.Settings.Default.Local_Currency)
                    //{
                    //    Trn_XML += string.Format("           	    <OFFSETAMT>{0}</OFFSETAMT>", (IsReversal) ? TrnAMNT * (-1) :  TrnAMNT );                  // Offset amount ( amount in FCY )    
                    //    Trn_XML += string.Format("           	    <XRATE></XRATE>");                     // Exchange rate ( Pass this value as null, system will derive the exchange rate )
                    //}
                    //else
                    //{
                    //    Trn_XML += string.Format("           	    <OFFSETAMT>{0}</OFFSETAMT>", (IsReversal) ? TrnAMNT * (-1) : Convert.ToDouble(string.Format("{0:0.00}", TrnAMNT * Convert.ToDouble(RateObj.Buy_Rate))));                  // Offset amount ( amount in FCY )    
                    //    Trn_XML += string.Format("           	    <XRATE>{0}</XRATE>", string.Format("{0:0.0000000}", 1 / Convert.ToDouble(RateObj.Buy_Rate)));                     // Exchange rate ( Pass this value as null, system will derive the exchange rate )
                    //}
                    Trn_XML += string.Format("           	    <TXNDATE>{0}</TXNDATE>", busDate);
                    Trn_XML += string.Format("                  <Mis-Details>");
                    Trn_XML += string.Format("                 	    <BRANCH>{0}</BRANCH>", postingBranch);

                    Trn_XML += string.Format("                       <TXNMIS1>MAPUTO</TXNMIS1>");
                    Trn_XML += string.Format("                       <TXNMIS2>NOTAPPLIC</TXNMIS2>");
                    Trn_XML += string.Format("                       <TXNMIS3></TXNMIS3>");
                    Trn_XML += string.Format("                       <TXNMIS4>NOTAPPLIC</TXNMIS4>");
                    Trn_XML += string.Format("                       <TXNMIS5>NOTAPPLIC</TXNMIS5>");
                    Trn_XML += string.Format("                       <TXNMIS6></TXNMIS6>");
                    Trn_XML += string.Format("                       <TXNMIS1LBL1>BRANCHES</TXNMIS1LBL1>");
                    Trn_XML += string.Format("         		         <TXNMIS2LBL2>PURPOSE</TXNMIS2LBL2>");
                    Trn_XML += string.Format("         		         <TXNMIS3LBL3>FOREX_TXN</TXNMIS3LBL3>");
                    Trn_XML += string.Format("         		         <TXNMIS4LBL4>LINEOFBUS</TXNMIS4LBL4>");
                    Trn_XML += string.Format("         		         <TXNMIS5LBL5>CLAS_LOAN</TXNMIS5LBL5>");
                    Trn_XML += string.Format("         		         <TXNMIS6LBL6>COSTCENTR</TXNMIS6LBL6>");

                    //Trn_XML += string.Format("                       <TXNMIS1>{0}</TXNMIS1>", (IsReversal) ? "REV-" + RevObjectDet.ADDL_TXT : localTrxn_Narr);
                    //Trn_XML += string.Format("                       <TXNMIS2></TXNMIS2>");
                    //Trn_XML += string.Format("                       <TXNMIS3></TXNMIS3>");
                    //Trn_XML += string.Format("                       <TXNMIS4></TXNMIS4>");
                    //Trn_XML += string.Format("                       <TXNMIS5></TXNMIS5>");
                    //Trn_XML += string.Format("                       <TXNMIS6></TXNMIS6>");
                    //Trn_XML += string.Format("                       <TXNMIS1LBL1>{0}</TXNMIS1LBL1>", (IsReversal) ? "REV-" + RevObjectDet.ADDL_TXT : localTrxn_Narr);
                    //Trn_XML += string.Format("         		         <TXNMIS2LBL2></TXNMIS2LBL2>");
                    //Trn_XML += string.Format("         		         <TXNMIS3LBL3>FOREX_TXN</TXNMIS3LBL3>");
                    //Trn_XML += string.Format("         		         <TXNMIS4LBL4></TXNMIS4LBL4>");
                    //Trn_XML += string.Format("         		         <TXNMIS5LBL5></TXNMIS5LBL5>");
                    //Trn_XML += string.Format("         		         <TXNMIS6LBL6></TXNMIS6LBL6>");

                    Trn_XML += string.Format("                  </Mis-Details>");
                    Trn_XML += string.Format("           </Transaction-Details>");
                    Trn_XML += string.Format("     </FCUBS_BODY>");
                    Trn_XML += string.Format("</FCUBS_REQ_ENV>");
                }
                else
                {
                    Trn_XML += string.Format("<FCUBS_REQ_ENV>");
                    Trn_XML += string.Format("   <FCUBS_HEADER>");
                    Trn_XML += string.Format("       <SOURCE>{0}</SOURCE>", DE_SOURCE);
                    Trn_XML += string.Format("       <UBSCOMP>FCUBS</UBSCOMP>");
                    Trn_XML += string.Format("       <MSGID>{0}</MSGID>", localCurrent_Trxn);        // Must be Unique (max 14 Characters)
                    Trn_XML += string.Format("       <USERID>{0}</USERID>", DE_SOURCE_USERID);
                    Trn_XML += string.Format("       <BRANCH>{0}</BRANCH>", postingBranch);          // Transaction Branch. 
                    Trn_XML += string.Format("       <MODULEID>DE</MODULEID>");
                    Trn_XML += string.Format("       <SERVICE>FCUBSDEService</SERVICE>");
                    Trn_XML += string.Format("       <OPERATION>MultiNew</OPERATION>");
                    Trn_XML += string.Format("       <FUNCTIONID>DEDJRMLT</FUNCTIONID>");
                    Trn_XML += string.Format("       <ACTION>NEW</ACTION>");
                    Trn_XML += string.Format("   </FCUBS_HEADER>");
                    Trn_XML += string.Format("   <FCUBS_BODY>");
                    Trn_XML += string.Format("       <Multi-Offset-Master-IO>");
                    Trn_XML += string.Format("              <BATCHNO>{0}</BATCHNO>", localCurrent_Batch);    //  Must be Unique 4 Numeric Characters.
                    Trn_XML += string.Format("              <CURRNO>13</CURRNO>");
                    Trn_XML += string.Format("              <ACCOUNT>{0}</ACCOUNT>", (IsReversal) ? RevObjectDet.ACCOUNT1 : localSourceAccNo);      //  Customer Account to Debit
                    Trn_XML += string.Format("              <CCY>TZS</CCY>");                                //  To be made a Parameter for Forex Trxn
                    Trn_XML += string.Format("              <TXNMAIN>{0}</TXNMAIN>", localTrnType);
                    Trn_XML += string.Format("              <TXNOFFSET>{0}</TXNOFFSET>", localTrnType);
                    Trn_XML += string.Format("              <DRCR>{0}</DRCR>", (IsReversal) ? RevObjectDet.DRCR : DR_CR_Flag);                  //   Originally it was Debit - D
                    Trn_XML += string.Format("              <BRN>{0}</BRN>", (IsReversal) ? RevObjectDet.BRN1 : localSourceAccBranch);          //   Account Branch"
                    Trn_XML += string.Format("              <AMT>{0}</AMT>", (IsReversal) ? RevObjectDet.AMT1 * (-1) : localpaymentAmount);     //   Transaction Amount
                    Trn_XML += string.Format("              <RECSTAT>O</RECSTAT>");
                    Trn_XML += string.Format("              <AUTHSTAT>A</AUTHSTAT>");
                    Trn_XML += string.Format("              <ADDL_TXT>{0}</ADDL_TXT>", (IsReversal) ? "REV-" + RevObjectDet.ADDL_TXT : localTrxn_Narr);
                    Trn_XML += string.Format("              <Mlt-Offset-Detail>");
                    Trn_XML += string.Format("                     <ACCOUNT>{0}</ACCOUNT>", (IsReversal) ? RevObjectDet.ACCOUNT2 : localTargetAccNo);            //  Account to be credited Ecocash to Bank to Wallet
                    Trn_XML += string.Format("                     <AMT>{0}</AMT>", (IsReversal) ? RevObjectDet.AMT2 * (-1) : localpaymentAmount);
                    Trn_XML += string.Format("                     <BRN>{0}</BRN>", (IsReversal) ? RevObjectDet.BRN2 : localTargetAccBranch);                   //  Branch for Account to be Credited
                    Trn_XML += string.Format("                     <SLNO>1</SLNO>");
                    Trn_XML += string.Format("              </Mlt-Offset-Detail>");
                    Trn_XML += string.Format("              <Batch-Master>");
                    //Trn_XML += string.Format("                     <BRANCH_CODE>{0}</BRANCH_CODE>", (IsReversal) ? RevObjectDet.BRANCH_CODE : postingBranch);        //  Posting Branch
                    Trn_XML += string.Format("                     <BRANCH_CODE>{0}</BRANCH_CODE>", (IsReversal) ? RevObjectDet.BRANCH_CODE : localTargetAccBranch);        //  Posting Branch
                    Trn_XML += string.Format("                     <BATCH_NO>{0}</BATCH_NO>", localCurrent_Batch);         //  Same as batch Number above
                    Trn_XML += string.Format("                     <DESCRIPTION>null</DESCRIPTION>");
                    Trn_XML += string.Format("                     <DR_CHK_TOTAL>{0}</DR_CHK_TOTAL>", (IsReversal) ? RevObjectDet.DR_CHK_TOTAL * (-1) : localpaymentAmount); //  Same as Txn Amount since single batch
                    Trn_XML += string.Format("                     <CR_CHK_TOTAL>{0}</CR_CHK_TOTAL>", (IsReversal) ? RevObjectDet.CR_CHK_TOTAL * (-1) : localpaymentAmount); //  Same as Txn Amount since single batch
                    Trn_XML += string.Format("                     <BALANCING>Y</BALANCING>");
                    Trn_XML += string.Format("              </Batch-Master>");

                    Trn_XML += string.Format("               <Mis-Details>");
                    Trn_XML += string.Format("                       <BRANCH>{0}</BRANCH>", (IsReversal) ? RevObjectDet.BRANCH1 : postingBranch);
                    Trn_XML += string.Format("                       <POOLCD>DFLTPOOL</POOLCD>");
                    Trn_XML += string.Format("                       <CALCMETH></CALCMETH>");
                    Trn_XML += string.Format("                       <LINKGRP>N</LINKGRP>");
                    Trn_XML += string.Format("                       <RTFLAG></RTFLAG>");
                    Trn_XML += string.Format("                       <TXNMIS1></TXNMIS1>");
                    Trn_XML += string.Format("                       <TXNMIS2></TXNMIS2>");
                    Trn_XML += string.Format("                       <TXNMIS3></TXNMIS3>");
                    Trn_XML += string.Format("                       <TXNMIS4></TXNMIS4>");
                    Trn_XML += string.Format("                       <TXNMIS5></TXNMIS5>");
                    Trn_XML += string.Format("                       <TXNMIS6></TXNMIS6>");
                    Trn_XML += string.Format("                       <TXNMIS1LBL1></TXNMIS1LBL1>");
                    Trn_XML += string.Format("                       <TXNMIS2LBL2></TXNMIS2LBL2>");
                    Trn_XML += string.Format("                       <TXNMIS3LBL3></TXNMIS3LBL3>");
                    Trn_XML += string.Format("                       <TXNMIS4LBL4></TXNMIS4LBL4>");
                    Trn_XML += string.Format("                       <TXNMIS5LBL5></TXNMIS5LBL5>");
                    Trn_XML += string.Format("                       <TXNMIS6LBL6></TXNMIS6LBL6>");
                    Trn_XML += string.Format("                </Mis-Details>");

                    Trn_XML += string.Format("       </Multi-Offset-Master-IO>");
                    Trn_XML += string.Format("   </FCUBS_BODY>");
                    Trn_XML += string.Format("</FCUBS_REQ_ENV>");
                }
                Trn_XML = System.Text.RegularExpressions.Regex.Replace(Trn_XML, @"\s{2,}", " ");
                // Log the xml
                Hashtable m_hashtable = new Hashtable();
                m_hashtable.Add("XML_Date_D"    , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                m_hashtable.Add("XML_String_C"  , Trn_XML);
                m_hashtable.Add("XML_Ref_C"     , localCurrent_Trxn);
                m_hashtable.Add("XML_Type_C"    , "Request");
                m_hashtable.Add("XML_Success_YN", "1");
                m_hashtable.Add("XML_Token_ID"  , TokenID);
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_XML_Log", m_hashtable);

                return Trn_XML;
            }
            catch (Exception ErrException)
            {
                string  Err_Narr = LogError("2020117", "fn_createTransactionXML_WithForex", ErrException, "2020117");
                return "ERROR";
            }
        }

        string createTransaction_FT_XML_Manu(string localCurrent_Trxn, string localCurrent_Batch, string localSourceAccNo, string localSourceAccBranch, double localpaymentAmount, string localTrxn_Narr, string localTargetAccNo, string localTargetAccBranch, string DR_CR_Flag, string localTrnType, string TransferType, ReversalPostingDetail_Obj RevObjectDet, string source_Curr_C, string target_Curr_C, string Source_Ref, string Target_Ref, string Trxn_Remitter, string Originator_Acc, string BYORDOF2, string BYORDOF3, string BYORDOF4, string BYORDOF5, string ULTBEN2, string ULTBEN3, string ULTBEN4, string ULTBEN5, string PMTDET1, string PMTDET2, string PMTDET3, string PMTDET4, bool IsLocalCurrency)
        {
            Hashtable m_hashtable = new Hashtable();
            DataTable SysRec      = new DataTable();
            string    SQLStr      = "";

            try
            {
                // Get the  Posting Branch
                string postingBranch = "";
                bool  IsReversal     = false;
                string SOURCE_Tmp    = "";

                string Local_Remitter = Trxn_Remitter;
                if (Local_Remitter.Length > 25) Local_Remitter = Local_Remitter.Substring(0, 25);

                Exchange_Rate LocalRt = new Exchange_Rate();
                string Trn_XML      = "";
                string ACCOUNT_C    = "";
                string DRCR_C       = "";
                string BRN_1        = "";
                double AMT          = 0.00;
                string ADDL_TXT     = "";
                string ACCOUNT      = "";
                double AMT_2        = 0.00;
                string BRN_2        = "";
                string BRANCH_CODE  = "";
                double DR_CHK_TOTAL = 0.00;
                double CR_CHK_TOTAL = 0.00;
                string BRANCH_1     = "";
                string CCY_1        = "";
                double EXRATE       = 0.00;
                double LCYAMT       = 0.00;
                bool RTGS_Inwards_Use_FCUBS_SystemDate = false;
                string WebLogic_User   = "" ;
                string WebLogic_Source = "";
                string FT_Product_Code = "";
                string Trx_Date_Var    = string.Format("{0:yyyy-MM-dd}", DateTime.Now);
                string RT_SOURCE       = "", RT_DESTINATION = "", RT_PRODUCT = "", RT_SOURCE_USERID = "";

                postingBranch = GetPostingBranch();

                SysRec = new DataTable();
                SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RTGS_Inwards_Use_FCUBS_SystemDate','WebLogic_User', 'WebLogic_Source','FT_Product_Code','RT_SOURCE','RT_DESTINATION','RT_PRODUCT','RT_SOURCE_USERID') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                if (SysRec.Rows.Count > 0)
                {
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "WebLogic_User".ToUpper())                     WebLogic_User                     = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "WebLogic_Source".ToUpper())                   WebLogic_Source                   = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "FT_Product_Code".ToUpper())                   FT_Product_Code                   = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_SOURCE".ToUpper())                         RT_SOURCE                         = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_DESTINATION".ToUpper())                    RT_DESTINATION                    = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_PRODUCT".ToUpper())                        RT_PRODUCT                        = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RT_SOURCE_USERID".ToUpper())                  RT_SOURCE_USERID                  = param_Row["Parameter_Value"].ToString();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Inwards_Use_FCUBS_SystemDate".ToUpper()) RTGS_Inwards_Use_FCUBS_SystemDate = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    }
                }

                if (RTGS_Inwards_Use_FCUBS_SystemDate)
                {
                    Trx_Date_Var = GetFCUB_Businessdate(postingBranch);
                    Trx_Date_Var = string.Format("{0}-{1}-{2}", Trx_Date_Var.Substring(0, 4), Trx_Date_Var.Substring(4, 2), Trx_Date_Var.Substring(6, 2));
                }

                //if ((TransferType == "IAT") || (TransferType == "CHG"))
                //{
                //    postingBranch = localSourceAccBranch;
                //}
                //else
                //{
                //    postingBranch = GetPostingBranch();
                //}

                ACCOUNT_C    = localSourceAccNo;
                DRCR_C       = DR_CR_Flag;
                BRN_1        = localSourceAccBranch;
                AMT          = localpaymentAmount;
                ADDL_TXT     = localTrxn_Narr;
                ACCOUNT      = localTargetAccNo;
                AMT_2        = localpaymentAmount;
                BRN_2        = localTargetAccBranch;
                BRANCH_CODE  = postingBranch;
                DR_CHK_TOTAL = localpaymentAmount;
                CR_CHK_TOTAL = localpaymentAmount;
                BRANCH_1     = postingBranch;
                CCY_1        = source_Curr_C;

                //if (!IsLocalCurrency)
                //{
                //    Trn_XML += string.Format("<FCUBS_REQ_ENV>");
                //    Trn_XML += string.Format("     <FCUBS_HEADER>");
                //    Trn_XML += string.Format("            <SOURCE>{0}</SOURCE>", RT_SOURCE);
                //    Trn_XML += string.Format("            <UBSCOMP>FCUBS</UBSCOMP>");
                //    Trn_XML += string.Format("            <MSGID>{0}</MSGID>", localCurrent_Trxn);             // Must be Unique (max 14 Characters)
                //    Trn_XML += string.Format("            <USERID>{0}</USERID>", RT_SOURCE_USERID);
                //    Trn_XML += string.Format("            <BRANCH>{0}</BRANCH>", postingBranch);                 // Transaction Branch. 
                //    Trn_XML += string.Format("            <MODULEID/>");
                //    Trn_XML += string.Format("            <SERVICE>FCUBSRTService</SERVICE>");
                //    Trn_XML += string.Format("            <OPERATION>CreateTransaction</OPERATION>");
                //    Trn_XML += string.Format("            <SOURCE_OPERATION>{0}</SOURCE_OPERATION>", RT_SOURCE);
                //    Trn_XML += string.Format("            <SOURCE_USERID>{0}</SOURCE_USERID>", RT_SOURCE_USERID);
                //    Trn_XML += string.Format("            <DESTINATION>{0}</DESTINATION>", RT_DESTINATION);
                //    //Trn_XML += string.Format("            <FUNCTIONID>DEGRTTLR</FUNCTIONID>");
                //    //Trn_XML += string.Format("            <ACTION>NEW</ACTION>");
                //    Trn_XML += string.Format("     </FCUBS_HEADER>");
                //    Trn_XML += string.Format("     <FCUBS_BODY>");
                //    Trn_XML += string.Format("           <Transaction-Details>");
                //    Trn_XML += string.Format("           	    <PRD>{0}</PRD>", RT_PRODUCT);

                //    Trn_XML += string.Format("           	    <BRN>{0}</BRN>", localSourceAccBranch);
                //    Trn_XML += string.Format("           	    <TXNACC>{0}</TXNACC>", localSourceAccNo);           // Transaction Account to be passed				     
                //    Trn_XML += string.Format("           	    <TXNCCY>{0}</TXNCCY>", source_Curr_C);              // Transaction account currency ( local currency )			      
                //    Trn_XML += string.Format("           	    <TXNBRN>{0}</TXNBRN>", localSourceAccBranch);       // Transaction acc branch	
                //    Trn_XML += string.Format("          	    <TXNAMT></TXNAMT>");                                // Pass the transaction amount as null. Since you are going to pass the FCY amount, system will derive the TXNAMT based on the exchange rate

                //    //               Trn_XML += string.Format("           	    <BRN>{0}</BRN>", BRN_1);
                //    //               Trn_XML += string.Format("           	    <TXNACC>{0}</TXNACC>", ACCOUNT_C);           // Transaction Account to be passed				     
                //    //               Trn_XML += string.Format("           	    <TXNCCY>{0}</TXNCCY>", CCY_1);               // Transaction account currency ( local currency )			      
                //    //               Trn_XML += string.Format("           	    <TXNBRN>{0}</TXNBRN>", BRN_1);               // Transaction acc branch	

                //    //               Trn_XML += string.Format("           	    <BRN>{0}</BRN>", BRN_1);
                //    //               Trn_XML += string.Format("           	    <TXNACC>{0}</TXNACC>", ACCOUNT_C);           // Transaction Account to be passed				     
                //    //               Trn_XML += string.Format("           	    <TXNCCY>{0}</TXNCCY>", CCY_1);               // Transaction account currency ( local currency )			      
                //    //               Trn_XML += string.Format("           	    <TXNBRN>{0}</TXNBRN>", BRN_1);               // Transaction acc branch	
                //    //Trn_XML += string.Format("          	    <TXNAMT></TXNAMT>");

                //    //if (source_Curr_C == Properties.Settings.Default.Local_Currency)
                //    //               {
                //    //                   Trn_XML += string.Format("          	    <TXNAMT></TXNAMT>");                             // Pass the transaction amount as null. Since you are going to pass the FCY amount, system will derive the TXNAMT based on the exchange rate
                //    //               }
                //    //               else
                //    //               {
                //    //                   Trn_XML += string.Format("          	    <TXNAMT>{0}</TXNAMT>", TrnAMNT);                 // Pass the transaction amount as null. Since you are going to pass the FCY amount, system will derive the TXNAMT based on the exchange rate
                //    //               }

                //    Trn_XML += string.Format("                  <OFFSETCCY>{0}</OFFSETCCY>", target_Curr_C);            // Offset currency ( FCY currency )				 
                //    Trn_XML += string.Format("                  <OFFSETACC>{0}</OFFSETACC>", localTargetAccNo);         // Offset Account		
                //    Trn_XML += string.Format("           	    <OFFSETBRN>{0}</OFFSETBRN>", localTargetAccBranch);     // Offset account branch  
                //    Trn_XML += string.Format("           	    <OFFSETAMT>{0}</OFFSETAMT>", localpaymentAmount);       // Offset amount ( amount in FCY )  
                //    Trn_XML += string.Format("           	    <XRATE></XRATE>");                                      // Exchange rate ( Pass this value as null, system will derive the exchange rate )

                //    //if (source_Curr_C == Properties.Settings.Default.Local_Currency)
                //    //{
                //    //    Trn_XML += string.Format("           	    <OFFSETAMT>{0}</OFFSETAMT>", (IsReversal) ? TrnAMNT * (-1) :  TrnAMNT );                  // Offset amount ( amount in FCY )    
                //    //    Trn_XML += string.Format("           	    <XRATE></XRATE>");                     // Exchange rate ( Pass this value as null, system will derive the exchange rate )
                //    //}
                //    //else
                //    //{
                //    //    Trn_XML += string.Format("           	    <OFFSETAMT>{0}</OFFSETAMT>", (IsReversal) ? TrnAMNT * (-1) : Convert.ToDouble(string.Format("{0:0.00}", TrnAMNT * Convert.ToDouble(RateObj.Buy_Rate))));                  // Offset amount ( amount in FCY )    
                //    //    Trn_XML += string.Format("           	    <XRATE>{0}</XRATE>", string.Format("{0:0.0000000}", 1 / Convert.ToDouble(RateObj.Buy_Rate)));                     // Exchange rate ( Pass this value as null, system will derive the exchange rate )
                //    //}
                //    Trn_XML += string.Format("           	    <TXNDATE>{0}</TXNDATE>", Trx_Date_Var);
                //    Trn_XML += string.Format("                  <Mis-Details>");
                //    Trn_XML += string.Format("                 	    <BRANCH>{0}</BRANCH>", postingBranch);

                //    Trn_XML += string.Format("                       <TXNMIS1>MAPUTO</TXNMIS1>");
                //    Trn_XML += string.Format("                       <TXNMIS2>NOTAPPLIC</TXNMIS2>");
                //    Trn_XML += string.Format("                       <TXNMIS3></TXNMIS3>");
                //    Trn_XML += string.Format("                       <TXNMIS4>NOTAPPLIC</TXNMIS4>");
                //    Trn_XML += string.Format("                       <TXNMIS5>NOTAPPLIC</TXNMIS5>");
                //    Trn_XML += string.Format("                       <TXNMIS6></TXNMIS6>");
                //    Trn_XML += string.Format("                       <TXNMIS1LBL1>BRANCHES</TXNMIS1LBL1>");
                //    Trn_XML += string.Format("         		         <TXNMIS2LBL2>PURPOSE</TXNMIS2LBL2>");
                //    Trn_XML += string.Format("         		         <TXNMIS3LBL3>FOREX_TXN</TXNMIS3LBL3>");
                //    Trn_XML += string.Format("         		         <TXNMIS4LBL4>LINEOFBUS</TXNMIS4LBL4>");
                //    Trn_XML += string.Format("         		         <TXNMIS5LBL5>CLAS_LOAN</TXNMIS5LBL5>");
                //    Trn_XML += string.Format("         		         <TXNMIS6LBL6>COSTCENTR</TXNMIS6LBL6>");

                //    //Trn_XML += string.Format("                       <TXNMIS1>{0}</TXNMIS1>", (IsReversal) ? "REV-" + RevObjectDet.ADDL_TXT : localTrxn_Narr);
                //    //Trn_XML += string.Format("                       <TXNMIS2></TXNMIS2>");
                //    //Trn_XML += string.Format("                       <TXNMIS3></TXNMIS3>");
                //    //Trn_XML += string.Format("                       <TXNMIS4></TXNMIS4>");
                //    //Trn_XML += string.Format("                       <TXNMIS5></TXNMIS5>");
                //    //Trn_XML += string.Format("                       <TXNMIS6></TXNMIS6>");
                //    //Trn_XML += string.Format("                       <TXNMIS1LBL1>{0}</TXNMIS1LBL1>", (IsReversal) ? "REV-" + RevObjectDet.ADDL_TXT : localTrxn_Narr);
                //    //Trn_XML += string.Format("         		         <TXNMIS2LBL2></TXNMIS2LBL2>");
                //    //Trn_XML += string.Format("         		         <TXNMIS3LBL3>FOREX_TXN</TXNMIS3LBL3>");
                //    //Trn_XML += string.Format("         		         <TXNMIS4LBL4></TXNMIS4LBL4>");
                //    //Trn_XML += string.Format("         		         <TXNMIS5LBL5></TXNMIS5LBL5>");
                //    //Trn_XML += string.Format("         		         <TXNMIS6LBL6></TXNMIS6LBL6>");

                //    Trn_XML += string.Format("                  </Mis-Details>");
                //    Trn_XML += string.Format("           </Transaction-Details>");
                //    Trn_XML += string.Format("     </FCUBS_BODY>");
                //    Trn_XML += string.Format("</FCUBS_REQ_ENV>");
                //}
                //else
                {
                    // Get the  Posting Branch  need to cnange to 
                    Trn_XML += string.Format("<FCUBS_REQ_ENV>");
                    Trn_XML += string.Format("   <FCUBS_HEADER>");
                    //Trn_XML += string.Format("       <SOURCE>{0}</SOURCE>", "MOBILEBANKING");
                    Trn_XML += string.Format("       <SOURCE>{0}</SOURCE>", WebLogic_Source);
                    Trn_XML += string.Format("       <UBSCOMP>FCUBS</UBSCOMP>");
                    Trn_XML += string.Format("       <MSGID>{0}</MSGID>", localCurrent_Trxn);
                    Trn_XML += string.Format("       <CORRELID>{0}</CORRELID>", Source_Ref);
                    //Trn_XML += string.Format("       <USERID>{0}</USERID>", "MBTRNAUTH");
                    Trn_XML += string.Format("       <USERID>{0}</USERID>", WebLogic_User);
                    Trn_XML += string.Format("       <BRANCH>{0}</BRANCH>", postingBranch);           // Transaction Branch. 
                    Trn_XML += string.Format("       <MODULEID>FT</MODULEID>");                       // ADDED 
                    Trn_XML += string.Format("       <SERVICE>FCUBSFTService</SERVICE> ");
                    Trn_XML += string.Format("       <OPERATION>CreateFTContract</OPERATION>");
                    //Trn_XML += string.Format("       <DESTINATION>FLEXCUBE</DESTINATION>");
                    //Trn_XML += string.Format("       <DESTINATION>FCAT</DESTINATION>");
                    Trn_XML += string.Format("       <DESTINATION></DESTINATION>");
                    Trn_XML += string.Format("       <FUNCTIONID>FTDCONON</FUNCTIONID>");             // ADDDED 
                    Trn_XML += string.Format("       <ACTION>NEW</ACTION>");                          // ADDDED 
                    Trn_XML += string.Format("   </FCUBS_HEADER>");
                    Trn_XML += string.Format("   <FCUBS_BODY>  ");

                    Trn_XML += string.Format("       <Contract-Details-IO>");
                    //Trn_XML += string.Format("            <PROD>{0}</PROD>", "MBOA");
                    Trn_XML += string.Format("            <PROD>{0}</PROD>", FT_Product_Code);
                    //Trn_XML += string.Format("            <PROD>{0}</PROD>", "FTOA");   // Product Code TZOS- This is for RTGS
                    //Trn_XML += string.Format("            <MAKERID>{0}</MAKERID>", "FCATOP");                // LOANTRACKER FCATOP
                    Trn_XML += string.Format("            <MAKERID></MAKERID>", "FCATOP");                     // LOANTRACKER FCATOP
                    //Trn_XML += string.Format("          <CHECKERID>{0}</CHECKERID>", "FCATOP"); 
                    //Trn_XML += string.Format("            <PRODESC>{0}</PRODESC>", "RTGS INCOMING STP");     // Product Description
                    Trn_XML += string.Format("            <PRODESC>{0}</PRODESC>", localTrxn_Narr);            // Product Description
                    Trn_XML += string.Format("            <DRCCY>{0}</DRCCY>", source_Curr_C);               // Debit Currency
                    //Trn_XML += string.Format("            <CRCCY>{0}</CRCCY>", target_Curr_C);               // Credit Currency
                    //Trn_XML += string.Format("            <DRCCY>{0}</DRCCY>", "USD");                         // Debit Currency
                    Trn_XML += string.Format("            <CRCCY>{0}</CRCCY>", "USF");                         // Credit Currency
                    Trn_XML += string.Format("            <DRAMT>{0}</DRAMT>", localpaymentAmount);            // Debit Amount (Specify the loan amount disbursed)
                    Trn_XML += string.Format("            <CRAMT>{0}</CRAMT>", localpaymentAmount);            // Credit Amount (Specify the loan amount disbursed)
                    Trn_XML += string.Format("            <DRACCBRN>{0}</DRACCBRN>", localSourceAccBranch);    // Debit Account Branch
                    Trn_XML += string.Format("            <CRACCBRN>{0}</CRACCBRN>", localTargetAccBranch);    // Credit Account Branch - Leave it because it's configured at product level in FCUBS
                    Trn_XML += string.Format("            <CRACC>{0}</CRACC>", localTargetAccNo);              // Credit Account  - Leave it because it's configured at product level in FCUBS
                    Trn_XML += string.Format("            <DRACC>{0}</DRACC>", localSourceAccNo);              // Debit Account - This is the Customer settlement account

                    Trn_XML += string.Format("            <DRVDT>{0}</DRVDT>", Trx_Date_Var);                  // Debit Value Date
                    Trn_XML += string.Format("            <CRVDT>{0}</CRVDT>", Trx_Date_Var);                  // Credit Value Date

                    /*
                        Trn_XML += string.Format("<DRSPRED>{0}</DRSPRED>", "Optional"); //Debit Spread
                        Trn_XML += string.Format("<DRSPREDDATE>{0}</DRSPREDDATE>", "Optional"); //Debit Spread Date
                        Trn_XML += string.Format("<CRSPRED>{0}</CRSPRED>", "Optional"); //Credit Spread Date
                        Trn_XML += string.Format("<CRSPREDDATE>{0}</CRSPREDDATE>", "Optional"); //Credit Spread Date
                        Trn_XML += string.Format("<DRIBAN>{0}</DRIBAN>", "Optional"); //Debit IBAN
                        Trn_XML += string.Format("<CRIBAN>{0}</CRIBAN>", "Optional"); //Credit IBAN
                        Trn_XML += string.Format("<SPRDCD>{0}</SPRDCD>", "Optional"); //Spread Code
                        Trn_XML += string.Format("<SPREDDEFN>{0}</SPREDDEFN>", "Optional"); //Spread Definition
                        Trn_XML += string.Format("<SSN>{0}</SSN>", "Optional"); //Social Security Number  
                        Trn_XML += string.Format("<MCKNO>{0}</MCKNO>", "Optional"); //Managers Check number
                        Trn_XML += string.Format("<CHKNO>{0}</CHKNO>", "Optional"); //Check Number(Instrument Code) 
                        Trn_XML += string.Format("<BASERATE>{0}</BASERATE>", "Optional"); //Base Rate
                        Trn_XML += string.Format("<OVDOVRDRFT>{0}</OVDOVRDRFT>", "Optional"); //Override Overdraft?
                        Trn_XML += string.Format("<CORESPREQD>{0}</CORESPREQD>", "Optional"); //Our Correpondent Required?
                        Trn_XML += string.Format("<REMARKS>{0}</REMARKS>", "Optional"); //Internal Remarks
                        Trn_XML += string.Format("<XRATESER>{0}</XRATESER>", "Optional"); //Exchange Rate Serial No
                        Trn_XML += string.Format("<CUSTSPREAD>{0}</CUSTSPREAD>", "Optional"); //Customer Spread                        
                    */

                    //Trn_XML += string.Format("<XRATESER>{0}</XRATESER>", "1"); //Rate Type - This should remain hard coded all the time
                    Trn_XML += string.Format("            <RATETYPE>{0}</RATETYPE>", "STANDARD");              //Rate Type - This should remain hard coded all the time
                    Trn_XML += string.Format("            <XRATE>{0}</XRATE>", "1");                           //Exchange Rate - This should remain hard coded all the time
                    Trn_XML += string.Format("            <LCYEQ>{0}</LCYEQ>", localpaymentAmount);            //LCY Equivalent
                    Trn_XML += string.Format("            <CHGWHOM>{0}</CHGWHOM>", "U");                       //
                    /*
                                                                                                                O-> Rem all chags
                                                                                                                B-> Ben- All chgs
                                                                                                                U-> Rem - our charges
                    */
                    Trn_XML += string.Format("            <MSGASOF>{0}</MSGASOF>", "B");                       //
                    Trn_XML += string.Format("            <RTASOF>{0}</RTASOF>", "N");                         //
                    //Trn_XML += string.Format("          <ACTGASOF>{0}</ACTGASOF>", "N");                     // Accounting
                    Trn_XML += string.Format("            <AFTRTCHG>{0}</AFTRTCHG>", "N");                     //

                    Trn_XML += string.Format("            <REMITMSG>{0}</REMITMSG>", "N");                     //
                    Trn_XML += string.Format("            <UPLOAD>{0}</UPLOAD>", "Y");                         //
                    Trn_XML += string.Format("            <SOURCE></SOURCE>", WebLogic_Source);                 //
                    // Trn_XML += string.Format("         <SOURCE>FLEXCUBE</SOURCE>", WebLogicSource);         // REM NEW
                    Trn_XML += string.Format("            <XREF>{0}</XREF>", Source_Ref);                      //Specify External Reference No here - LoansID - Loan reference number
                    Trn_XML += string.Format("            <USRREF>{0}</USRREF>", Source_Ref.Replace("A","Q"));                      //Specify External Reference No here - LoansID - Loan reference number
                    if (PMTDET1.Length >= 73)
                    {
                        string LongOne = "";
                    }

                    if (PMTDET1 != "") Trn_XML += string.Format("            <PMTDET1>//{0}</PMTDET1>", PMTDET1);         //Payment Detail Line 1
                    if (PMTDET2 != "") Trn_XML += string.Format("            <PMTDET2>//{0}</PMTDET2>", PMTDET2);         //Payment Detail Line 2
                    if (PMTDET3 != "") Trn_XML += string.Format("            <PMTDET3>//{0}</PMTDET3>", PMTDET3);         //Payment Detail Line 3
                    if (PMTDET4 != "") Trn_XML += string.Format("            <PMTDET4>//{0}</PMTDET4>", PMTDET4);         //Payment Detail Line 4

                    //if (PMTDET1 != "") Trn_XML += string.Format("            <PMTDET1>//{0}{1}</PMTDET1>", PMTDET1, PMTDET2);         //Payment Detail Line 1
                    //if (PMTDET3 != "") Trn_XML += string.Format("            <PMTDET2>//{0}{1}</PMTDET2>", PMTDET3, PMTDET4);         //Payment Detail Line 2


                    /*
                        //These should be populated automatically - picking from <DRACC>{0}</DRACC> TAG
                        // Let wait and see who wins WOOO !!
                    */

                    /*
                            Trn_XML += string.Format("<BYORDOF1>{0}</BYORDOF1>", "//1342175719"); //By Order of 1 // Debit Account - This the Customer settlement account SAME as in TAG <DRACC>{0}</DRACC> above
                            Trn_XML += string.Format("<BYORDOF2>{0}</BYORDOF2>", "Abdallah Kirungi Kirungi"); //By Order of 2 - Address line Contact Address
                            Trn_XML += string.Format("<BYORDOF3>{0}</BYORDOF3>", "213 Mukaka Street "); //By Order of 3 - Address line 2 Contact Address
                            Trn_XML += string.Format("<BYORDOF4>{0}</BYORDOF4>", "DAR"); //By Order of 4 - Address line 3 Contact Address
                            Trn_XML += string.Format("<BYORDOF5>{0}</BYORDOF5>", "TZ "); //By Order of 5 - Address line 3 Contact Address
                    */

                    Trn_XML += string.Format("            <BYORDOF1>//{0}</BYORDOF1>", Originator_Acc);                     //By Order of 1 // Debit Account - This the Customer settlement account SAME as in TAG <DRACC>{0}</DRACC> above
                    if (BYORDOF2 != "") Trn_XML += string.Format("            <BYORDOF2>{0}</BYORDOF2>", BYORDOF2);         //By Order of 2 - Address line Contact Address
                    if (BYORDOF3 != "") Trn_XML += string.Format("            <BYORDOF3>{0}</BYORDOF3>", BYORDOF3);         //By Order of 3 - Address line 2 Contact Address
                    if (BYORDOF4 != "") Trn_XML += string.Format("            <BYORDOF4>{0}</BYORDOF4>", BYORDOF4);         //By Order of 4 - Address line 3 Contact Address
                    if (BYORDOF5 != "") Trn_XML += string.Format("            <BYORDOF5>{0}</BYORDOF5>", BYORDOF5);         //By Order of 5 - Address line 3 Contact Address

                    Trn_XML += string.Format("            <ULTBEN1>{0}</ULTBEN1>", localTargetAccNo);                         //Ultimate Beneficiary Othe Banks account name 1 - To be captured manually into LoanTracker
                    if (ULTBEN2 != "") Trn_XML += string.Format("            <ULTBEN2>//{0}</ULTBEN2>", ULTBEN2);             //Ultimate Beneficiary 2 name - The name in the other Bank as client name 
                    if (ULTBEN3 != "") Trn_XML += string.Format("            <ULTBEN3>//{0}</ULTBEN3>", ULTBEN3);             //Ultimate Beneficiary 3 - Address Line 1 - To be captured manually into LoanTracker
                    if (ULTBEN4 != "") Trn_XML += string.Format("            <ULTBEN4>//{0}</ULTBEN4>", ULTBEN4);             //Ultimate Beneficiary 4 - Address Line 2 - To be captured manually into LoanTracker
                    if (ULTBEN5 != "") Trn_XML += string.Format("            <ULTBEN5>//{0}</ULTBEN5>", ULTBEN5);             //Ultimate Beneficiary 5 - Address Line 3 - To be captured manually into LoanTracker

                    Trn_XML += string.Format("            <RECIEVER>{0}</RECIEVER>", "REBZZWHX");                //EXTNTZTZ // CORUTZTZ // Account With Instituition 1 - Bank SWITH CODE - To be captured manually into LoanTracker
                    Trn_XML += string.Format("            <ACWTHINST1>{0}</ACWTHINST1>", "REBZZWHX");            //EXTNTZTZ //  CORUTZTZ Account With Instituition 1 - Bank SWITH CODE - To be captured manually into LoanTracker

                    /*
						 
                    // These are not used at all for RTGS - to generate a swicth message
                    Trn_XML += string.Format("            <ACWTHINST2>{0}</ACWTHINST2>", " "); //Account With Instituition 2
                    Trn_XML += string.Format("            <ACWTHINST3>{0}</ACWTHINST3>", " "); //Account With Instituition 3
                    Trn_XML += string.Format("            <ACWTHINST4>{0}</ACWTHINST4>", " "); //Account With Instituition 4
                    Trn_XML += string.Format("            <ACWTHINST5>{0}</ACWTHINST5>", " "); //Account With Instituition 5
						 
                    */

                    Trn_XML += string.Format("            <MSGDATE>{0}</MSGDATE>", Trx_Date_Var);            // Swift message date
                    Trn_XML += string.Format("            <ACTGDT>{0}</ACTGDT>", Trx_Date_Var);              //
                    Trn_XML += string.Format("            <RATEPICKDT>{0}</RATEPICKDT>", Trx_Date_Var);      //
                    // Trn_XML += string.Format("         <XRATEDT>{0}</XRATEDT>", Trx_Date_Var);                     // Rate Date

                    Trn_XML += string.Format("       </Contract-Details-IO>");
                    Trn_XML += string.Format("   </FCUBS_BODY>  ");
                    Trn_XML += string.Format("</FCUBS_REQ_ENV>");
                }

                //Trn_XML = File.ReadAllText(@"C:\TEMP\FT_Request_Mobile.txt");
                Trn_XML = System.Text.RegularExpressions.Regex.Replace(Trn_XML, @"\s{2,}", " ");
                // Log the xml
                m_hashtable = new Hashtable();
                m_hashtable.Add("XML_Date_D"  , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                m_hashtable.Add("XML_String_C", Trn_XML);
                m_hashtable.Add("XML_Ref_C"   , localCurrent_Trxn);
                m_hashtable.Add("XML_Type_C"  , "Request");
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_XML_Log", m_hashtable);
                return Trn_XML;
            }
            catch (Exception ErrException)
            {
                string Error_Text1 = System.Text.RegularExpressions.Regex.Replace(string.Format("{0} - {1}", ErrException.ToString(), ErrException.StackTrace.ToString()), @"\s{2,}", " ").Replace("\n", "");
                string Err_Narr    = LogError("Post Oracle Payment", Error_Text1, "373737");
                return "ERROR";
            }
        }

        string GetTrxnNo()
        {
            string storedProcedure = "[usp_GetTrxnNo]";
            List<SqlParameter> p = new List<SqlParameter>();
            //p.Add(new SqlParameter("AccNo", accountNo));

            try
            {
                string result = SqlHelper.ExecuteScalar( ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),  storedProcedure, p.ToArray());
                if (string.IsNullOrEmpty(result)) return "0";
                else return result;
            }
            catch (Exception GetTrxnNo_Err)
            {
                string Err_Narr = LogError("Get Trxn Number", GetTrxnNo_Err.StackTrace.ToString(), "5654656");
                return "ERROR";
            }
        }

        string GetPostingBranch()
        {
            string storedProcedure = "usp_Get_Posting_Branch";
            List<SqlParameter> p = new List<SqlParameter>();
            //p.Add(new SqlParameter("AccNo", accountNo));

            try
            {
                string result = SqlHelper.ExecuteScalar(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), storedProcedure, p.ToArray());
                if (string.IsNullOrEmpty(result)) return "0";
                else return result;
            }
            catch (Exception PostBranchErr)
            {
                string Err_Narr = LogError("Get Posting Branch Number", PostBranchErr.StackTrace.ToString(), "131313");
                return "ERROR";
            }
        }

        string GetFCUB_Businessdate(string branchNumber)
        {
            string FCUB_Businessdate = "";
            string FCUBS_Schema      = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.FCUBS_Schema;
            if (FCUBS_Schema != "") FCUBS_Schema += ".";

            try
            {
                if (branchNumber.Length >= 1)
                {
                    DataTable OracleTable = OracleHelper.GetTable(string.Format("SELECT TODAY FROM {0}STTM_DATES WHERE BRANCH_CODE = '{1}'", FCUBS_Schema, branchNumber));
                    if (OracleTable != null && OracleTable.Rows.Count > 0)
                    {
                        // Create array that contains the list of accounts
                        foreach (DataRow dr in OracleTable.Rows)
                        {
                            FCUB_Businessdate = string.Format("{0:yyyyMMdd}", dr["TODAY"]).ToString();
                        }
                    }
                }
            }
            catch (Exception FCUB_Date_Error)
            {
                string Err_Narr = LogError("Get FCUB Business Date", FCUB_Date_Error.StackTrace.ToString(), "606060");
            }
            return FCUB_Businessdate;
        }

        string GetBatchNumber()
        {
            string tmp_BatchNo_str = "";
            string tmp_BatchNo_OG = "";
            int tmp_BatchNm_Num = 7;

            try
            {
                string FCUB_BusDate = GetFCUB_Businessdate(GetPostingBranch());

                string storedProcedure = "[usp_GetBatchNumber]";
                List<SqlParameter> p = new List<SqlParameter>();
                p.Add(new SqlParameter("Current_Day_C", FCUB_BusDate));

                string result = SqlHelper.ExecuteScalar(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), storedProcedure, p.ToArray());
                if (string.IsNullOrEmpty(result))
                {
                    tmp_BatchNo_str = "0";
                }
                else
                {
                    tmp_BatchNo_str = result;
                }

                tmp_BatchNo_OG = tmp_BatchNo_str;
                tmp_BatchNo_str = fn_ConvertTrnID(Int16.Parse(tmp_BatchNo_str), 3);

                //tmp_BatchNo_str = string.Format("{1}{0}", tmp_BatchNo_str.Substring(1, 3), int.Parse(tmp_BatchNo_OG.Substring(0, 1)) + int.Parse(tmp_BatchNo_str.Substring(0, 1)));
                tmp_BatchNo_str = string.Format("{0}{1}", "S", tmp_BatchNo_str);
                return tmp_BatchNo_str.ToLower();
            }
            catch (Exception GetBatchNo_Err)
            {
                string Err_Narr = LogError("Get Batch Number", GetBatchNo_Err.StackTrace.ToString(), "181818");
                return "ERROR";
            }
        }

        public string fn_ConvertTrnID(int ValuetoConvert, int To_Length)
        {
            int Local_ValuetoConvert = ValuetoConvert;
            string Out_str = "";

            string alphabet = "0123456789ABCDEFGHJKLMNPQRSTUVWXYZ";

            var stack = new Stack<char>();
            while (Local_ValuetoConvert > 0)
            {
                stack.Push(alphabet[Local_ValuetoConvert % alphabet.Length]);
                Local_ValuetoConvert /= alphabet.Length;
            }
            //Out_str = new string(stack.ToArray()).PadLeft(4, '0');
            Out_str = new string(stack.ToArray()).PadLeft(To_Length, '0');
            return Out_str;
        }

        Account_Branch fn_GetAccount_Branch(string AccountNumber)
        {
            Account_Branch Account_Branch_Local = new Account_Branch();
            Account_Branch_Local.IntialiseResults();
            DataTable      BranchTable          = new DataTable();
            string         TSQLStr              = "";

            Account_Branch_Local.IntialiseResults();
            Account_Branch_Local.Branch_Instances = -1;

            string FCUBS_Schema = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.FCUBS_Schema;
            if (FCUBS_Schema != "") FCUBS_Schema += ".";
            try
            {
                TSQLStr     = string.Format("Select BRANCH_CODE,CUST_AC_NO,CCY From {0}STTM_CUST_ACCOUNT WHERE CUST_AC_NO = '{1}'", FCUBS_Schema, AccountNumber.Trim());
                BranchTable = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], TSQLStr);
                if (BranchTable == null)
                {
                    // Do Nothing as No record is found
                }
                else
                {
                    if (BranchTable.Rows.Count > 1)
                    {
                        // Do Nothing Since there is duplicate account number, ie account resides in more than one branch
                    }
                    else
                    {
                        foreach (DataRow dr in BranchTable.Rows)
                        {
                            Account_Branch_Local.BRANCH_CODE = dr["BRANCH_CODE"].ToString().Trim();
                            Account_Branch_Local.CUST_AC_NO  = dr["CUST_AC_NO"].ToString().Trim();
                            Account_Branch_Local.CCY         = dr["CCY"].ToString().Trim();
                        }
                    }
                    Account_Branch_Local.Branch_Instances = BranchTable.Rows.Count;
                }
            }
            catch (Exception fn_GetBranch_Expt)
            {
                string Err_String = string.Format("{0} : {1}", fn_GetBranch_Expt.ToString(), fn_GetBranch_Expt.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Narr = LogError("fn_GetAccount_Branch", Err_String, "5015050");
            }
            finally
            {
            }
            return Account_Branch_Local;
        }

        Saved_BatchRef fn_GetSaved_BatchRef(string Instance_No, string Batch_Source)
        {
            Saved_BatchRef tmp_GetSaved_BatchRef = new Saved_BatchRef();
            tmp_GetSaved_BatchRef.IntialiseResults();
            string    SQLStr  = "";
            DataTable Sql_Tbl = new DataTable();
            try
            {
                if (Instance_No.Length >= 1)
                {
                    if (Batch_Source == "Main")
                    {
                        SQLStr = string.Format("SELECT XML_File_C,Batch_No_C FROM tbl_RTGSIn_Trxn WITH (NOLOCK) WHERE Inst_No = '{0}'", Instance_No);
                    }else
                    {
                        SQLStr = string.Format("SELECT Mitigated_XML_File_C AS XML_File_C,Mitigated_Batch_No_C AS Batch_No_C FROM tbl_RTGSIn_Trxn WITH (NOLOCK) WHERE Inst_No = '{0}'", Instance_No);
                    }
                    Sql_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"],SQLStr);
                    if (Sql_Tbl != null && Sql_Tbl.Rows.Count > 0)
                    {
                        foreach (DataRow dr in Sql_Tbl.Rows)
                        {
                            tmp_GetSaved_BatchRef.BatchNumber_C = dr["XML_File_C"].ToString().Trim();
                            tmp_GetSaved_BatchRef.TrxnNo_C      = dr["Batch_No_C"].ToString().Trim();
                        }
                    }
                }
            }
            catch (Exception FCUB_Date_Error)
            {
                string Err_Narr = LogError("fn_GetSaved_BatchRef", FCUB_Date_Error.StackTrace.ToString(), "607008");
            }
            finally
            {
                // Do nothing
            }
            return tmp_GetSaved_BatchRef;
        }


        //public void CreateAML_File_STR()
        //{
        //    string transactionnumber = "";
        //    try
        //    {
        //        if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Create_STR_File)
        //        {
        //            LogStep("CreateAML_File_STR Step 0", "CreateAML_File_STR disabled");
        //        }
        //        else
        //        {
        //            LogStep("CreateAML_File_STR Step 0", "CreateAML_File_STR Main Entry");
        //            // This Creates the Central Bank AML File
        //            DataTable Data_Table = new DataTable();
        //            DataTable Data_Rec  = new DataTable();
        //            DataTable Temp_Rec  = new DataTable();
        //            DataTable Curr_Rec  = new DataTable();
        //            DataTable SysRec    = new DataTable();
        //            string    Str_TrnAmnt    = "0.00";
        //            string    AML_Product    = "STR";
        //            SR_Class  Sr_Class_Local = new SR_Class();
        //            string    Out_Dir        = null;
        //            double    Curr_Run_No    = 0.0;
        //            string    Out_File_Name  = null;
        //            string    Instance_Name  = null;
        //            bool      CreateTestXML  = false;
        //            string    Curr_License   = "";
        //            string    Svr_Lic_Date   = null;
        //            System.DateTime Bnk_RunDate = default(System.DateTime);
        //            System.DateTime AsAtDate    = default(System.DateTime);
        //            int Days_Difference = 0;

        //            int   Lic_Response_Code = 0;
        //            bool  Econet_Integrated = false;
        //            bool LCs_Integrated     = false;

        //            string Trn_GUID         = "";
        //            string Transaction_Str  = "";
        //            string from_account_str = "";
        //            string SQL_Str          = "";

        //            StringWriter objStreamWriter = new StringWriter();
        //            string Temp_goAMLXML = "";
        //            string XML_Header_Str = "";
        //            XmlSerializer x = default(XmlSerializer);
        //            string[] Transaction_Parms = null;
        //            int Transaction_Parms_Len = 0;

        //            string entity_reference_temp = "";
        //            string fiu_ref_number_temp   = "";
        //            string ADDRESS_C_temp        = "";

        //            report goAML_Report = new report();
        //            //Dim ttt As goAML_Report.
        //            reportTransaction             goAML_Transaction     = new reportTransaction();
        //            reportTransactionLate_deposit goAML_LateDeposit     = new reportTransactionLate_deposit();
        //            conduction_type               goAML_conduction_type = new conduction_type();
        //            goAML_LateDeposit.Value = false;
        //            List<reportTransaction>       goAML_TransactionList = new List<reportTransaction>();

        //            t_person_my_client            goAML_MyClient        = new t_person_my_client();
        //            string                        from_funds_code       = "";
        //            t_account                     t_account             = new t_account();
        //            trans_item_type               t_trans_item          = new trans_item_type();
        //            t_trans_item                                        = trans_item_type.E;

        //            double                        rentity_id            = 13;
        //            string                        rentity_branch        = "HeadOffice";

        //            submission_type               submission_code       = new submission_type();
        //            submission_code                                     = submission_type.E;

        //            report_type                   report_code           = new report_type();
        //            report_code   = report_type.STR;

        //            funds_type localfunds_type = new funds_type();
        //            //from_funds_code = localfunds_type.D;
        //            from_funds_code ="D";

                               
        //            string          entity_reference    = string.Format("SBIC{0:yyyyMMdd_HHMMsss}", DateTime.Now);
        //            string          fiu_ref_number      = "SBICZWHX";
        //            System.DateTime submission_date     = System.DateTime.Parse(string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
        //            currency_type   currency_code_local = new currency_type();
        //            currency_code_local = currency_type.USD;

        //            t_person_registration_in_report reporting_person = new t_person_registration_in_report();
  
        //            // Add all the other user details
        //            SysRec = new DataTable();
        //            string SQLStr = "SELECT * FROM tbl_CTR_STR_Reporting_Person WITH (NOLOCK) WHERE Rpt_Inst_ID = 'STR'";
        //            SysRec =  SqlHelper.GetTable(SQLStr);
        //            if (SysRec.Rows.Count > 0)
        //            {
        //                foreach (DataRow Sys_Row in SysRec.Rows)
        //                {
        //                    entity_reference                 = Sys_Row["entity_reference"].ToString();  // = "SBICZWHX";
        //                    fiu_ref_number                   = Sys_Row["fiu_ref_number"].ToString();    // = "SBICZWHX";
        //                    rentity_id                       = Convert.ToInt16(Sys_Row["rentity_id"].ToString());  // = 13;
        //                    reporting_person.first_name      = Sys_Row["first_name"].ToString();
        //                    reporting_person.middle_name     = Sys_Row["middle_name"].ToString();
        //                    reporting_person.last_name       = Sys_Row["last_name"].ToString();
        //                    reporting_person.title           = Sys_Row["title"].ToString();

        //                    reporting_person.birthdate       = Convert.ToDateTime(Sys_Row["Rpt_birthdate"].ToString());
        //                    reporting_person.birth_place     = Sys_Row["Rpt_birth_place"].ToString();
        //                    reporting_person.mothers_name    = Sys_Row["Rpt_mothers_name"].ToString();
        //                    reporting_person.alias           = Sys_Row["Rpt_alias"].ToString();
        //                    reporting_person.ssn             = Sys_Row["Rpt_ssn"].ToString().Trim();
        //                    reporting_person.passport_number = Sys_Row["Rpt_passport_number"].ToString().Trim();
        //                    reporting_person.id_number       = Sys_Row["Rpt_id_number"].ToString().Trim();

        //                    string nationality_1C               = Sys_Row["Rpt_nationality1"].ToString().Trim();
        //                    // reporting_person.nationality1    = Enum.Parse(country_type.ZW.GetType, nationality_1C);
        //                    reporting_person.nationality1       = (country_type)(Enum.Parse(typeof(country_type), nationality_1C));
        //                    // reporting_person.nationality1    = (country_type.ZW.GetType())Enum.Parse(typeof(country_type.ZW.GetType()), nationality_1C);
        //                    reporting_person.nationality1Specified = true;

        //                    string nationality_2C           = Sys_Row["Rpt_nationality1"].ToString().Trim();
        //                   // reporting_person.nationality2 = Enum.Parse(country_type.ZW.GetType, nationality_2C);
        //                    reporting_person.nationality2   = (country_type)(Enum.Parse(typeof(country_type), nationality_2C));
        //                    reporting_person.nationality2Specified = true;

        //                    string nationality_3C           = Sys_Row["Rpt_nationality3"].ToString().Trim();
        //                   // reporting_person.nationality3 = Enum.Parse(country_type.ZW.GetType, nationality_3C);
        //                    reporting_person.nationality3   = (country_type)(Enum.Parse(typeof(country_type), nationality_3C));
        //                    reporting_person.nationality3Specified = true;

        //                    string residence_C           = Sys_Row["Rpt_residence"].ToString().Trim();
        //                   // reporting_person.residence = Enum.Parse(country_type.ZW.GetType, residence_C);
        //                    reporting_person.residence   = (country_type)(Enum.Parse(typeof(country_type), residence_C));
        //                    reporting_person.residenceSpecified = true;

        //                    t_person_registration_in_reportPhones    ReportPerson_Phone        = new t_person_registration_in_reportPhones();
        //                    t_person_registration_in_reportAddresses ReportingPerson_Addresses = new t_person_registration_in_reportAddresses();
        //                    //Dim ReportingPerson_email As Newt_person_registration_in_report()

        //                   t_phone        reporting_person_phones = new t_phone();
        //                   t_entityPhones reporting_person_phone = new t_entityPhones();
        //                   t_person_registration_in_report reporting_person_email_C = new t_person_registration_in_report();
        //                    //Dim reporting_person_email_C As String = ""
        //                    string tph_contact_type_C = Sys_Row["tph_contact_type"].ToString().Trim();

        //                    //reporting_person_phones.tph_contact_type = tph_contact_type_C

        //                    //reporting_person_phones.tph_communication_type = Sys_Row["tph_communication_type"].ToString().Trim()
        //                    //reporting_person_phones.tph_country_prefix = Sys_Row["tph_country_prefix"].ToString().Trim()
        //                    //reporting_person_phones.tph_number = Sys_Row["tph_number"].ToString().Trim()
        //                    //reporting_person_phones.tph_extension = Sys_Row["tph_extension"].ToString().Trim()
        //                    //reporting_person_phones.comments = Sys_Row["comments"].ToString().Trim()

        //                    //reporting_person_phone.phone = [Enum].Parse(goAML_CTR.communication_type.P.GetType, reporting_person_phones.tph_communication_type)

        //                    //reporting_person.phones  = ReportPerson_Phone;
        //                    reporting_person.addresses = ReportingPerson_Addresses;
        //                    //reporting_person.email = Sys_Row["reporting_person_email"].ToString()
        //                    reporting_person.email     = new[] { Sys_Row["email_c"].ToString() };

        //                    ADDRESS_C_temp   = Sys_Row["ADDRESS_C"].ToString();
        //                    entity_reference = string.Format("{0}{1:yyyyMMdd_HHMMsss}", Sys_Row["entity_reference"].ToString(), DateTime.Now);
        //                    fiu_ref_number   = Sys_Row["fiu_ref_number"].ToString(); ;
        //                    //Dim reporting_person_email_C As String = Sys_Row["reporting_person_email"].ToString().Trim
        //                    //reporting_person.email(0) = reporting_person_email_C
        //                }
        //            }

        //            t_address location    = new t_address();
        //            location.address      = ADDRESS_C_temp;
        //            location.address_type = contact_type.Item;
        //            location.city         = "Harare";
        //            location.state        = "Harare";
        //            location.country_code =country_type.ZW;

        //            string reason = "";
        //            string action = "";

        //            goAML_Report.rentity_id          = Convert.ToInt16(rentity_id);
        //            goAML_Report.rentity_branch      = rentity_branch;
        //            goAML_Report.submission_code     = submission_code;
        //            goAML_Report.report_code         = report_code;
        //            goAML_Report.entity_reference    = entity_reference;
        //            goAML_Report.fiu_ref_number      = fiu_ref_number;
        //            goAML_Report.submission_date     = submission_date;
        //            goAML_Report.currency_code_local = currency_code_local;
        //            goAML_Report.reporting_person    = reporting_person;
        //            goAML_Report.location            = location;
        //            goAML_Report.reason              = reason;
        //            goAML_Report.action              = action;

        //            x = new XmlSerializer(goAML_Report.GetType());
        //            x.Serialize(objStreamWriter, goAML_Report);
        //            Temp_goAMLXML  = objStreamWriter.ToString();
        //            XML_Header_Str = Temp_goAMLXML;

        //            Tag_Separator.SetValue("<rentity_id>", 0);
        //            Transaction_Parms = XML_Header_Str.Split(Tag_Separator, StringSplitOptions.None);
        //            Transaction_Parms_Len = Transaction_Parms.Length;
        //            if ((Transaction_Parms_Len > 1))
        //            {
        //                XML_Header_Str = string.Format("{0}{3}{1}{2}{3}", "<report>", "<rentity_id>", Transaction_Parms[1], Environment.NewLine);
        //            }

        //            string internal_ref_number       = "";
        //            string transaction_location      = "";
        //            string transaction_description   = "";
        //            System.DateTime date_transaction = System.DateTime.Now;
        //            string teller     = "";
        //            string authorized = "";
        //           reportTransactionLate_deposit late_deposit = default(reportTransactionLate_deposit);
        //            System.DateTime date_posting              = System.DateTime.Now;
        //            System.DateTime value_date = System.DateTime.Now;
        //            string transmode_code      = ""; 
        //            string transmode_comment   = "";
        //            double amount_local        = 0.0;
        //            string Curr_Code           = "";
        //            Int32 Trxn_Rows            = 0;
        //            bool Finacle_Live          = true;

        //            //if (SqlHelper.DbConnection.State == ConnectionState.Closed)
        //            //{
        //            //    SqlHelper.DbConnection.Open();
        //            //}

        //            string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", AML_Product,e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes);
        //            string Thread_Busy = SqlHelper.GetTable(ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
        //            if (Thread_Busy == "OK FOR POSTING")
        //            {
        //                SqlHelper.RunSql(string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", AML_Product));
        //                SysRec = new DataTable();
        //                SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
        //                SysRec =  SqlHelper.GetTable(SQLStr);
        //                if (SysRec.Rows.Count > 0)
        //                {
        //                    foreach (DataRow Sys_Row in SysRec.Rows)
        //                    {
        //                        Instance_Name     = Sys_Row["Instance_Name_C"].ToString().Trim();
        //                        Econet_Integrated = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
        //                        LCs_Integrated    = Convert.ToBoolean(Sys_Row["LC_Enabled_YN"].ToString());
        //                        Finacle_Live      = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
        //                        CreateTestXML     = Convert.ToBoolean(Sys_Row["Create_TestXML_YN_B"].ToString());
        //                        Curr_License      = Sys_Row["License_Code_C"].ToString().Trim();
        //                        Out_Dir           = Sys_Row["Out_Dir_CTR_STR"].ToString().Trim();
        //                        Svr_Lic_Date      = Sys_Row["Svr_Lic_Date"].ToString().Trim();
        //                    }
        //                }

        //                //Check_License
        //                //Lic_Response_Code = SR_Class.Check_License(Curr_License, 64, "VFY", Svr_Lic_Date);
        //                //if (Lic_Response_Code != 0)
        //                //{
        //                //    XML_Timer.Stop();
        //                //    Interaction.MsgBox("Current System License is either Invalid or has expired - Code (" + Lic_Response_Code.ToString + ")." + Constants.vbCr + "Please Contact Select Technologies for a New License.", MsgBoxStyle.OkOnly + MsgBoxStyle.Critical, "e-Verify License");
        //                //    lbl_Info.Text = "e-Verify Back Office (Licensing Required).";
        //                //    lbl_Info.ForeColor = Color.Red;
        //                //    return;
        //                //}
        //                //else
        //                //{
        //                //    lbl_Info.Text = "e-Verify Back Office ";
        //                //    lbl_Info.ForeColor = SystemColors.MenuHighlight;
        //                //}

        //                // Check if we did not generate the file for today

        //                if (Finacle_Live)
        //                {
        //                    SQL_Str = "SELECT MAX(convert(varchar(10),File_Import_Date_D,25)) as File_Import_Date_D  FROM dbo.tbl_FileHistory WITH (NOLOCK) WHERE STR_Exported_B = 0";
        //                    SysRec = SqlHelper.GetTable(SQL_Str);
        //                    if (SysRec.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Sys_Row in SysRec.Rows)
        //                        {
        //                            if (IsDate(Sys_Row["File_Import_Date_D"].ToString()))
        //                            {
        //                                Bnk_RunDate      = Convert.ToDateTime(Sys_Row["File_Import_Date_D"].ToString());
        //                                AsAtDate         = Convert.ToDateTime(Sys_Row["File_Import_Date_D"].ToString());
        //                                Days_Difference  = 0;
        //                            }
        //                            else
        //                            {
        //                                Bnk_RunDate     = DateTime.Now.Date;
        //                                AsAtDate        = DateTime.Now.Date.AddDays(7);
        //                                Days_Difference = 7;
        //                            }
        //                        }
        //                    }
        //                }
        //                else
        //                {
        //                    SQLStr = "SELECT Bnk_RunDate,(Select AsAtDate from tblsysvalues WITH (NOLOCK)) AsAtDate, datediff(dd, Bnk_RunDate,(Select AsAtDate from tblsysvalues)) as Days_Difference from EXBNKFLE WITH (NOLOCK)";
        //                    SysRec = SqlHelper.GetTable(SQLStr);
        //                    if (SysRec.Rows.Count > 0)
        //                    {
        //                        foreach (DataRow Sys_Row in SysRec.Rows)
        //                        {
        //                            Bnk_RunDate     = Convert.ToDateTime(Sys_Row["Bnk_RunDate"].ToString());
        //                            AsAtDate        = Convert.ToDateTime(Sys_Row["AsAtDate"].ToString());
        //                            Days_Difference = Convert.ToInt32(Sys_Row["Days_Difference"].ToString());
        //                        }
        //                    }
        //                }

        //                Out_File_Name = string.Format("{0}\\{2}_{3:yyyyMMdd}{4:HHmmsss}_{1:###0}.xml", Out_Dir,Curr_Run_No, AML_Product, Bnk_RunDate, System.DateTime.Now);

        //                string RunStatus = SqlHelper.GetTable("exec [dbo].[usp_CheckSTR_Status]").Rows[0][0].ToString();
        //                if ((RunStatus == "OK FOR POSTING"))
        //                {
        //                    //If 1 = 1 Then
        //                    string Trn_Desc_Dr = "";
        //                    SQLStr = string.Format("SELECT * FROM vw_goAML_STR_Transaction WHERE Posted_YN = 0 and authorized = 1 and authorized_by is not null Order by STR_Inst ASC", Bnk_RunDate);
        //                    //SQLStr = String.Format("SELECT * FROM vw_GoAML_Transaction WHERE TRH_TR_Type_C in ('03','04')", Bnk_RunDate)
        //                    Curr_Rec =  SqlHelper.GetTable(SQLStr);
        //                    if (Curr_Rec.Rows.Count > 0)
        //                    {
        //                        Trxn_Rows = Curr_Rec.Rows.Count;
        //                        foreach (DataRow Row1 in Curr_Rec.Rows)
        //                        {
        //                            transactionnumber       = Row1["STR_Inst"].ToString().Trim();
        //                            internal_ref_number     = Row1["internal_ref_number"].ToString().Trim();
        //                            transaction_location    = Row1["transaction_location"].ToString().Trim();
        //                            string trandescript     =  string.IsNullOrEmpty(Row1["transaction_description"].ToString()) ? "" : Row1["transaction_description"].ToString();

        //                            transaction_description = Sr_Class_Local.RemoveInvalidXmlChars(trandescript);
        //                            date_transaction = System.DateTime.Parse(string.Format("{0:yyyy-MM-dd}", Row1["date_posting"]).ToString());
        //                            teller       = Row1["teller"].ToString().Trim();
        //                            authorized   = Row1["authorized_by"].ToString().Trim();
        //                            late_deposit = goAML_LateDeposit;
        //                            date_posting = System.DateTime.Parse(string.Format("{0:yyyy-MM-dd}", Row1["date_posting"]).ToString());
        //                            value_date   = System.DateTime.Parse(string.Format("{0:yyyy-MM-dd}", Row1["date_posting"]).ToString());
        //                            transmode_code = Row1["transmode_code"].ToString().Trim();
        //                            //transmode_code = "E"
        //                            transmode_comment = Row1["transmode_comment"].ToString().Trim();
        //                            amount_local = Convert.ToDouble(string.Format("{0:0.00}", Math.Abs(Convert.ToDouble(Row1["amount_local"]))));

        //                            Curr_Code = Row1["From_currency_code"].ToString().Trim();

        //                            from_funds_code = Row1["From_funds_code"].ToString().Trim();
        //                            t_account = new t_account();
        //                            t_account.account = Row1["From_account"].ToString().Trim();
        //                            t_account.account_name = Sr_Class_Local.RemoveInvalidXmlChars(Row1["From_account_name"].ToString().Trim());
        //                            t_account.balance = Convert.ToDecimal(string.Format("{0:0.00}", Math.Abs(Convert.ToDouble(Row1["amount_local"]))));

        //                            t_account.branch = Row1["From_branch"].ToString().Trim();

        //                            //Dim fromCurrCodeTmp As String = Row1["From_currency_code"].ToString().Trim

        //                            //t_account.currency_code = [Enum].Parse(goAML_CTR.currency_type.USD.GetType, fromCurrCodeTmp)

        //                            //t_account.currency_code = "USD"

        //                            t_account.client_number = Row1["From_account"].ToString().Trim();
        //                            //t_account.date_balance = string.Format("{0:yyyy-MM-dd}T00:00:00", Convert.ToDateTime(Row1["date_posting"].ToString()));
        //                            t_account.date_balance =  Convert.ToDateTime(Row1["date_posting"].ToString());

        //                            from_account_str = "";
        //                            //from_account_str += String.Format(" <transmode_code>{1}</transmode_code>{0}", Environment.NewLine, "E")
        //                            //from_account_str += String.Format(" <transmode_comment></transmode_comment>{0}", Environment.NewLine, "E")
        //                            from_account_str += string.Format(" <t_from_my_client>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <from_funds_code>{1}</from_funds_code>{0}", Environment.NewLine, Row1["From_funds_code"].ToString().Trim());
        //                            from_account_str += string.Format("       <from_funds_comment>{1}</from_funds_comment>{0}", Environment.NewLine, Row1["From_funds_comment"].ToString().Trim());
        //                            from_account_str += string.Format("       <from_account>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <institution_name>{1} BANK</institution_name>{0}", Environment.NewLine, Row1["From_institution_name"].ToString().Trim());
        //                            from_account_str += string.Format("         <institution_code>{1}</institution_code>{0}", Environment.NewLine, Row1["From_institution_code"].ToString().Trim());
        //                            from_account_str += string.Format("         <branch>{1}</branch>{0}", Environment.NewLine, Row1["From_branch"].ToString().Trim());
        //                            from_account_str += string.Format("         <account>{1}</account>{0}", Environment.NewLine, Row1["From_account"].ToString().Trim());
        //                            from_account_str += string.Format("         <currency_code>{1}</currency_code>{0}", Environment.NewLine, Row1["From_currency_code"].ToString().Trim());
        //                            from_account_str += string.Format("         <account_name>{1}</account_name>{0}", Environment.NewLine, Row1["From_account_name"].ToString().Trim());
        //                            from_account_str += string.Format("         <iban>{1}</iban>{0}", Environment.NewLine, Row1["From_account"].ToString().Trim());
        //                            from_account_str += string.Format("         <client_number>{1}</client_number>{0}", Environment.NewLine, Row1["From_account"].ToString().Trim());
        //                            from_account_str += string.Format("         <personal_account_type>{1}</personal_account_type>{0}", Environment.NewLine, Row1["From_personal_account_type"].ToString().Trim());
        //                            string From_DateOpened = string.Format("{0:yyyy-MM-dd}T00:00:00", System.DateTime.Today);
        //                            if (IsDate(Row1["From_opened"].ToString()))
        //                            {
        //                                From_DateOpened = string.Format("{0:yyyy-MM-dd}T00:00:00", Convert.ToDateTime(Row1["From_opened"].ToString()));
        //                            }
        //                            //from_account_str += String.Format(" 				<opened>{1}</opened>{0}", Environment.NewLine, From_DateOpened)
        //                            //from_account_str += String.Format(" 				<t_entity> {0}", Environment.NewLine)
        //                            //from_account_str += String.Format("                 <name></name>{0}", Environment.NewLine)
        //                            //from_account_str += String.Format(" 				</t_entity>{0}", Environment.NewLine)
        //                            //from_account_str += String.Format("                 <t_entity></t_entity>{0}", Environment.NewLine)
        //                            from_account_str += string.Format("         <signatory>{0}", Environment.NewLine);
        //                            string IsPrimary = "true";
        //                            if (string.IsNullOrEmpty(Row1["From_is_primary"].ToString()))
        //                            {
        //                                IsPrimary = "false";
        //                            }
        //                            else
        //                            {
        //                                if ( System.Convert.IsDBNull(Row1["From_is_primary"]))
        //                                {
        //                                    IsPrimary = "false";
        //                                }
        //                                else
        //                                {
        //                                    IsPrimary = "true";
        //                                }
        //                            }
        //                            from_account_str += string.Format("                  <is_primary>{1}</is_primary>{0}", Environment.NewLine, IsPrimary);
        //                            from_account_str += string.Format("                  <t_person> {0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <gender>{1}</gender>{0}", Environment.NewLine, Row1["From_gender"].ToString().Trim());
        //                            from_account_str += string.Format("                    <title>{1}</title>{0}", Environment.NewLine, Row1["From_title"].ToString().Trim());
        //                            from_account_str += string.Format("                    <first_name>{1}</first_name>{0}", Environment.NewLine, Row1["From_first_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <middle_name>{1}</middle_name>{0}", Environment.NewLine, Row1["From_middle_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <last_name>{1}</last_name>{0}", Environment.NewLine, Row1["From_last_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <birthdate>{1}</birthdate>{0}", Environment.NewLine, "1988-04-18T00:00:00");
        //                            from_account_str += string.Format("                    <birth_place></birth_place>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <mothers_name></mothers_name>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <alias></alias>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <ssn></ssn>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <passport_number>{1}</passport_number>{0}", Environment.NewLine, "AN000000");
        //                            from_account_str += string.Format("                    <passport_country>{1}</passport_country>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality1>{1}</nationality1>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality2>{1}</nationality2>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality3>{1}</nationality3>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <residence>{1}</residence>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <phones>{1}</phones>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format("                      <addresses>{1}</addresses>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format("                  </t_person>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         </signatory>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <opened>{1}</opened>{0}", Environment.NewLine, From_DateOpened);
        //                            from_account_str += string.Format("         <closed>{1}</closed>{0}", Environment.NewLine, From_DateOpened);
        //                            from_account_str += string.Format("         <balance>{1}</balance>{0}", Environment.NewLine, "0.00");
        //                            //from_account_str += String.Format(" 				<date_balance>{1}</date_balance>{0}", Environment.NewLine, String.Format("{0:yyyy-MM-dd HH:mm:ss}", DateAndTime.Now))
        //                            from_account_str += string.Format("         <date_balance>{1}</date_balance>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                            from_account_str += string.Format("         <status_code>{1}</status_code>{0}", Environment.NewLine, "A");
        //                            from_account_str += string.Format("       </from_account>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("       <from_country>{1}</from_country>{0}", Environment.NewLine, Row1["From_from_country"].ToString().Trim());
        //                            from_account_str += string.Format("     </t_from_my_client>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("     <t_to_my_client>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <to_funds_code>{1}</to_funds_code>{0}", Environment.NewLine, Row1["To_funds_code"].ToString().Trim());
        //                            from_account_str += string.Format("       <to_funds_comment>{1}</to_funds_comment>{0}", Environment.NewLine, Row1["To_funds_comment"].ToString().Trim());
        //                            from_account_str += string.Format("       <to_account>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <institution_name>{1}</institution_name>{0}", Environment.NewLine, Row1["To_institution_name"].ToString().Trim());
        //                            from_account_str += string.Format("         <institution_code>{1}</institution_code>{0}", Environment.NewLine, Row1["To_institution_code"].ToString().Trim());
        //                            from_account_str += string.Format("         <branch>{1}</branch>{0}", Environment.NewLine, Row1["To_branch"].ToString().Trim());
        //                            from_account_str += string.Format("         <account>{1}</account>{0}", Environment.NewLine, Row1["To_account"].ToString().Trim());
        //                            from_account_str += string.Format("         <currency_code>{1}</currency_code>{0}", Environment.NewLine, Row1["To_currency_code"].ToString().Trim());
        //                            from_account_str += string.Format("         <account_name>{1}</account_name>{0}", Environment.NewLine, Row1["To_account_name"].ToString().Trim());
        //                            from_account_str += string.Format("         <iban>{1}</iban>{0}", Environment.NewLine, Row1["To_iban"].ToString().Trim());
        //                            from_account_str += string.Format("         <client_number>{1}</client_number>{0}", Environment.NewLine, Row1["To_client_number"].ToString().Trim());
        //                            from_account_str += string.Format("         <personal_account_type>{1}</personal_account_type>{0}", Environment.NewLine, Row1["To_personal_account_type"].ToString().Trim());
        //                            string To_DateOpened = string.Format("{0:yyyy-MM-dd}T00:00:00", System.DateTime.Today);
        //                            if (IsDate(Row1["To_opened"].ToString()))
        //                            {
        //                                To_DateOpened = string.Format("{0:yyyy-MM-dd}T00:00:00", Convert.ToDateTime(Row1["To_opened"].ToString()));
        //                            }
        //                            //from_account_str += String.Format(" 				<opened>{1}</opened>{0}", Environment.NewLine, To_DateOpened)

        //                            from_account_str += string.Format("         <t_entity> {0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <name>{1}</name>{0}", Environment.NewLine, Row1["To_institution_name"].ToString().Trim());
        //                            from_account_str += string.Format("                     <commercial_name></commercial_name>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <incorporation_legal_form>{1}</incorporation_legal_form>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                     <incorporation_number>{1}</incorporation_number>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                     <business></business>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <phones></phones>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <addresses></addresses>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <email>{1}</email>{0}", Environment.NewLine, "email@gmail.com");
        //                            from_account_str += string.Format("                     <url></url>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <incorporation_state></incorporation_state>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <incorporation_country_code>{1}</incorporation_country_code>{0}", Environment.NewLine, "-");
        //                            //from_account_str += String.Format("                     <director_id></director_id>{0}", Environment.NewLine) 
        //                            from_account_str += string.Format("                     <director_id>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                         <gender>{1}</gender>{0}", Environment.NewLine, Row1["From_gender"].ToString().Trim());
        //                            from_account_str += string.Format("                         <title>{1}</title>{0}", Environment.NewLine, Row1["From_title"].ToString().Trim());
        //                            from_account_str += string.Format("                         <first_name>{1}</first_name>{0}", Environment.NewLine, Row1["From_first_name"].ToString().Trim());
        //                            from_account_str += string.Format("                         <middle_name>{1}</middle_name>{0}", Environment.NewLine, Row1["From_middle_name"].ToString().Trim());
        //                            from_account_str += string.Format("                         <prefix>{1}</prefix>{0}", Environment.NewLine, Row1["From_title"].ToString().Trim());
        //                            from_account_str += string.Format("                         <last_name>{1}</last_name>{0}", Environment.NewLine, Row1["From_last_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <birthdate>{1}</birthdate>{0}", Environment.NewLine, "1980-01-08T00:00:00");
        //                            from_account_str += string.Format("                    <birth_place></birth_place>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <mothers_name></mothers_name>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <alias></alias>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <ssn></ssn>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <passport_number>{1}</passport_number>{0}", Environment.NewLine, "BN00000");
        //                            //from_account_str += String.Format(" 						<id_number>{1}</id_number>{0}", Environment.NewLine, "70-699999A-63")
        //                            from_account_str += string.Format("                    <passport_country>{1}</passport_country>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality1>{1}</nationality1>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality2>{1}</nationality2>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality3>{1}</nationality3>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <residence>{1}</residence>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <phones>{1}</phones>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format("                      <addresses>{1}</addresses>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format("                    <email>{1}</email>{0}", Environment.NewLine, "mail@gmail.com");
        //                            from_account_str += string.Format("                    <occupation>{1}</occupation>{0}", Environment.NewLine, "Director");
        //                            from_account_str += string.Format("                    <employer_name></employer_name>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <employer_address_id>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <address_type>{1}</address_type>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                        <address>{1}</address>{0}", Environment.NewLine, Row1["address_C"].ToString().Trim());
        //                            from_account_str += string.Format("                        <town></town>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <city>{1}</city>{0}", Environment.NewLine, Row1["city"].ToString().Trim());
        //                            from_account_str += string.Format("                        <zip></zip>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <country_code>{1}</country_code>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    </employer_address_id>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <employer_phone_id>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <tph_contact_type>{1}</tph_contact_type>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                        <tph_communication_type>{1}</tph_communication_type>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                        <tph_country_prefix>{1}</tph_country_prefix>{0}", Environment.NewLine, "+263");
        //                            from_account_str += string.Format("                        <tph_number>{1}</tph_number>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                        <tph_extension></tph_extension>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <comments></comments>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    </employer_phone_id>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <identification>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <type>{1}</type>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                        <number></number>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <issue_date>{1}</issue_date>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                            from_account_str += string.Format("                        <expiry_date>{1}</expiry_date>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                            from_account_str += string.Format("                        <issued_by></issued_by>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                        <issue_country>{1}</issue_country>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    </identification>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <deceased></deceased>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <date_deceased>{1}</date_deceased>{0}", Environment.NewLine, "1980-01-08T00:00:00");
        //                            from_account_str += string.Format("                    <tax_number></tax_number>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <tax_reg_number></tax_reg_number>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <source_of_wealth></source_of_wealth>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <comments></comments>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <role>{1}</role>{0}", Environment.NewLine, "-");
        //                            from_account_str += string.Format("                     </director_id>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <incorporation_date>{1}</incorporation_date>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                            from_account_str += string.Format("                     <business_closed></business_closed>{0}", Environment.NewLine, "0");
        //                            from_account_str += string.Format("                     <date_business_closed>{1}</date_business_closed>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                            from_account_str += string.Format("                     <tax_number></tax_number>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <tax_reg_number></tax_reg_number>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                     <comments></comments>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         </t_entity>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <signatory>{0}", Environment.NewLine);
        //                            if (string.IsNullOrEmpty(Row1["To_is_primary"].ToString()))
        //                            {
        //                                IsPrimary = "false";
        //                            }
        //                            else
        //                            {
        //                               IsPrimary = "true";
        //                            }
        //                            from_account_str += string.Format("                  <is_primary>{1}</is_primary>{0}", Environment.NewLine, IsPrimary);
        //                            from_account_str += string.Format("                  <t_person>{0}", Environment.NewLine, Row1["To_currency_code"].ToString().Trim());
        //                            from_account_str += string.Format("                    <gender>M</gender>{0}", Environment.NewLine, Row1["To_gender"].ToString().Trim());
        //                            from_account_str += string.Format("                    <title>{1} </title>{0}", Environment.NewLine, Row1["To_title"].ToString().Trim());
        //                            from_account_str += string.Format("                    <first_name>{1}</first_name>{0}", Environment.NewLine, Row1["To_first_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <middle_name>{1}</middle_name>{0}", Environment.NewLine, Row1["To_middle_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <last_name>{1}</last_name>{0}", Environment.NewLine, Row1["To_last_name"].ToString().Trim());
        //                            from_account_str += string.Format("                    <birthdate>{1}</birthdate>{0}", Environment.NewLine, "1980-05-21T00:00:00");
        //                            from_account_str += string.Format("                    <birth_place></birth_place>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <mothers_name></mothers_name>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <alias></alias>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <ssn></ssn>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("                    <passport_number>{1}</passport_number>{0}", Environment.NewLine, "BN99999");
        //                            //from_account_str += String.Format(" 						<id_number>{1}</id_number>{0}", Environment.NewLine, "70-699999A-63")
        //                            from_account_str += string.Format("                    <passport_country>{1}</passport_country>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality1>{1}</nationality1>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality2>{1}</nationality2>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <nationality3>{1}</nationality3>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <residence>{1}</residence>{0}", Environment.NewLine, "ZW");
        //                            from_account_str += string.Format("                    <phones>{1}</phones>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format("                      <addresses>{1}</addresses>{0}", Environment.NewLine, "");
        //                            from_account_str += string.Format("                  </t_person>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         </signatory>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <opened>{1}</opened>{0}", Environment.NewLine, To_DateOpened);
        //                            from_account_str += string.Format("         <closed>{1}</closed>{0}", Environment.NewLine, To_DateOpened);
        //                            from_account_str += string.Format("         <balance>{1}</balance>{0}", Environment.NewLine, "0.00");
        //                            from_account_str += string.Format("         <date_balance>{1}</date_balance>{0}", Environment.NewLine, string.Format("{0:yyyy-MM-dd}T00:00:00", DateTime.Now));
        //                            from_account_str += string.Format("         <status_code>{1}</status_code>{0}", Environment.NewLine, "A");
        //                            from_account_str += string.Format("       </to_account>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("       <to_country>{1}</to_country>{0}", Environment.NewLine, Row1["To_from_country"].ToString().Trim());
        //                            from_account_str += string.Format("    </t_to_my_client>{0}", Environment.NewLine);

        //                            from_account_str += string.Format("    <goods_services>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("         <item>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("              <item_type>{1}</item_type>{0}", Environment.NewLine, Row1["item_type"].ToString().Trim());
        //                            from_account_str += string.Format("         </item>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("    </goods_services>{0}", Environment.NewLine);
        //                            from_account_str += string.Format("    <comments></comments>", Environment.NewLine, Row1["comments_C"].ToString().Trim());

        //                            goAML_MyClient = new t_person_my_client();

        //                            goAML_MyClient.first_name = Row1["first_name"].ToString().Trim();
        //                            goAML_MyClient.last_name = Row1["last_name"].ToString().Trim();
        //                            goAML_MyClient.middle_name = Row1["middle_name"].ToString().Trim();
        //                            goAML_MyClient.nationality1 =country_type.ZW;

        //                            goAML_Transaction.transactionnumber = transactionnumber;
        //                            goAML_Transaction.internal_ref_number = internal_ref_number;
        //                            goAML_Transaction.transaction_location = transaction_location;
        //                            goAML_Transaction.transaction_description = transaction_description;
        //                            goAML_Transaction.date_transaction = date_transaction;
        //                            goAML_Transaction.teller = teller;
        //                            goAML_Transaction.authorized = authorized;
        //                            goAML_Transaction.late_deposit = goAML_LateDeposit;
        //                            goAML_Transaction.date_posting = date_posting;
        //                            goAML_Transaction.value_date = value_date;
        //                            //goAML_Transaction.transmode_code = transmode_code
        //                            //goAML_Transaction.transmode_code = 2;
        //                            goAML_Transaction.transmode_code = conduction_type.A;                              
        //                            goAML_Transaction.transmode_comment = transmode_comment;
        //                            goAML_Transaction.amount_local = Convert.ToDecimal(amount_local);

        //                            ///goAML_TransactionList.Add(goAML_Transaction)

        //                            string TransactionXML = null;
        //                            objStreamWriter = new StringWriter();
        //                            x = new XmlSerializer(goAML_Transaction.GetType());
        //                            x.Serialize(objStreamWriter, goAML_Transaction);
        //                            Temp_goAMLXML = objStreamWriter.ToString();

        //                            Tag_Separator.SetValue("<transactionnumber>", 0);
        //                            Transaction_Parms = Temp_goAMLXML.Split(Tag_Separator, StringSplitOptions.None);
        //                            Transaction_Parms_Len = 0;
        //                            Transaction_Parms_Len = Transaction_Parms.Length;
        //                            if ((Transaction_Parms_Len > 1))
        //                            {
        //                                TransactionXML = string.Format("{0}{1}{2}", "<transaction><transactionnumber>", Transaction_Parms[1].Replace("</reportTransaction>", "</transaction>"), Environment.NewLine);
        //                                TransactionXML = TransactionXML.Replace("</late_deposit>", string.Format("</late_deposit>{2}  <date_posting>{0:yyyy-MM-ddTHH:mm:ss}</date_posting>{2}  <value_date>{1:yyyy-MM-ddTHH:mm:ss}</value_date>{2}", date_posting, value_date, Environment.NewLine));
        //                                //TransactionXML = String.Format("{0}<date_posting>{3}</date_posting><value_date>{4}</value_date><transactionnumber>{1}{2}", "<transaction>", Transaction_Parms(1).Replace("</reportTransaction>", "</transaction>"), Environment.NewLine, date_posting, value_date)
        //                            }
        //                            TransactionXML = TransactionXML.Replace("</amount_local>", string.Format("</amount_local>{0}{1}", Environment.NewLine, from_account_str));
        //                            Transaction_Str += TransactionXML;

        //                            //Dim oWrite As StreamWriter
        //                            //oWrite = File.WriteAllText(Out_File_Name, goAML_Transaction.Items())
        //                            //oWrite.Close()
        //                            //Using objWriter As New System.IO.StreamWriter(Out_File_Name)
        //                            //    For Each Row As DataRow In Data_Rec.Rows
        //                            //        ' Normal Transactions
        //                            //        objWriter.WriteLine(Row["Rec_Str"))
        //                            //    Next
        //                            //    If TrxnDB.DbConnection.State = ConnectionState.Open Then
        //                            //        TrxnDB.DbConnection.Close()
        //                            //    End If
        //                            //    objWriter.Close()
        //                            //End Using

        //                            // Increase Run Number
        //                            // Mark the record has having been run.
        //                            SQLStr = string.Format("UPDATE tbl_STR_Master SET Posted_YN = 1 WHERE STR_Inst = '{0}'", transactionnumber);
        //                            SqlHelper.RunSql(SQLStr);
        //                        }
        //                        SQLStr = string.Format("UPDATE tbl_SysParam SET CTR_File_Force_Write_B = 0", transactionnumber);
        //                        SqlHelper.RunSql(SQLStr);
        //                    }
        //                    XML_Header_Str = XML_Header_Str.Replace("</report>", Transaction_Str);
        //                    XML_Header_Str += "</report>";
        //                    XML_Header_Str += Environment.NewLine;
        //                    // Write out the XML File
        //                    if (Trxn_Rows > 0)
        //                    {
        //                        File.WriteAllText(Out_File_Name, XML_Header_Str);
        //                    }

        //                    SQLStr = string.Format("UPDATE tbl_FileHistory SET STR_Exported_B = 1 WHERE convert(varchar(10),File_Import_Date_D,25) = '{0:yyyy-MM-dd}'", Bnk_RunDate);
        //                    SqlHelper.RunSql(SQLStr);
        //                }
        //            }
        //            LogStep("CreateAML_File_STR Step 0", "CreateAML_File_STR Main Exit");
        //           SqlHelper.RunSql(string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", AML_Product));
        //        }
        //    }
        //    catch (Exception CTR_Expt)
        //    {
        //        string retErr = LogError(CTR_Expt.GetHashCode().ToString(), "CreateAML_File_STR", CTR_Expt, transactionnumber);
        //        //Interaction.MsgBox(Err_Stack(ex));
        //    }
        //}
   

        protected bool IsDate(String date)
        {
            try
            {
                DateTime dt = DateTime.Parse(date);
                return true;
            }
            catch
            {
                return false;
            }
        }
        //=======================================================


        //public string fn_Post_to_Barclays_Brains()
        //{
        //    LogStep("fn_Post_to_Barclays_Brains Step 0", "fn_Post_to_Barclays_Brains");
        //     //if  System.Configuration.ConfigurationManager.AppSettings[]

        //    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Waste_File_Create == false)
        //    {
        //        LogStep("fn_Post_to_Barclays_Brains Step 1", "fn_Post_to_Barclays_Brains Waste_File_Create == false. Procedure exiting");
        //        return "4";
        //    }
        //    else
        //    {
        //        LogStep("fn_Post_to_Barclays_Brains Step 2", "fn_Post_to_Barclays_Brains  Main procedure Entry");
        //        //int File_Loop_Max = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
        //        bool Proxy_InUse             = true;
        //        string BranchID              = "";
        //        string Processing_ID         = "";
        //        string Proxy_User            = "";
        //        string Proxy_Password        = "";
        //        string SMS_API_User          = "";
        //        string SMS_API_Pwd           = "";
        //        string Target_SMS_IMSISDN    = "";
        //        string Target_Reg_User       = "";
        //        string Target_Reg_Acc        = "";
        //        string InstNo                = "";
        //        string SQLStr                = "";
        //        string Selcom_UserId         = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
        //        string SelCom_UserPass       = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];
        //        string Num_Retries           = "0";
        //        string Last_Retry_Time       = "";
        //        string Extracted_YN          = "";

        //        int constNum                 = 0;
        //        int content_Lenght           = 0;
        //        string lastPart              = "";

        //        string Curr_Code             = "";
        //        string Curr_Short_Name       = "";

        //        string Posting_Entities      = "(";
        //        string Trn_GUID              = "";
        //        string rec_ID                = "";
        //        string rec_Type              = "";
        //        string rec_content           = "";
        //        string OutDir                = "";
        //        string BackupDir             = "";
        //        string OutDir_BackupFile     = "";
        //        string BackupDir_Backup_File = "";
        //        string WS_Content            = "";
        //        string WS_Content_Temp       = "";
            
        //        string WT_OPERATOR_NAME      = "";
        //        string Trn_Ref;
        //        string Str_TrnAmnt;
        //        string RunNo                 = "";
        //        bool   BranchPostingStatus   = false;
        //        string TerminalNo            = "";
        //        bool   POST_TO_ZIMRA_AFTER_BRAINS_POSTING = false;
        //        bool   POST_TO_ZIMRA_ON_AUTHORIZATION     = false;
        //        byte[] MemoryLongByte        = new byte[0];

        //        try
        //        {
        //            string ForcedTiming  = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", "WASTE_F", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes);
        //            string Thread_Busy   =  SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"],ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
        //            if (Thread_Busy == "OK FOR POSTING")
        //            {
        //                SqlHelper.RunSql(String.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", "WASTE_F"));
                       
        //                m_databaseClass = new Select_Research.SQLDB(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"]);

        //                // Check if Entity Posting is Allowed
        //                SQLStr           = "SELECT * FROM tbl_Entities WITH (NOLOCK) WHERE Entity_Posting_Allowed_YN_B = 1";
        //                DataTable SysRec = new DataTable();
        //                SysRec           = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                if (SysRec.Rows.Count > 0)
        //                {
        //                    bool   Posting_Status_Tmp = false;
        //                    string Entity_ID_C_Tmp  = "";
        //                    foreach (DataRow Sys_Row in SysRec.Rows)
        //                    {
        //                        Entity_ID_C_Tmp    = Sys_Row["Entity_ID_C"].ToString().Trim();
        //                        SQLStr             = string.Format("[dbo].[ustp_CheckProcessingStatus_Barc] @Entity_ID_C = '{0}'", Entity_ID_C_Tmp);
        //                        Posting_Status_Tmp = Convert.ToBoolean(m_databaseClass.getDataSet(SQLStr).Tables[0].Rows[0]["Posting_Status"]);
        //                        if (Posting_Status_Tmp)
        //                        {
        //                            Posting_Entities += string.Format("'{0}',", Entity_ID_C_Tmp);
        //                        }
        //                    }
        //                    Posting_Entities += ")";
        //                    Posting_Entities = Posting_Entities.Replace(",)", ")");
        //                    if (Posting_Entities == "()")
        //                    {
        //                        Posting_Entities = "";
        //                    }
        //                    else
        //                    {
        //                        Posting_Entities = string.Format(" AND TRH_Acc_Group_C IN {0} ", Posting_Entities);
        //                    }
        //                }
        //                SysRec = null;

        //                SysRec = new DataTable();
        //                SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID  FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('POST_TO_ZIMRA_AFTER_BRAINS_POSTING','POST_TO_ZIMRA_ON_AUTHORIZATION') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
        //                SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                if (SysRec.Rows.Count > 0)
        //                {
        //                    foreach (DataRow param_Row in SysRec.Rows)
        //                    {
        //                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "POST_TO_ZIMRA_AFTER_BRAINS_POSTING".ToUpper()) POST_TO_ZIMRA_AFTER_BRAINS_POSTING = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
        //                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "POST_TO_ZIMRA_ON_AUTHORIZATION".ToUpper())     POST_TO_ZIMRA_ON_AUTHORIZATION     = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
        //                    }
        //                }
        //                {
        //                    // Read Transactions from Table 
        //                    // Group per Currency Code per Branch
        //                    SQLStr   = String.Format("SELECT DISTINCT Tr.Curr_ShortName_C AS Trn_Curr_Code, Tc.Curr_Short_Name AS Curr_Short_Name, Tc.Curr_Run_No_N, Tr.TRH_Branch_Code, Tbr.Terminal_No, (SELECT TOP 1 OutFileDir FROM dbo.tbl_SysParam WITH(NOLOCK) WHERE ParamID  = 'CTL') As OutDir, (SELECT TOP 1 BackupDir FROM dbo.tbl_SysParam WITH(NOLOCK) WHERE ParamID  = 'CTL') As BackupDir  FROM EXTRHFLE Tr, tbl_Currencies Tc, tbl_Branches Tbr Where Tbr.Bank_ID = 'BLB' AND  (Tr.Curr_ShortName_C = Tc.Curr_Short_Name AND Tr.TRH_Posted = 0 AND Tr.TRH_Rejected_YN_B = 0 AND Tbr.Branch_Code = Tr.TRH_Branch_Code ) AND ((Tbr. Is_BackVerify_YN  = 1 AND Tr.TRH_Mgr_Approved = 1) OR (Tbr.Is_BackVerify_YN = 0))  {0}", Posting_Entities);
        //                    DataTable Curr_Rec = new DataTable();
        //                    //Curr_Rec = m_databaseClass.getDataSet(SQLStr).Tables[0];
        //                    Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                    if (Curr_Rec != null && Curr_Rec.Rows.Count > 0)
        //                    {
        //                        WS_Content = "";
        //                        foreach (DataRow Curr_Row in Curr_Rec.Rows)
        //                        {
        //                            Curr_Code       = Curr_Row["Trn_Curr_Code"].ToString().Trim();
        //                            Curr_Short_Name = Curr_Row["Curr_Short_Name"].ToString().Trim();
        //                            BranchID        = Curr_Row["TRH_Branch_Code"].ToString().Trim();
        //                            TerminalNo      = Curr_Row["Terminal_No"].ToString().Trim().PadLeft(2, (char)48);
        //                            OutDir          = Curr_Row["OutDir"].ToString().Trim();
        //                            BackupDir       = Curr_Row["BackupDir"].ToString().Trim();

        //                            if (!OutDir.EndsWith(@"\"))    OutDir    = OutDir    + @"\";
        //                            if (!BackupDir.EndsWith(@"\")) BackupDir = BackupDir + @"\";

        //                            // Check if Number of Files per Branch have reached Max for the day
        //                            SQLStr = string.Format("[dbo].[ustp_GetBrains_RunNo] @Trxn_Prod_ID = 'ZIMRA{0}{1}', @Entity_ID_C ='ZIMRA'", BranchID, TerminalNo);
        //                            SysRec = new DataTable();
        //                            SysRec = m_databaseClass.getDataSet(SQLStr).Tables[0];
        //                            if (SysRec.Rows.Count > 0)
        //                            {
        //                                foreach (DataRow RunRow in SysRec.Rows)
        //                                {
        //                                    RunNo               = RunRow["Run_NoC"].ToString().Trim().PadLeft(2, (char)48);
        //                                    BranchPostingStatus = RunRow["PostingStatus"].ToString().Trim() == "OK FOR POSTING" ? true : false;
        //                                }
        //                            }

        //                            if (BranchPostingStatus)
        //                            {
        //                                SQLStr   = String.Format("UPDATE tbl_Run_Days SET Trxn_RunNo_N = Trxn_RunNo_N + 1 , run_Time = CURRENT_TIMESTAMP WHERE Trxn_Prod_ID = 'ZIMRA{0}{1}' AND CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) = CONVERT(VARCHAR(10),Trxn_Date_D,25)", BranchID, TerminalNo);
        //                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                                Trn_GUID = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("EXEC [dbo].[ustp_Mark_Batch] @Curr_Code  = '{0}'", Curr_Code)).Rows[0][0].ToString();
        //                                //SQLStr   = String.Format("UPDATE EXTRHFLE SET Processing_Num = Processing_Num + 1,  Processing_ID = '{0}', Processing_Time = CASE WHEN (Processing_Time IS NULL) THEN CURRENT_TIMESTAMP ELSE Processing_Time END WHERE TRH_ID IN ( SELECT TOP 90 TRH_ID FROM EXTRHFLE WITH (NOLOCK) WHERE Processing_ID IS NULL AND TRH_Mgr_Approved = '1' AND TRH_Posted = 0 AND Curr_ShortName_C = '{1}' AND TRH_Branch_Code = '{3}' {4}  {2} ORDER BY TRH_ID ASC) ", Trn_GUID, Curr_Code, Posting_Entities, BranchID, ((POST_TO_ZIMRA_ON_AUTHORIZATION) ? " AND TRH_Extracted = 1 " :"") );
        //                                SQLStr = String.Format("UPDATE EXTRHFLE SET Processing_Num = Processing_Num + 1,  Processing_ID = '{0}', Processing_Time = CASE WHEN (Processing_Time IS NULL) THEN CURRENT_TIMESTAMP ELSE Processing_Time END WHERE TRH_ID IN ( SELECT TOP 90 TRH_ID FROM EXTRHFLE WITH (NOLOCK) WHERE TRH_Mgr_Approved = '1' AND TRH_Posted = 0 AND Curr_ShortName_C = '{1}' AND TRH_Branch_Code = '{3}' {4}  {2} ORDER BY TRH_ID ASC) ", Trn_GUID, Curr_Code, Posting_Entities, BranchID, ((POST_TO_ZIMRA_ON_AUTHORIZATION) ? " AND TRH_Extracted = 1 " : ""));
        //                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                                // Initialise Sequence Number
        //                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "[dbo].[ustp_CheckWasteFileSeqNo]");

        //                                //SQLStr = string.Format("EXEC [dbo].[ustp_Generate_WasteFileName] @BranchNo = '{0}', @Processing_ID = '{1}', @CurrRunNo = '{2}'", BranchID, Trn_GUID, RunNo);
        //                                SQLStr = string.Format(" [dbo].ustp_Generate_WasteFileName @BranchNo = '{0}', @Processing_ID = '{1}', @CurrRunNo = '{2}'", BranchID, Trn_GUID, RunNo);
        //                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                                // Now create the WasteFile

        //                                SQLStr = string.Format("SELECT * FROM tbl_Branches Brnch WITH (NOLOCK) INNER JOIN tbl_WasteFile_Log WstFle WITH (NOLOCK) ON Brnch.Branch_Code = WstFle.Branch_ID_C WHERE Brnch.Bank_ID = 'BLB' AND WS_File_Processing_ID = '{0}' and Branch_ID_C = '{1}' and  WS_File_Posted_YN = 0 ORDER BY WS_File_FieldType ASC, WS_File_InstNo ASC ", Trn_GUID, BranchID);
        //                                DataTable WasteFileTbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                                if (WasteFileTbl != null && WasteFileTbl.Rows.Count > 6)
        //                                {
        //                                    WS_Content_Temp = "";
        //                                    WS_Content      = "";
        //                                    MemoryLongByte  = new byte[0];
           
        //                                    foreach (DataRow WSFileRow in WasteFileTbl.Rows)
        //                                    {
        //                                        rec_ID      = WSFileRow["WS_File_InstNo"].ToString().Trim();
        //                                        rec_Type    = WSFileRow["WS_File_FieldType"].ToString().Trim();
        //                                        rec_content = WSFileRow["WS_File_FieldStr_C"].ToString();

        //                                        if (rec_Type == "1")
        //                                        {
        //                                            OutDir    += rec_content;
        //                                            BackupDir += rec_content;

        //                                            FileInfo info;
        //                                            FileAttributes attributes;
                        
        //                                            if (File.Exists(OutDir))
        //                                            {
        //                                                info              = new FileInfo(OutDir);
        //                                                attributes        = info.Attributes;
        //                                                OutDir_BackupFile = string.Format("{0}_{1:yyyyMMdd_HHmmss}", OutDir, info.LastWriteTime);
        //                                                info.MoveTo(OutDir_BackupFile);

        //                                                if (File.Exists(OutDir + "_hex"))
        //                                                {
        //                                                    info              = new FileInfo(OutDir + "_hex");
        //                                                    attributes        = info.Attributes;
        //                                                    OutDir_BackupFile = string.Format("{0}_hex_{1:yyyyMMdd_HHmmss}", OutDir, info.LastWriteTime);
        //                                                    info.MoveTo(OutDir_BackupFile);
        //                                                }

        //                                                if (File.Exists(OutDir + "_open"))
        //                                                {
        //                                                    info              = new FileInfo(OutDir + "_open");
        //                                                    attributes        = info.Attributes;
        //                                                    OutDir_BackupFile = string.Format("{0}_open_{1:yyyyMMdd_HHmmss}", OutDir, info.LastWriteTime);
        //                                                    info.MoveTo(OutDir_BackupFile);
        //                                                }
        //                                            }

        //                                            if (File.Exists(BackupDir))
        //                                            {
        //                                                info                  = new FileInfo(BackupDir);
        //                                                attributes            = info.Attributes;
        //                                                BackupDir_Backup_File = string.Format("{0}_{1:yyyyMMdd_HHmmss}", BackupDir, info.LastWriteTime);
        //                                                info.MoveTo(BackupDir_Backup_File);

        //                                                if (File.Exists(BackupDir + "_hex"))
        //                                                {
        //                                                    info                  = new FileInfo(BackupDir + "_hex");
        //                                                    attributes            = info.Attributes;
        //                                                    BackupDir_Backup_File = string.Format("{0}_hex_{1:yyyyMMdd_HHmmss}", BackupDir, info.LastWriteTime);
        //                                                     info.MoveTo( BackupDir_Backup_File);
        //                                                }

        //                                                if (File.Exists(BackupDir + "_open"))
        //                                                {
        //                                                    info                  = new FileInfo(BackupDir + "_open");
        //                                                    attributes            = info.Attributes;
        //                                                    BackupDir_Backup_File = string.Format("{0}_open_{1:yyyyMMdd_HHmmss}", BackupDir, info.LastWriteTime);
        //                                                    info.MoveTo( BackupDir_Backup_File);
        //                                                }
        //                                            }
        //                                        }
        //                                        else
        //                                        {   // WH Record
        //                                            WS_Content_Temp = rec_content;
        //                                            if ((rec_Type == "2") && (WS_Content_Temp.Length >= 81))
        //                                            {
        //                                                constNum       = 41;
        //                                                content_Lenght = WS_Content_Temp.Length - constNum;
        //                                                lastPart       = string.Format("{0}{1}", WS_Content_Temp.Substring(constNum, content_Lenght), Environment.NewLine);

        //                                                byte[] WH_TERMINAL_NO_Byte    = new byte[1]; WH_TERMINAL_NO_Byte    = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(02, 02)), 1);
        //                                                byte[] WH_DATE_Byte           = new byte[3]; WH_DATE_Byte           = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(04, 06)), 3);
        //                                                //byte[] WH_DATE_Byte         = new byte[3]; WH_DATE_Byte = IntToBcd(Convert.ToInt32("240617"), 3);
        //                                                byte[] WH_BRANCH_NO_Byte      = new byte[2]; WH_BRANCH_NO_Byte      = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(10, 03)), 2);
        //                                                byte[] WH_FILE_NO_Byte        = new byte[1]; WH_FILE_NO_Byte        = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(13, 02)), 1);
        //                                                byte[] WH_START_SEQUENCE_Byte = new byte[3]; WH_START_SEQUENCE_Byte = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(15, 06)), 3);
        //                                                byte[] WH_END_SEQUENCE_Byte   = new byte[3]; WH_END_SEQUENCE_Byte   = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(21, 06)), 3);
        //                                                byte[] WH_CLEARING_COUNT_Byte = new byte[2]; WH_CLEARING_COUNT_Byte = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(27, 04)), 2);
        //                                                byte[] WH_RECORD_COUNT_Byte   = new byte[3]; WH_RECORD_COUNT_Byte   = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(31, 06)), 3);
        //                                                byte[] WH_LOGIN_TIME_Byte     = new byte[2]; WH_LOGIN_TIME_Byte     = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(37, 04)), 2);

        //                                                byte[] WH_Bytes = CombineBytes(Encoding.ASCII.GetBytes(WS_Content_Temp.Substring(0, 2).ToCharArray(), 0, 2), WH_TERMINAL_NO_Byte, WH_DATE_Byte, WH_BRANCH_NO_Byte, WH_FILE_NO_Byte, WH_START_SEQUENCE_Byte, WH_END_SEQUENCE_Byte, WH_CLEARING_COUNT_Byte, WH_RECORD_COUNT_Byte, WH_LOGIN_TIME_Byte, Encoding.ASCII.GetBytes(lastPart));
        //                                                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)   
        //                                                {
        //                                                    AppendToFile(OutDir,BackupDir, WH_Bytes);
        //                                                }
        //                                                else
        //                                                {
        //                                                    MemoryLongByte = CombineBytes(MemoryLongByte, WH_Bytes);
        //                                                }

        //                                                //File.WriteAllBytes(OutDir + ".11", WH_DATE_Byte);
        //                                                //FiletoHx(OutDir+ ".11");

        //                                                //File.WriteAllBytes(OutDir + ".12", WH_Bytes);
        //                                                //FiletoHx(OutDir + ".12");
        //                                            }

        //                                            if ((rec_Type == "3") && (WS_Content_Temp.Length >= 103))
        //                                            {
        //                                                constNum       = 103;
        //                                                content_Lenght = WS_Content_Temp.Length - constNum;
        //                                                lastPart       = string.Format("{0}{1}", WS_Content_Temp.Substring(constNum, content_Lenght), Environment.NewLine);

        //                                                byte[] WBH_TERMINAL_NO_Byte    = new byte[01]; WBH_TERMINAL_NO_Byte    = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(02, 02)), 01);
        //                                                byte[] WBH_DATE_Byte           = new byte[03]; WBH_DATE_Byte           = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(04, 06)), 03);
        //                                                byte[] WBH_BRANCH_NO_Byte      = new byte[02]; WBH_BRANCH_NO_Byte      = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(10, 03)), 02);
        //                                                byte[] WBH_FILE_NO_Byte        = new byte[01]; WBH_FILE_NO_Byte        = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(13, 02)), 01);
        //                                                byte[] WBH_START_SEQUENCE_Byte = new byte[03]; WBH_START_SEQUENCE_Byte = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(15, 06)), 03);
        //                                                byte[] WBH_BATCH_NO_Byte       = new byte[02]; WBH_BATCH_NO_Byte       = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(21, 03)), 02);
        //                                                string WBH_CANCEL_IND_Byte     = WS_Content_Temp.Substring(24, 1);
        //                                                byte[] WBH_OP_LOCAL_DR_Byte    = new byte[08]; WBH_OP_LOCAL_DR_Byte    = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(25, 18)), 08);
        //                                                byte[] WBH_OP_LOCAL_CR_Byte    = new byte[08]; WBH_OP_LOCAL_CR_Byte    = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(43, 18)), 08);
        //                                                byte[] WBH_OP_FOREIGN_DR_Byte  = new byte[08]; WBH_OP_FOREIGN_DR_Byte  = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(61, 18)), 08);
        //                                                byte[] WBH_OP_FOREIGN_CR_Byte  = new byte[08]; WBH_OP_FOREIGN_CR_Byte  = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(79, 18)), 08);
        //                                                byte[] WBH_OP_ITEM_COUNT_Byte  = new byte[3]; WBH_OP_ITEM_COUNT_Byte   = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(97, 06)), 03);

        //                                                byte[] WBH_Bytes = CombineBytes(Encoding.ASCII.GetBytes(WS_Content_Temp.Substring(0, 2).ToCharArray(), 0, 2), WBH_TERMINAL_NO_Byte, WBH_DATE_Byte, WBH_BRANCH_NO_Byte, WBH_FILE_NO_Byte, WBH_START_SEQUENCE_Byte, WBH_BATCH_NO_Byte, Encoding.ASCII.GetBytes(WBH_CANCEL_IND_Byte.ToCharArray(), 0, 1), WBH_OP_LOCAL_DR_Byte, WBH_OP_LOCAL_CR_Byte, WBH_OP_FOREIGN_DR_Byte, WBH_OP_FOREIGN_CR_Byte, WBH_OP_ITEM_COUNT_Byte, Encoding.ASCII.GetBytes(lastPart));
        //                                                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                                                {
        //                                                    AppendToFile(OutDir, BackupDir, WBH_Bytes);
        //                                                }
        //                                                else
        //                                                {
        //                                                     MemoryLongByte = CombineBytes(MemoryLongByte, WBH_Bytes);
        //                                                }
        //                                            }
        //                                            if ((rec_Type == "4") && (WS_Content_Temp.Length >= 101))
        //                                            {
        //                                                constNum       = 102;
        //                                                content_Lenght = WS_Content_Temp.Length - constNum;
        //                                                lastPart       = string.Format("{0}{1}", WS_Content_Temp.Substring(constNum, content_Lenght), Environment.NewLine);

        //                                                byte[] WI_TERMINAL_NO_Byte         = new byte[1]; WI_TERMINAL_NO_Byte         = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(01, 02)), 1);
        //                                                byte[] WI_TERMINAL_SEQUENCE_Byte   = new byte[3]; WI_TERMINAL_SEQUENCE_Byte   = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(03, 06)), 3);
        //                                                byte[] WI_TCD_Byte                 = new byte[2]; WI_TCD_Byte                 = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(09, 03)), 2);
        //                                                byte[] WI_ORIGINATING_BRANCH_Byte  = new byte[2]; WI_ORIGINATING_BRANCH_Byte  = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(12, 03)), 2);
        //                                                byte[] WI_ACCOUNT_NO_Byte          = new byte[3]; WI_ACCOUNT_NO_Byte          = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(15, 07)), 3);
        //                                                byte[] WI_CURRENCY_NO_Byte         = new byte[1]; WI_CURRENCY_NO_Byte         = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(22, 02)), 1);
        //                                                byte[] WI_LOCAL_AMOUNT_Byte        = new byte[7]; WI_LOCAL_AMOUNT_Byte        = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(24, 16)), 7);
        //                                                byte[] WI_FOREIGN_AMOUNT_Byte      = new byte[7]; WI_FOREIGN_AMOUNT_Byte      = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(40, 16)), 7);
        //                                                byte[] WI_SERIAL_NO_Byte           = new byte[4]; WI_SERIAL_NO_Byte           = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(56, 09)), 4);
        //                                                string WI_VALUE_DATE_IND_Byte      = WS_Content_Temp.Substring(65, 01);
        //                                                byte[] WI_VALUE_DAYS_Byte          = new byte[2]; WI_VALUE_DAYS_Byte          = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(66, 03)), 2);
        //                                                byte[] WI_REVERSAL_TERMINAL_Byte   = new byte[1]; WI_REVERSAL_TERMINAL_Byte   = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(69, 02)), 1);
        //                                                byte[] WI_REVERSAL_SEQUENCE_Byte   = new byte[3]; WI_REVERSAL_SEQUENCE_Byte   = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(71, 06)), 3);
        //                                                string WI_NARRATIVE_Byte           = WS_Content_Temp.Substring(77, 15);
        //                                                byte[] WI_DESTINATION_BRANCH_Byte  = new byte[2]; WI_DESTINATION_BRANCH_Byte  = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(92, 03)), 2);
        //                                                string WI_EXCHANGE_IND_Byte        = WS_Content_Temp.Substring(95, 01);
        //                                                string WI_CANCELLED_IND_Byte       = WS_Content_Temp.Substring(96, 01);
        //                                                byte[] WI_MIXED_CREDITS_ID_Byte    = new byte[1]; WI_MIXED_CREDITS_ID_Byte    = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(97, 02)), 1);
        //                                                byte[] WI_MIXED_CREDITS_TOTAL_Byte = new byte[1]; WI_MIXED_CREDITS_TOTAL_Byte = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(99, 02)), 1);
        //                                                string WI_BISS_ACCOUNT_IND_Byte    = WS_Content_Temp.Substring(101, 1);

        //                                                byte[] WBH_Bytes = CombineBytes(Encoding.ASCII.GetBytes(WS_Content_Temp.Substring(0, 1).ToCharArray(), 0, 1), WI_TERMINAL_NO_Byte, WI_TERMINAL_SEQUENCE_Byte, WI_TCD_Byte, WI_ORIGINATING_BRANCH_Byte, WI_ACCOUNT_NO_Byte, WI_CURRENCY_NO_Byte, WI_LOCAL_AMOUNT_Byte, WI_FOREIGN_AMOUNT_Byte, WI_SERIAL_NO_Byte, Encoding.ASCII.GetBytes(WI_VALUE_DATE_IND_Byte.ToCharArray(), 0, 1), WI_VALUE_DAYS_Byte, WI_REVERSAL_TERMINAL_Byte, WI_REVERSAL_SEQUENCE_Byte, Encoding.ASCII.GetBytes(WI_NARRATIVE_Byte.ToCharArray(), 0, 15), WI_DESTINATION_BRANCH_Byte, Encoding.ASCII.GetBytes(WI_EXCHANGE_IND_Byte.ToArray(), 0, 1), Encoding.ASCII.GetBytes(WI_CANCELLED_IND_Byte.ToArray(), 0, 1), WI_MIXED_CREDITS_ID_Byte, WI_MIXED_CREDITS_TOTAL_Byte, Encoding.ASCII.GetBytes(WI_BISS_ACCOUNT_IND_Byte.ToArray(), 0, 1), Encoding.ASCII.GetBytes(lastPart));
        //                                                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                                                {
        //                                                    AppendToFile(OutDir, BackupDir, WBH_Bytes);
        //                                                }
        //                                                else
        //                                                {
        //                                                    MemoryLongByte = CombineBytes(MemoryLongByte, WBH_Bytes);
        //                                                }

        //                                                if (WSFileRow["DR_CR"].ToString() == "D" && (WSFileRow["TRH_Trxn_Type"].ToString() == "PST") && POST_TO_ZIMRA_AFTER_BRAINS_POSTING && !POST_TO_ZIMRA_ON_AUTHORIZATION)
        //                                                {
        //                                                    Trn_Ref     = WSFileRow["TRH_Group_ID"].ToString();
        //                                                    Str_TrnAmnt = WSFileRow["TRH_TR_Amt"].ToString();
        //                                                    SQLStr      = string.Format("INSERT INTO tbl_ZIMRA_Integration_Staging(ZIMRA_Out_FileName_C,ZIMRA_Out_ImportDate_D,ZIMRA_Out_ImportTime_C,ZIMRA_Out_Posted_YN_B,ZIMRA_Ref_C, ZIMRA_Amnt_N) SELECT 'Barclays_Waste_File', CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25),CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,108),'0','{0}','{1}'", Trn_Ref, Str_TrnAmnt);
        //                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                                                }

        //                                                if (WSFileRow["DR_CR"].ToString() == "D" && (WSFileRow["TRH_Trxn_Type"].ToString() == "PST") && ((!POST_TO_ZIMRA_ON_AUTHORIZATION) && (!POST_TO_ZIMRA_AFTER_BRAINS_POSTING))) 
        //                                                {
        //                                                    Trn_Ref     = WSFileRow["TRH_Group_ID"].ToString();
        //                                                    Str_TrnAmnt = WSFileRow["TRH_TR_Amt"].ToString();
        //                                                    SQLStr      = string.Format("INSERT INTO tbl_ZIMRA_Integration_Staging(ZIMRA_Out_FileName_C,ZIMRA_Out_ImportDate_D,ZIMRA_Out_ImportTime_C,ZIMRA_Out_Posted_YN_B,ZIMRA_Ref_C, ZIMRA_Amnt_N) SELECT 'Barclays_Waste_File', CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25),CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,108),'0','{0}','{1}'", Trn_Ref, Str_TrnAmnt);
        //                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                                                }
        //                                            }
        //                                            if ((rec_Type == "5") && (WS_Content_Temp.Length >= 103))
        //                                            {
        //                                                constNum       = 103;
        //                                                content_Lenght = WS_Content_Temp.Length - constNum;
        //                                                lastPart       = string.Format("{0}{1}", WS_Content_Temp.Substring(constNum, content_Lenght), Environment.NewLine);

        //                                                byte[] WBT_TERMINAL_NO_Byte   = new byte[1]; WBT_TERMINAL_NO_Byte   = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(02, 02)), 1);
        //                                                byte[] WBT_DATE_Byte          = new byte[3]; WBT_DATE_Byte          = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(04, 06)), 3);
        //                                                byte[] WBT_BRANCH_NO_Byte     = new byte[2]; WBT_BRANCH_NO_Byte     = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(10, 03)), 2);
        //                                                byte[] WBT_FILE_NO_Byte       = new byte[1]; WBT_FILE_NO_Byte       = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(13, 02)), 1);
        //                                                byte[] WBT_END_SEQUENCE_Byte  = new byte[3]; WBT_END_SEQUENCE_Byte  = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(15, 06)), 3);
        //                                                byte[] WBT_BATCH_NO_Byte      = new byte[2]; WBT_BATCH_NO_Byte      = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(21, 03)), 2);
        //                                                string WBT_CANCEL_IND_Byte    = WS_Content_Temp.Substring(24, 1);
        //                                                byte[] WBT_OP_LOCAL_DR_Byte   = new byte[8]; WBT_OP_LOCAL_DR_Byte   = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(25, 18)), 8);
        //                                                byte[] WBT_OP_LOCAL_CR_Byte   = new byte[8]; WBT_OP_LOCAL_CR_Byte   = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(43, 18)), 8);
        //                                                byte[] WBT_OP_FOREIGN_DR_Byte = new byte[8]; WBT_OP_FOREIGN_DR_Byte = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(61, 18)), 8);
        //                                                byte[] WBT_OP_FOREIGN_CR_Byte = new byte[8]; WBT_OP_FOREIGN_CR_Byte = IntToBcd(Convert.ToInt64(WS_Content_Temp.Substring(79, 18)), 8);
        //                                                byte[] WBT_OP_ITEM_COUNT_Byte = new byte[3]; WBT_OP_ITEM_COUNT_Byte = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(97, 06)), 3);
        //                                                //byte[] WBT_FILLER_Byte        = new byte[12]; WBT_FILLER_Byte        = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(103, 12)), 12);

        //                                                byte[] WBH_Bytes = CombineBytes(Encoding.ASCII.GetBytes(WS_Content_Temp.Substring(0, 2).ToCharArray(), 0, 2), WBT_TERMINAL_NO_Byte, WBT_DATE_Byte, WBT_BRANCH_NO_Byte, WBT_FILE_NO_Byte, WBT_END_SEQUENCE_Byte, WBT_BATCH_NO_Byte, Encoding.ASCII.GetBytes(WBT_CANCEL_IND_Byte.ToCharArray(), 0, 1), WBT_OP_LOCAL_DR_Byte, WBT_OP_LOCAL_CR_Byte, WBT_OP_FOREIGN_DR_Byte, WBT_OP_FOREIGN_CR_Byte, WBT_OP_ITEM_COUNT_Byte, Encoding.ASCII.GetBytes(lastPart));
        //                                                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                                                {
        //                                                    AppendToFile(OutDir, BackupDir, WBH_Bytes);
        //                                                }
        //                                                else
        //                                                {
        //                                                    MemoryLongByte = CombineBytes(MemoryLongByte, WBH_Bytes);
        //                                                }

        //                                            }
        //                                            //if ((rec_Type == "6") && (WS_Content_Temp.Length >= 80))
        //                                            //{
        //                                            //    constNum = 80;
        //                                            //    content_Lenght = WS_Content_Temp.Length - constNum;
        //                                            //    lastPart = WS_Content_Temp.Substring(constNum, content_Lenght);

        //                                            //    WL_TERMINAL_NO    = TextToHex(WS_Content_Temp.Substring(01, 02), 01;
        //                                            //    WL_DATE           = TextToHex(WS_Content_Temp.Substring(03, 06), 03;
        //                                            //    WL_BRANCH_NO      = TextToHex(WS_Content_Temp.Substring(09, 03), 02;
        //                                            //    WL_FILE_NO        = TextToHex(WS_Content_Temp.Substring(12, 02), 01;
        //                                            //    WL_START_SEQUENCE = TextToHex(WS_Content_Temp.Substring(14, 06), 03;
        //                                            //    WL_LOGIN_TIME     = TextToHex(WS_Content_Temp.Substring(20, 04), 02;
        //                                            //    WL_OPERATOR_NAME  = (WS_Content_Temp.Substring(24, 20);
        //                                            //    WL_CANCEL_SEQ     = TextToHex(WS_Content_Temp.Substring(44, 06), 03);

        //                                            //    WS_Content_Temp = WS_Content_Temp.Substring(0, 1) + string.Format("{0}{1}{2}{3}{4}{5}{6}{7}", WL_TERMINAL_NO, WL_DATE, WL_BRANCH_NO, WL_FILE_NO, WL_START_SEQUENCE, WL_LOGIN_TIME, WL_OPERATOR_NAME, WL_CANCEL_SEQ) + lastPart;

        //                                            //}
        //                                            if ((rec_Type == "7") && (WS_Content_Temp.Length >= 81))
        //                                            {
        //                                                constNum       = 41;
        //                                                content_Lenght = WS_Content_Temp.Length - constNum;
        //                                                lastPart       = string.Format("{0}{1}", WS_Content_Temp.Substring(constNum, content_Lenght), Environment.NewLine);

        //                                                byte[] WT_TERMINAL_NO_Byte    = new byte[1]; WT_TERMINAL_NO_Byte    = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(02, 2)), 1);
        //                                                byte[] WT_DATE_Byte           = new byte[3]; WT_DATE_Byte           = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(04, 6)), 3);
        //                                                byte[] WT_BRANCH_NO_Byte      = new byte[2]; WT_BRANCH_NO_Byte      = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(10, 3)), 2);
        //                                                byte[] WT_FILE_NO_Byte        = new byte[1]; WT_FILE_NO_Byte        = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(13, 2)), 1);
        //                                                byte[] WT_START_SEQUENCE_Byte = new byte[3]; WT_START_SEQUENCE_Byte = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(15, 6)), 3);
        //                                                byte[] WT_END_SEQUENCE_Byte   = new byte[3]; WT_END_SEQUENCE_Byte   = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(21, 6)), 3);
        //                                                byte[] WT_CLEARING_COUNT_Byte = new byte[2]; WT_CLEARING_COUNT_Byte = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(27, 4)), 2);
        //                                                byte[] WT_RECORD_COUNT_Byte   = new byte[3]; WT_RECORD_COUNT_Byte   = IntToBcd(Convert.ToInt32(WS_Content_Temp.Substring(31, 6)), 3);
        //                                                byte[] WT_LOGOUT_TIME_Byte    = new byte[2]; WT_LOGOUT_TIME_Byte    = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(37, 4)), 2);
        //                                                //string WT_OPERATOR_NAME_Byte  = new byte[40]; WT_OPERATOR_NAME_Byte = IntToBcd(Convert.ToInt16(WS_Content_Temp.Substring(41, 40)), 40);

        //                                                byte[] WBH_Bytes = CombineBytes(Encoding.ASCII.GetBytes(WS_Content_Temp.Substring(0, 2).ToCharArray(0, 2)), WT_TERMINAL_NO_Byte, WT_DATE_Byte, WT_BRANCH_NO_Byte, WT_FILE_NO_Byte, WT_START_SEQUENCE_Byte, WT_END_SEQUENCE_Byte, WT_CLEARING_COUNT_Byte, WT_RECORD_COUNT_Byte, WT_LOGOUT_TIME_Byte, Encoding.ASCII.GetBytes(lastPart));
        //                                                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                                                {
        //                                                    AppendToFile(OutDir, BackupDir, WBH_Bytes);
        //                                                }
        //                                                else
        //                                                {
        //                                                    MemoryLongByte = CombineBytes(MemoryLongByte, WBH_Bytes);
        //                                                }
        //                                            }
        //                                            WS_Content += string.Format("{0}{1}", WS_Content_Temp, Environment.NewLine);
        //                                        }
        //                                        SQLStr = string.Format("UPDATE tbl_WasteFile_Log SET WS_File_Posted_YN = 1 WHERE WS_File_InstNo = '{0}'", rec_ID);
        //                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                                    }
        //                                    // Now Write the File at One go
        //                                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                                    {
        //                                        AppendToFile(OutDir, BackupDir, MemoryLongByte);
        //                                    }
        //                                    // Save to Hex
        //                                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Generate_Open_File)
        //                                    {
        //                                        FiletoHx(OutDir, string.Format("ZIMRA{0}{1}", BranchID, TerminalNo));

        //                                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Sample_File_Compare_YN)
        //                                        {
        //                                            //if e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.
        //                                            if (File.Exists(e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Sample_File_Name))
        //                                            {
        //                                                FiletoHx(e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Sample_File_Name, string.Format("ZIMRA{0}{1}Sample", BranchID, TerminalNo));
        //                                            }
        //                                            else
        //                                            {
        //                                                LogError("fn_Post_to_Barclays_Brains", string.Format("Sample File {0} does not exist", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Sample_File_Name));
        //                                            }
        //                                        }
        //                                    }
        //                                }
        //                            }
        //                        }
        //                    }
        //                    Curr_Rec = null;
        //                }
        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", "WASTE_F"));
        //            }
        //            LogStep("fn_Post_to_Barclays_Brains Step 2", "fn_Post_to_Barclays_Brains  Main procedure Exit");
        //            return "1";
        //        }
        //        catch (Exception main_Expt)
        //        {
        //            string retErr = LogError(main_Expt.GetHashCode().ToString(), "fn_Post_to_Barclays_Brains", main_Expt, rec_ID);
        //            return "2";
        //        }
        //        //finally
        //        //{
        //        //   DoWork();
        //        //}
        //    }
        //}

        public static void AppendToFile(string fileToWrite, string fileToBackup, byte[] DT)
        {
            using (FileStream FS = new FileStream(fileToWrite, File.Exists(fileToWrite) ? FileMode.Append : FileMode.OpenOrCreate, FileAccess.Write))
            {
                FS.Write(DT, 0, DT.Length);
                FS.Close();
            }
            if (fileToWrite != fileToBackup)
            {
                using (FileStream FS1 = new FileStream(fileToBackup, File.Exists(fileToBackup) ? FileMode.Append : FileMode.OpenOrCreate, FileAccess.Write))
                {
                    FS1.Write(DT, 0, DT.Length);
                    FS1.Close();
                }
            }
        }

        public static void AppendToFile(string fileToWrite, string fileToBackup, string DT)
        {
            File.AppendAllText(fileToWrite, DT);
            File.AppendAllText(fileToBackup, DT);
        }


        public byte[] CombineBytes(params byte[][] arrays)
        {
            byte[] rv = new byte[arrays.Sum(a => a.Length)];
            int offset = 0;
            foreach (byte[] array in arrays)
            {
                System.Buffer.BlockCopy(array, 0, rv, offset, array.Length);
                offset += array.Length;
            }
            return rv;
        }


        public static byte[] IntToBcd(Int64 pValue, int ByteLen)
        {
            byte[] returnByte = new byte[ByteLen];
            byte[] tmpByte    = BitConverter.GetBytes(pValue);
            try
            {
                for (int i = 0; i <= ByteLen-1; i++)
                {
                    returnByte[i] = tmpByte[i];
                    if (i ==ByteLen)
                    {
                        break;
                    }
                }
                if (BitConverter.IsLittleEndian)
                {
                    Array.Reverse(returnByte);
                }
            }
            catch (Exception IntotoBcdExpt)
            {
                LogToFile(string.Format("IntToBcd pvalue = {0}, ByteLen = {1}", pValue, ByteLen), IntotoBcdExpt.StackTrace.ToString());
              
            }
            return returnByte;
        }

   
        public static void LogToFile(string ErrorModule, string LogStr)
        {
            //bool Allow_Logging = bool.Parse(System.Configuration.ConfigurationSettings.AppSettings["RTGS_Outwards_Allow_Logging"]);
            string logFolder = System.Configuration.ConfigurationSettings.AppSettings["ErrorLog_Folder"];
            if (!logFolder.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
            {
                 logFolder += System.IO.Path.DirectorySeparatorChar;
            }
            //if (Allow_Logging)
            //{
            File.AppendAllText(string.Format("{0}eVerify_Err_{1:yyyy_MM_dd}.txt", logFolder, DateTime.Now), string.Format("{0:yyyy/MM/dd HH:mm:ss} {1} - {2}{3}", DateTime.Now, ErrorModule, LogStr, Environment.NewLine));
            //}
        }

        //public string FiletoHx(string InputFile, string FileSource)
        //{
        //    string WH_FILE_TYPE_Hex      = "";
        //    string WH_LABEL_TYPE_Hex     = "";
        //    string WH_TERMINAL_NO_Hex    = "";
        //    string WH_DATE_Hex           = "";
        //    string WH_BRANCH_NO_Hex      = "";
        //    string WH_FILE_NO_Hex        = "";
        //    string WH_START_SEQUENCE_Hex = "";
        //    string WH_END_SEQUENCE_Hex   = "";
        //    string WH_CLEARING_COUNT_Hex = "";
        //    string WH_RECORD_COUNT_Hex   = "";
        //    string WH_LOGIN_TIME_Hex     = "";
        //    string WH_OPERATOR_NAME_Hex  = "";

        //    string WH_FILE_TYPE_Str      = "";
        //    string WH_LABEL_TYPE_Str     = "";
        //    string WH_TERMINAL_NO_Str    = "";
        //    string WH_DATE_Str           = "";
        //    string WH_BRANCH_NO_Str      = "";
        //    string WH_FILE_NO_Str        = "";
        //    string WH_START_SEQUENCE_Str = "";
        //    string WH_END_SEQUENCE_Str   = "";
        //    string WH_CLEARING_COUNT_Str = "";
        //    string WH_RECORD_COUNT_Str   = "";
        //    string WH_LOGIN_TIME_Str     = "";
        //    string WH_OPERATOR_NAME_Str  = "";

        //    string WBH_RECORD_TYPE_Hex    ="";
        //    string WBH_LABEL_TYPE_Hex     ="";
        //    string WBH_TERMINAL_NO_Hex    ="";
        //    string WBH_DATE_Hex           ="";
        //    string WBH_BRANCH_NO_Hex      ="";
        //    string WBH_FILE_NO_Hex        ="";
        //    string WBH_START_SEQUENCE_Hex ="";
        //    string WBH_BATCH_NO_Hex       ="";
        //    string WBH_CANCEL_IND_Hex     ="";
        //    string WBH_OP_LOCAL_DR_Hex    ="";
        //    string WBH_OP_LOCAL_CR_Hex    ="";
        //    string WBH_OP_FOREIGN_DR_Hex  ="";
        //    string WBH_OP_FOREIGN_CR_Hex  ="";
        //    string WBH_OP_ITEM_COUNT_Hex  ="";
        //    string WBH_FILLER_Hex         ="";

        //    string WBH_RECORD_TYPE_Str    = "";
        //    string WBH_LABEL_TYPE_Str     = "";
        //    string WBH_TERMINAL_NO_Str    = "";
        //    string WBH_DATE_Str           = "";
        //    string WBH_BRANCH_NO_Str      = "";
        //    string WBH_FILE_NO_Str        = "";
        //    string WBH_START_SEQUENCE_Str = "";
        //    string WBH_BATCH_NO_Str       = "";
        //    string WBH_CANCEL_IND_Str     = "";
        //    string WBH_OP_LOCAL_DR_Str    = "";
        //    string WBH_OP_LOCAL_CR_Str    = "";
        //    string WBH_OP_FOREIGN_DR_Str  = "";
        //    string WBH_OP_FOREIGN_CR_Str  = "";
        //    string WBH_OP_ITEM_COUNT_Str  = "";
        //    string WBH_FILLER_Str         = "";


        //    string WI_RECORD_TYPE_Hex         ="";
        //    string WI_TERMINAL_NO_Hex         ="";
        //    string WI_TERMINAL_SEQUENCE_Hex   ="";
        //    string WI_TCD_Hex                 ="";
        //    string WI_ORIGINATING_BRANCH_Hex  ="";
        //    string WI_ACCOUNT_NO_Hex          ="";
        //    string WI_CURRENCY_NO_Hex         ="";
        //    string WI_LOCAL_AMOUNT_Hex        ="";
        //    string WI_FOREIGN_AMOUNT_Hex      ="";
        //    string WI_SERIAL_NO_Hex           ="";
        //    string WI_VALUE_DATE_IND_Hex      ="";
        //    string WI_VALUE_DAYS_Hex          ="";
        //    string WI_REVERSAL_TERMINAL_Hex   ="";
        //    string WI_REVERSAL_SEQUENCE_Hex   ="";
        //    string WI_NARRATIVE_Hex           ="";
        //    string WI_DESTINATION_BRANCH_Hex  ="";
        //    string WI_EXCHANGE_IND_Hex        ="";
        //    string WI_CANCELLED_IND_Hex       ="";
        //    string WI_MIXED_CREDITS_ID_Hex    ="";
        //    string WI_MIXED_CREDITS_TOTAL_Hex ="";
        //    string WI_BISS_ACCOUNT_IND_Hex    ="";
        //    string WI_FILLER_Hex              ="";
  
        //    string WI_RECORD_TYPE_Str         = "";
        //    string WI_TERMINAL_NO_Str         = "";
        //    string WI_TERMINAL_SEQUENCE_Str   = "";
        //    string WI_TCD_Str                 = "";
        //    string WI_ORIGINATING_BRANCH_Str  = "";
        //    string WI_ACCOUNT_NO_Str          = "";
        //    string WI_CURRENCY_NO_Str         = "";
        //    string WI_LOCAL_AMOUNT_Str        = "";
        //    string WI_FOREIGN_AMOUNT_Str      = "";
        //    string WI_SERIAL_NO_Str           = "";
        //    string WI_VALUE_DATE_IND_Str      = "";
        //    string WI_VALUE_DAYS_Str          = "";
        //    string WI_REVERSAL_TERMINAL_Str   = "";
        //    string WI_REVERSAL_SEQUENCE_Str   = "";
        //    string WI_NARRATIVE_Str           = "";
        //    string WI_DESTINATION_BRANCH_Str  = "";
        //    string WI_EXCHANGE_IND_Str        = "";
        //    string WI_CANCELLED_IND_Str       = "";
        //    string WI_MIXED_CREDITS_ID_Str    = "";
        //    string WI_MIXED_CREDITS_TOTAL_Str = "";
        //    string WI_BISS_ACCOUNT_IND_Str    = "";
        //    string WI_FILLER_Str              = "";
        //    string WI_LOCAL_AMOUNT_Strint     = "";


        //    string WBT_RECORD_TYPE_Hex   = "";
        //    string WBT_LABEL_TYPE_Hex    = "";
        //    string WBT_TERMINAL_NO_Hex   = "";
        //    string WBT_DATE_Hex          = "";
        //    string WBT_BRANCH_NO_Hex     = "";
        //    string WBT_FILE_NO_Hex       = "";
        //    string WBT_END_SEQUENCE_Hex  = "";
        //    string WBT_BATCH_NO_Hex      = "";
        //    string WBT_CANCEL_IND_Hex    = "";
        //    string WBT_OP_LOCAL_DR_Hex   = "";
        //    string WBT_OP_LOCAL_CR_Hex   = "";
        //    string WBT_OP_FOREIGN_DR_Hex = "";
        //    string WBT_OP_FOREIGN_CR_Hex = "";
        //    string WBT_OP_ITEM_COUNT_Hex = "";
        //    string WBT_FILLER_Hex        = "";

        //    string WBT_RECORD_TYPE_Str   = "";
        //    string WBT_LABEL_TYPE_Str    = "";
        //    string WBT_TERMINAL_NO_Str   = "";
        //    string WBT_DATE_Str          = "";
        //    string WBT_BRANCH_NO_Str     = "";
        //    string WBT_FILE_NO_Str       = "";
        //    string WBT_END_SEQUENCE_Str  = "";
        //    string WBT_BATCH_NO_Str      = "";
        //    string WBT_CANCEL_IND_Str    = "";
        //    string WBT_OP_LOCAL_DR_Str   = "";
        //    string WBT_OP_LOCAL_CR_Str   = "";
        //    string WBT_OP_FOREIGN_DR_Str = "";
        //    string WBT_OP_FOREIGN_CR_Str = "";
        //    string WBT_OP_ITEM_COUNT_Str = "";
        //    string WBT_FILLER_Str = "";

        //    string WT_FILE_TYPE_Hex      = "";
        //    string WT_LABEL_TYPE_Hex     = "";
        //    string WT_TERMINAL_NO_Hex    = "";
        //    string WT_DATE_Hex           = "";
        //    string WT_BRANCH_NO_Hex      = "";
        //    string WT_FILE_NO_Hex        = "";
        //    string WT_START_SEQUENCE_Hex = "";
        //    string WT_END_SEQUENCE_Hex   = "";
        //    string WT_CLEARING_COUNT_Hex = "";
        //    string WT_RECORD_COUNT_Hex   = "";
        //    string WT_LOGOUT_TIME_Hex    = "";
        //    string WT_OPERATOR_NAME_Hex  = "";

        //    string WT_FILE_TYPE_Str      = "";
        //    string WT_LABEL_TYPE_Str     = "";
        //    string WT_TERMINAL_NO_Str    = "";
        //    string WT_DATE_Str           = "";
        //    string WT_BRANCH_NO_Str      = "";
        //    string WT_FILE_NO_Str        = "";
        //    string WT_START_SEQUENCE_Str = "";
        //    string WT_END_SEQUENCE_Str   = "";
        //    string WT_CLEARING_COUNT_Str = "";
        //    string WT_RECORD_COUNT_Str  = "";
        //    string WT_LOGOUT_TIME_Str   = "";
        //    string WT_OPERATOR_NAME_Str = "";
        //    string OutputStrMain        = "";
        //    string OutputStrMainFmt     = "";
        //    char   padCdhr = (char)32;



        //    string Kats = "";

        //    string Outstring = "";
        //    string Outstring_Formatted = "";
        //    byte[] File_Byte;
        //    File_Byte                = File.ReadAllBytes(InputFile);
        //    string hex_file          = string.Format("{0}_hex" ,InputFile);
        //    string openFile          = string.Format("{0}_open",InputFile);
        //    string openFileFormatted = string.Format("{0}_openFmt", InputFile);

        //    string ConvertedtoHex = BitConverter.ToString(File_Byte);
        //    File.WriteAllText(hex_file, ConvertedtoHex.Replace("0D-0A-","0D-0A"+Environment.NewLine));

        //    string LocalSQL_Str = string.Format("INSERT INTO tbl_FileHistory  (File_Name_C,File_Import_Date_D,File_Date_D, File_Archived_C, Exported_B,STR_Exported_B, File_Source_C,FileContent) SELECT '{0}',CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,0,0,0,'{1}','{2}'", InputFile, FileSource,ConvertedtoHex);

        //    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], LocalSQL_Str);

        //    // Now Generate Open file from Hex
        //    using (StreamReader r = new StreamReader(hex_file))
        //    {
        //        string HexLine;
        //        while ((HexLine = r.ReadLine()) != null)
        //        {
        //            if (HexLine.Trim() != string.Empty)
        //            {
        //                HexLine = HexLine.Replace("-", "");

        //                if (HexLine.Substring(0, 4) == "5748")  // WH - File Header
        //                {
        //                    WH_FILE_TYPE_Hex      = HexLine.Substring(00, 02);
        //                    WH_FILE_TYPE_Str      = Utilities.FromHexString(WH_FILE_TYPE_Hex);
        //                    WH_LABEL_TYPE_Hex     = HexLine.Substring(02, 02);
        //                    WH_LABEL_TYPE_Str     = Utilities.FromHexString(WH_LABEL_TYPE_Hex);
        //                    WH_TERMINAL_NO_Hex    = HexLine.Substring(04, 02);
        //                    WH_TERMINAL_NO_Str    = Int16.Parse(WH_TERMINAL_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_DATE_Hex           = HexLine.Substring(06, 06);
        //                    WH_DATE_Str           = Int32.Parse(WH_DATE_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_BRANCH_NO_Hex      = HexLine.Substring(12, 04);
        //                    WH_BRANCH_NO_Str      = Int16.Parse(WH_BRANCH_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_FILE_NO_Hex        = HexLine.Substring(16, 02);
        //                    WH_FILE_NO_Str        = Int16.Parse(WH_FILE_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_START_SEQUENCE_Hex = HexLine.Substring(18, 06);
        //                    WH_START_SEQUENCE_Str = Int32.Parse(WH_START_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_END_SEQUENCE_Hex   = HexLine.Substring(24, 06);
        //                    WH_END_SEQUENCE_Str   = Int32.Parse(WH_END_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_CLEARING_COUNT_Hex = HexLine.Substring(30, 04);
        //                    WH_CLEARING_COUNT_Str = Int16.Parse(WH_CLEARING_COUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_RECORD_COUNT_Hex   = HexLine.Substring(34, 06);
        //                    WH_RECORD_COUNT_Str   = Int32.Parse(WH_RECORD_COUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_LOGIN_TIME_Hex     = HexLine.Substring(40, 04);
        //                    WH_LOGIN_TIME_Hex     = Int16.Parse(WH_LOGIN_TIME_Hex, NumberStyles.HexNumber).ToString();
        //                    WH_OPERATOR_NAME_Hex  = HexLine.Substring(44, 80);
        //                    WH_OPERATOR_NAME_Str  = Utilities.FromHexString(WH_OPERATOR_NAME_Hex);

        //                    //Outstring = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}|{11}{12)", WH_FILE_TYPE_Str,	WH_LABEL_TYPE_Str,	WH_TERMINAL_NO_Str,	WH_DATE_Str,	WH_BRANCH_NO_Str,	WH_FILE_NO_Str,	WH_START_SEQUENCE_Str,	WH_END_SEQUENCE_Str,	WH_CLEARING_COUNT_Str,	WH_RECORD_COUNT_Str,	WH_LOGIN_TIME_Str,	WH_OPERATOR_NAME_Str,		Environment.NewLine);
        //                    Outstring           = string.Format("WH_FILE_TYPE          =  {0}{12}	WH_LABEL_TYPE     =  {1}{12}	WH_TERMINAL_NO    =  {2}{12}	WH_DATE           =  {3}{12}	WH_BRANCH_NO      =  {4}{12}	WH_FILE_NO        =  {5}{12}	WH_START_SEQUENCE =  {6}{12}	WH_END_SEQUENCE   =  {7}{12}	WH_CLEARING_COUNT =  {8}{12}	WH_RECORD_COUNT   =  {9}{12}	WH_LOGIN_TIME     =  {10}{12}	WH_OPERATOR_NAME  =  {11}{12}", WH_FILE_TYPE_Str, WH_LABEL_TYPE_Str, WH_TERMINAL_NO_Str, WH_DATE_Str, WH_BRANCH_NO_Str, WH_FILE_NO_Str, WH_START_SEQUENCE_Str, WH_END_SEQUENCE_Str, WH_CLEARING_COUNT_Str, WH_RECORD_COUNT_Str, WH_LOGIN_TIME_Str, WH_OPERATOR_NAME_Str,Environment.NewLine);

        //                    Outstring_Formatted = string.Format("WH_FILE_TYPE = {0} WH_LABEL_TYPE = {1} WH_TERMINAL_NO = {2} WH_DATE = {3} WH_BRANCH_NO = {4} WH_FILE_NO = {5} WH_START_SEQUENCE = {6} WH_END_SEQUENCE = {7} WH_CLEARING_COUNT =  {8} WH_RECORD_COUNT = {9} WH_LOGIN_TIME = {10} WH_OPERATOR_NAME = {11}{12}", WH_FILE_TYPE_Str, WH_LABEL_TYPE_Str, WH_TERMINAL_NO_Str, WH_DATE_Str, WH_BRANCH_NO_Str, WH_FILE_NO_Str, WH_START_SEQUENCE_Str, WH_END_SEQUENCE_Str, WH_CLEARING_COUNT_Str, WH_RECORD_COUNT_Str, WH_LOGIN_TIME_Str, WH_OPERATOR_NAME_Str,Environment.NewLine);

        //                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)   
        //                    {
        //                        File.AppendAllText(openFile,          Outstring           + Environment.NewLine);
        //                        File.AppendAllText(openFileFormatted, Outstring_Formatted + Environment.NewLine);
        //                    }
        //                    else
        //                    {
        //                        OutputStrMain    += Outstring;
        //                        OutputStrMainFmt += Outstring_Formatted;
        //                    }
        //                }

        //                HexLine = HexLine.Replace("-", "");
        //                if (HexLine.Substring(0, 4) == "4248")  // BH - WBH Batch Header
        //                {
        //                    WBH_RECORD_TYPE_Hex    = HexLine.Substring(000,02);
        //                    WBH_RECORD_TYPE_Str    = Utilities.FromHexString(WBH_RECORD_TYPE_Hex);
        //                    WBH_LABEL_TYPE_Hex     = HexLine.Substring(002,02);
        //                    WBH_LABEL_TYPE_Str     = Utilities.FromHexString(WBH_LABEL_TYPE_Hex);
        //                    WBH_TERMINAL_NO_Hex    = HexLine.Substring(004,02);
        //                    WBH_TERMINAL_NO_Str    = Int16.Parse(WBH_TERMINAL_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_DATE_Hex           = HexLine.Substring(006,06);
        //                    WBH_DATE_Str           = Int32.Parse(WBH_DATE_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_BRANCH_NO_Hex      = HexLine.Substring(012,04);
        //                    WBH_BRANCH_NO_Str      = Int16.Parse(WBH_BRANCH_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_FILE_NO_Hex        = HexLine.Substring(016,02);
        //                    WBH_FILE_NO_Str        = Int16.Parse(WBH_FILE_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_START_SEQUENCE_Hex = HexLine.Substring(018,06);
        //                    WBH_START_SEQUENCE_Str = Int32.Parse(WBH_START_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_BATCH_NO_Hex       = HexLine.Substring(024,04);
        //                    WBH_BATCH_NO_Str       = Int16.Parse(WBH_BATCH_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_CANCEL_IND_Hex     = HexLine.Substring(028,02);
        //                    WBH_CANCEL_IND_Str     = Utilities.FromHexString(WBH_CANCEL_IND_Hex);
        //                    WBH_OP_LOCAL_DR_Hex    = HexLine.Substring(030,16);
        //                    WBH_OP_LOCAL_DR_Str    = Int64.Parse(WBH_OP_LOCAL_DR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_OP_LOCAL_CR_Hex    = HexLine.Substring(046,16);
        //                    WBH_OP_LOCAL_CR_Str    = Int64.Parse(WBH_OP_LOCAL_CR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_OP_FOREIGN_DR_Hex  = HexLine.Substring(062,16);
        //                    WBH_OP_FOREIGN_DR_Str  = Int64.Parse(WBH_OP_FOREIGN_DR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_OP_FOREIGN_CR_Hex  = HexLine.Substring(078,16);
        //                    WBH_OP_FOREIGN_CR_Str  = Int64.Parse(WBH_OP_FOREIGN_CR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_OP_ITEM_COUNT_Hex  = HexLine.Substring(094,06);
        //                    WBH_OP_ITEM_COUNT_Str  = Int64.Parse(WBH_OP_ITEM_COUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WBH_FILLER_Hex         = HexLine.Substring(100,24);
        //                    WBH_FILLER_Str         = Utilities.FromHexString(WBH_FILLER_Hex);

        //                    //Outstring = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}|{11}|{12}|{13}|{14}", WBH_RECORD_TYPE_Str,	WBH_LABEL_TYPE_Str,	WBH_TERMINAL_NO_Str,	WBH_DATE_Str,	WBH_BRANCH_NO_Str,	WBH_FILE_NO_Str,	WBH_START_SEQUENCE_Str,	WBH_BATCH_NO_Str,	WBH_CANCEL_IND_Str,	WBH_OP_LOCAL_DR_Str,	WBH_OP_LOCAL_CR_Str,	WBH_OP_FOREIGN_DR_Str,	WBH_OP_FOREIGN_CR_Str,	WBH_OP_ITEM_COUNT_Str,	WBH_FILLER_Str);
        //                    Outstring           = string.Format("WBH_RECORD_TYPE         = {0}{15}	WBH_LABEL_TYPE      = {1}{15}	WBH_TERMINAL_NO     = {2}{15}	WBH_DATE            = {3}{15}	WBH_BRANCH_NO       = {4}{15}	WBH_FILE_NO         = {5}{15}	WBH_START_SEQUENCE  = {6}{15}	WBH_BATCH_NO        = {7}{15}	WBH_CANCEL_IND      = {8}{15}	WBH_OP_LOCAL_DR     = {9}{15}	WBH_OP_LOCAL_CR     = {10}{15}	WBH_OP_FOREIGN_DR   = {11}{15}	WBH_OP_FOREIGN_CR   = {12}{15}	WBH_OP_ITEM_COUNT   = {13}{15}	WBH_FILLER          = {14}{15}", WBH_RECORD_TYPE_Str,	WBH_LABEL_TYPE_Str,	WBH_TERMINAL_NO_Str,	WBH_DATE_Str,	WBH_BRANCH_NO_Str,	WBH_FILE_NO_Str,	WBH_START_SEQUENCE_Str,	WBH_BATCH_NO_Str,	WBH_CANCEL_IND_Str,	WBH_OP_LOCAL_DR_Str,	WBH_OP_LOCAL_CR_Str,	WBH_OP_FOREIGN_DR_Str,	WBH_OP_FOREIGN_CR_Str,	WBH_OP_ITEM_COUNT_Str,	WBH_FILLER_Str, Environment.NewLine);
        //                    Outstring_Formatted = string.Format("WBH_RECORD_TYPE = {0}	WBH_LABEL_TYPE = {1} WBH_TERMINAL_NO = {2}	WBH_DATE = {3}	WBH_BRANCH_NO  = {4} WBH_FILE_NO = {5}	WBH_START_SEQUENCE = {6} WBH_BATCH_NO = {7}	WBH_CANCEL_IND = {8} WBH_OP_LOCAL_DR = {9} WBH_OP_LOCAL_CR = {10} WBH_OP_FOREIGN_DR = {11} WBH_OP_FOREIGN_CR = {12}	WBH_OP_ITEM_COUNT = {13} WBH_FILLER = {14}{15}", WBH_RECORD_TYPE_Str, WBH_LABEL_TYPE_Str, WBH_TERMINAL_NO_Str, WBH_DATE_Str, WBH_BRANCH_NO_Str, WBH_FILE_NO_Str, WBH_START_SEQUENCE_Str, WBH_BATCH_NO_Str, WBH_CANCEL_IND_Str, WBH_OP_LOCAL_DR_Str, WBH_OP_LOCAL_CR_Str, WBH_OP_FOREIGN_DR_Str, WBH_OP_FOREIGN_CR_Str, WBH_OP_ITEM_COUNT_Str, WBH_FILLER_Str, Environment.NewLine);

        //                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                    {
        //                        File.AppendAllText(openFile, Outstring + Environment.NewLine);
        //                        File.AppendAllText(openFileFormatted, Outstring_Formatted + Environment.NewLine);
        //                    }
        //                    else
        //                    {
        //                        OutputStrMain    += Outstring;
        //                        OutputStrMainFmt += Outstring_Formatted;
        //                    }
        //                }
        //                if (HexLine.Substring(0, 2) == "49")  // I - Detail Records
        //                {
        //                    WI_RECORD_TYPE_Hex         = HexLine.Substring(000, 02);
        //                    WI_RECORD_TYPE_Str         = Utilities.FromHexString(WI_RECORD_TYPE_Hex);
        //                    WI_TERMINAL_NO_Hex         = HexLine.Substring(002, 02);
        //                    WI_TERMINAL_NO_Str         = Int16.Parse(WI_TERMINAL_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_TERMINAL_SEQUENCE_Hex   = HexLine.Substring(004, 06);
        //                    WI_TERMINAL_SEQUENCE_Str   = Int32.Parse(WI_TERMINAL_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_TCD_Hex                 = HexLine.Substring(010, 04);
        //                    WI_TCD_Str                 = Int16.Parse(WI_TCD_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_ORIGINATING_BRANCH_Hex  = HexLine.Substring(014, 04);
        //                    WI_ORIGINATING_BRANCH_Str  = Int16.Parse(WI_ORIGINATING_BRANCH_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_ACCOUNT_NO_Hex          = HexLine.Substring(018, 06);
        //                    WI_ACCOUNT_NO_Str          = Int32.Parse(WI_ACCOUNT_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_CURRENCY_NO_Hex         = HexLine.Substring(024, 02);
        //                    WI_CURRENCY_NO_Str         = Int16.Parse(WI_CURRENCY_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_LOCAL_AMOUNT_Hex        = HexLine.Substring(026, 14);
        //                    WI_LOCAL_AMOUNT_Str        = Int64.Parse(WI_LOCAL_AMOUNT_Hex, NumberStyles.HexNumber).ToString();

        //                    WI_FOREIGN_AMOUNT_Hex      = HexLine.Substring(040, 14);
        //                    WI_FOREIGN_AMOUNT_Str      = Int64.Parse(WI_FOREIGN_AMOUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_SERIAL_NO_Hex           = HexLine.Substring(054, 08);
        //                    WI_SERIAL_NO_Str           = Int32.Parse(WI_SERIAL_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_VALUE_DATE_IND_Hex      = HexLine.Substring(062, 02);
        //                    WI_VALUE_DATE_IND_Str      = Utilities.FromHexString(WI_VALUE_DATE_IND_Hex);
        //                    WI_VALUE_DAYS_Hex          = HexLine.Substring(064, 04);
        //                    WI_VALUE_DAYS_Str          = Int32.Parse(WI_VALUE_DAYS_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_REVERSAL_TERMINAL_Hex   = HexLine.Substring(068, 02);
        //                    WI_REVERSAL_TERMINAL_Str   = Int32.Parse(WI_REVERSAL_TERMINAL_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_REVERSAL_SEQUENCE_Hex   = HexLine.Substring(070, 06);
        //                    WI_REVERSAL_SEQUENCE_Str   = Int32.Parse(WI_REVERSAL_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();

        //                    WI_NARRATIVE_Hex           = HexLine.Substring(076, 30);
        //                    WI_NARRATIVE_Str           = Utilities.FromHexString(WI_NARRATIVE_Hex);
        //                    WI_DESTINATION_BRANCH_Hex  = HexLine.Substring(106, 04);
        //                    WI_DESTINATION_BRANCH_Str  = Int16.Parse(WI_DESTINATION_BRANCH_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_EXCHANGE_IND_Hex        = HexLine.Substring(110, 02);
        //                    WI_EXCHANGE_IND_Str        = Utilities.FromHexString(WI_EXCHANGE_IND_Hex);
        //                    WI_CANCELLED_IND_Hex       = HexLine.Substring(112, 02);
        //                    WI_CANCELLED_IND_Str       = Utilities.FromHexString(WI_CANCELLED_IND_Hex);
        //                    WI_MIXED_CREDITS_ID_Hex    = HexLine.Substring(114, 02);
        //                    WI_MIXED_CREDITS_ID_Str    = Int16.Parse(WI_MIXED_CREDITS_ID_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_MIXED_CREDITS_TOTAL_Hex = HexLine.Substring(116, 02);
        //                    WI_MIXED_CREDITS_TOTAL_Str = Int16.Parse(WI_MIXED_CREDITS_TOTAL_Hex, NumberStyles.HexNumber).ToString();
        //                    WI_BISS_ACCOUNT_IND_Hex    = HexLine.Substring(118, 02);
        //                    WI_BISS_ACCOUNT_IND_Str    = Utilities.FromHexString(WI_BISS_ACCOUNT_IND_Hex);
        //                    WI_FILLER_Hex              = HexLine.Substring(120, 04);

        //                    //Outstring = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}|{11}|{12}|{13}|{14}|{15}|{16}|{17}|{18}|{19}|{20}", WI_RECORD_TYPE_Str, WI_TERMINAL_NO_Str, WI_TERMINAL_SEQUENCE_Str, WI_TCD_Str, WI_ORIGINATING_BRANCH_Str, WI_ACCOUNT_NO_Str, WI_CURRENCY_NO_Str, WI_LOCAL_AMOUNT_Str, WI_FOREIGN_AMOUNT_Str, WI_SERIAL_NO_Str, WI_VALUE_DATE_IND_Str, WI_VALUE_DAYS_Str, WI_REVERSAL_TERMINAL_Str, WI_REVERSAL_SEQUENCE_Str, WI_NARRATIVE_Str, WI_DESTINATION_BRANCH_Str, WI_EXCHANGE_IND_Str, WI_CANCELLED_IND_Str, WI_MIXED_CREDITS_ID_Str, WI_MIXED_CREDITS_TOTAL_Str, WI_BISS_ACCOUNT_IND_Str, WI_FILLER_Str);
        //                    Outstring           = string.Format("  WI_RECORD_TYPE           = {0}{21}	WI_TERMINAL_NO         = {1}{21}	WI_TERMINAL_SEQUENCE   = {2}{21}	WI_TCD                 = {3}{21}	WI_ORIGINATING_BRANCH  = {4}{21}	WI_ACCOUNT_NO          = {5}{21}	WI_CURRENCY_NO         = {6}{21}	WI_LOCAL_AMOUNT        = {7}{21}	WI_FOREIGN_AMOUNT      = {8}{21}	WI_SERIAL_NO           = {9}{21}	WI_VALUE_DATE_IND      = {10}{21}	WI_VALUE_DAYS          = {11}{21}	WI_REVERSAL_TERMINAL   = {12}{21}	WI_REVERSAL_SEQUENCE   = {13}{21}	WI_NARRATIVE           = {14}{21}	WI_DESTINATION_BRANCH  = {15}{21}	WI_EXCHANGE_IND        = {16}{21}	WI_CANCELLED_IND       = {17}{21}	WI_MIXED_CREDITS_ID    = {18}{21}	WI_MIXED_CREDITS_TOTAL = {19}{21}	WI_BISS_ACCOUNT_IND    = {20}{21}  WI_FILLER ={21}", WI_RECORD_TYPE_Str , WI_TERMINAL_NO_Str, WI_TERMINAL_SEQUENCE_Str, WI_TCD_Str, WI_ORIGINATING_BRANCH_Str, WI_ACCOUNT_NO_Str, WI_CURRENCY_NO_Str, WI_LOCAL_AMOUNT_Str, WI_FOREIGN_AMOUNT_Str, WI_SERIAL_NO_Str, WI_VALUE_DATE_IND_Str, WI_VALUE_DAYS_Str, WI_REVERSAL_TERMINAL_Str, WI_REVERSAL_SEQUENCE_Str, WI_NARRATIVE_Str, WI_DESTINATION_BRANCH_Str, WI_EXCHANGE_IND_Str, WI_CANCELLED_IND_Str, WI_MIXED_CREDITS_ID_Str, WI_MIXED_CREDITS_TOTAL_Str, WI_BISS_ACCOUNT_IND_Str, Environment.NewLine);

        //                    Outstring_Formatted = string.Format(" WI_RECORD_TYPE = {0} WI_TERMINAL_NO = {1} WI_TERMINAL_SEQUENCE = {2} WI_TCD = {3} WI_ORIGINATING_BRANCH = {4} WI_ACCOUNT_NO = {5} WI_CURRENCY_NO = {6} WI_LOCAL_AMOUNT = {7} WI_FOREIGN_AMOUNT = {8} WI_SERIAL_NO = {9} WI_VALUE_DATE_IND = {10} WI_VALUE_DAYS = {11} WI_REVERSAL_TERMINAL = {12} WI_REVERSAL_SEQUENCE = {13} WI_NARRATIVE = {14} WI_DESTINATION_BRANCH = {15} WI_EXCHANGE_IND = {16} WI_CANCELLED_IND = {17} WI_MIXED_CREDITS_ID = {18} WI_MIXED_CREDITS_TOTAL = {19} WI_BISS_ACCOUNT_IND = {20} WI_FILLER = {21}", WI_RECORD_TYPE_Str, WI_TERMINAL_NO_Str, WI_TERMINAL_SEQUENCE_Str.PadLeft(3, padCdhr), WI_TCD_Str, WI_ORIGINATING_BRANCH_Str, WI_ACCOUNT_NO_Str.PadLeft(7, padCdhr), WI_CURRENCY_NO_Str.PadLeft(2, padCdhr), WI_LOCAL_AMOUNT_Str.PadLeft(16, padCdhr), WI_FOREIGN_AMOUNT_Str.PadLeft(16, padCdhr), WI_SERIAL_NO_Str.PadLeft(9, padCdhr), WI_VALUE_DATE_IND_Str, WI_VALUE_DAYS_Str.PadLeft(3, padCdhr), WI_REVERSAL_TERMINAL_Str, WI_REVERSAL_SEQUENCE_Str.PadLeft(6, padCdhr), WI_NARRATIVE_Str.PadRight(15, padCdhr), WI_DESTINATION_BRANCH_Str.PadLeft(3, padCdhr), WI_EXCHANGE_IND_Str, WI_CANCELLED_IND_Str, WI_MIXED_CREDITS_ID_Str, WI_MIXED_CREDITS_TOTAL_Str, WI_BISS_ACCOUNT_IND_Str, Environment.NewLine);

        //                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                    {
        //                        File.AppendAllText(openFile, Outstring + Environment.NewLine);
        //                        File.AppendAllText(openFileFormatted, Outstring_Formatted + Environment.NewLine);
        //                    }
        //                    else
        //                    {
        //                        OutputStrMain    += Outstring;
        //                        OutputStrMainFmt += Outstring_Formatted;
        //                    }
        //                }
                                                
        //                if (HexLine.Substring(0, 4) == "4254")  // WH - Batch Footer
        //                {
        //                    WBT_RECORD_TYPE_Hex   = HexLine.Substring(000, 02);
        //                    WBT_RECORD_TYPE_Str   = Utilities.FromHexString(WBT_RECORD_TYPE_Hex);
        //                    WBT_LABEL_TYPE_Hex    = HexLine.Substring(002, 02);
        //                    WBT_LABEL_TYPE_Str    = Utilities.FromHexString(WBT_LABEL_TYPE_Hex);
        //                    WBT_TERMINAL_NO_Hex   = HexLine.Substring(4, 2);
        //                    WBT_TERMINAL_NO_Str   = Int16.Parse(WBT_TERMINAL_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_DATE_Hex          = HexLine.Substring(6, 6);
        //                    WBT_DATE_Str          = Int32.Parse(WBT_DATE_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_BRANCH_NO_Hex     = HexLine.Substring(12, 4);
        //                    WBT_BRANCH_NO_Str     = Int16.Parse(WBT_BRANCH_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_FILE_NO_Hex       = HexLine.Substring(16, 2);
        //                    WBT_FILE_NO_Str       = Int16.Parse(WBT_FILE_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_END_SEQUENCE_Hex  = HexLine.Substring(18, 6);
        //                    WBT_END_SEQUENCE_Str  = Int32.Parse(WBT_END_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_BATCH_NO_Hex      = HexLine.Substring(24, 4);
        //                    WBT_BATCH_NO_Str      = Int16.Parse(WBT_BATCH_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_CANCEL_IND_Hex    = HexLine.Substring(28, 2);
        //                    WBT_CANCEL_IND_Str    = Utilities.FromHexString(WBT_CANCEL_IND_Hex);
        //                    WBT_OP_LOCAL_DR_Hex   = HexLine.Substring(30, 16);
        //                    WBT_OP_LOCAL_DR_Str   = Int64.Parse(WBT_OP_LOCAL_DR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_OP_LOCAL_CR_Hex   = HexLine.Substring(46, 16);
        //                    WBT_OP_LOCAL_CR_Str   = Int64.Parse(WBT_OP_LOCAL_CR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_OP_FOREIGN_DR_Hex = HexLine.Substring(62, 16);
        //                    WBT_OP_FOREIGN_DR_Str = Int64.Parse(WBT_OP_FOREIGN_DR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_OP_FOREIGN_CR_Hex = HexLine.Substring(78, 16);
        //                    WBT_OP_FOREIGN_CR_Str = Int64.Parse(WBT_OP_FOREIGN_CR_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_OP_ITEM_COUNT_Hex = HexLine.Substring(94, 6);
        //                    WBT_OP_ITEM_COUNT_Str = Int32.Parse(WBT_OP_ITEM_COUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WBT_FILLER_Hex        = HexLine.Substring(100, 24);
        //                    WBT_FILLER_Str        = Utilities.FromHexString(WBT_FILLER_Hex);

        //                    //Outstring = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}|{11}{12)", WH_FILE_TYPE_Str,	WH_LABEL_TYPE_Str,	WH_TERMINAL_NO_Str,	WH_DATE_Str,	WH_BRANCH_NO_Str,	WH_FILE_NO_Str,	WH_START_SEQUENCE_Str,	WH_END_SEQUENCE_Str,	WH_CLEARING_COUNT_Str,	WH_RECORD_COUNT_Str,	WH_LOGIN_TIME_Str,	WH_OPERATOR_NAME_Str,		Environment.NewLine);
        //                    Outstring           = string.Format("WBT_RECORD_TYPE        = {0}{15}	WBT_LABEL_TYPE     = {1}{15}	WBT_TERMINAL_NO    = {2}{15}	WBT_DATE       = {3}{15}	WBT_BRANCH_NO      = {4}{15}	WBT_FILE_NO        = {5}{15}	WBT_END_SEQUENCE   = {6}{15}	WBT_BATCH_NO       = {7}{15}	WBT_CANCEL_IND     = {8}{15}	WBT_OP_LOCAL_DR    = {9}{15}	WBT_OP_LOCAL_CR    = {10}{15}	WBT_OP_FOREIGN_DR  = {11}{15}	WBT_OP_FOREIGN_CR  = {12}{15}	WBT_OP_ITEM_COUNT  = {13}{15}	WBT_FILLER         = {14}{15}", WBT_RECORD_TYPE_Str, WBT_LABEL_TYPE_Str, WBT_TERMINAL_NO_Str, WBT_DATE_Str, WBT_BRANCH_NO_Str, WBT_FILE_NO_Str, WBT_END_SEQUENCE_Str, WBT_BATCH_NO_Str, WBT_CANCEL_IND_Str, WBT_OP_LOCAL_DR_Str, WBT_OP_LOCAL_CR_Str, WBT_OP_FOREIGN_DR_Str, WBT_OP_FOREIGN_CR_Str, WBT_OP_ITEM_COUNT_Str, WBT_FILLER_Str, Environment.NewLine);
        //                    Outstring_Formatted = string.Format("WBT_RECORD_TYPE = {0}	WBT_LABEL_TYPE = {1} WBT_TERMINAL_NO = {2} WBT_DATE = {3} WBT_BRANCH_NO = {4} WBT_FILE_NO = {5}	WBT_END_SEQUENCE = {6} WBT_BATCH_NO = {7} WBT_CANCEL_IND = {8} WBT_OP_LOCAL_DR = {9} WBT_OP_LOCAL_CR = {10}	WBT_OP_FOREIGN_DR = {11} WBT_OP_FOREIGN_CR = {12} WBT_OP_ITEM_COUNT = {13} WBT_FILLER = {14}{15}", WBT_RECORD_TYPE_Str, WBT_LABEL_TYPE_Str, WBT_TERMINAL_NO_Str, WBT_DATE_Str, WBT_BRANCH_NO_Str, WBT_FILE_NO_Str, WBT_END_SEQUENCE_Str, WBT_BATCH_NO_Str, WBT_CANCEL_IND_Str, WBT_OP_LOCAL_DR_Str, WBT_OP_LOCAL_CR_Str, WBT_OP_FOREIGN_DR_Str, WBT_OP_FOREIGN_CR_Str, WBT_OP_ITEM_COUNT_Str, WBT_FILLER_Str, Environment.NewLine);

        //                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                    {
        //                        File.AppendAllText(openFile, Outstring + Environment.NewLine);
        //                        File.AppendAllText(openFileFormatted, Outstring_Formatted + Environment.NewLine);
        //                    }
        //                    else
        //                    {
        //                        OutputStrMain    += Outstring;
        //                        OutputStrMainFmt += Outstring_Formatted;
        //                    }
        //                }

        //                if (HexLine.Substring(0, 4) == "5754")  // WT File Footer
        //                {
        //                    WT_FILE_TYPE_Hex      = HexLine.Substring(0, 2);
        //                    WT_FILE_TYPE_Str      = Utilities.FromHexString(WT_FILE_TYPE_Hex);
        //                    WT_LABEL_TYPE_Hex     = HexLine.Substring(2, 2);
        //                    WT_LABEL_TYPE_Str     = Utilities.FromHexString(WT_LABEL_TYPE_Hex);
        //                    WT_TERMINAL_NO_Hex    = HexLine.Substring(4, 2);
        //                    WT_TERMINAL_NO_Str    = Int16.Parse(WT_TERMINAL_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_DATE_Hex           = HexLine.Substring(6, 6);
        //                    WT_DATE_Str           = Int32.Parse(WT_DATE_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_BRANCH_NO_Hex      = HexLine.Substring(12, 4);
        //                    WT_BRANCH_NO_Str      = Int16.Parse(WT_BRANCH_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_FILE_NO_Hex        = HexLine.Substring(16, 2);
        //                    WT_FILE_NO_Str        = Int16.Parse(WT_FILE_NO_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_START_SEQUENCE_Hex = HexLine.Substring(18, 6);
        //                    WT_START_SEQUENCE_Str = Int32.Parse(WT_START_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_END_SEQUENCE_Hex   = HexLine.Substring(24, 6);
        //                    WT_END_SEQUENCE_Str   = Int32.Parse(WT_END_SEQUENCE_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_CLEARING_COUNT_Hex = HexLine.Substring(30, 4);
        //                    WT_CLEARING_COUNT_Str = Int16.Parse(WT_CLEARING_COUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_RECORD_COUNT_Hex   = HexLine.Substring(34, 6);
        //                    WT_RECORD_COUNT_Str   = Int32.Parse(WT_RECORD_COUNT_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_LOGOUT_TIME_Hex    = HexLine.Substring(40, 4);
        //                    WT_LOGOUT_TIME_Str    = Int16.Parse(WT_LOGOUT_TIME_Hex, NumberStyles.HexNumber).ToString();
        //                    WT_OPERATOR_NAME_Hex  = HexLine.Substring(44, 80);
        //                    WT_OPERATOR_NAME_Str  = Utilities.FromHexString(WT_OPERATOR_NAME_Hex);

        //                    //Outstring = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}|{11}{12)", WT_FILE_TYPE_Str, WT_LABEL_TYPE_Str, WT_TERMINAL_NO_Str, WT_DATE_Str, WT_BRANCH_NO_Str, WT_FILE_NO_Str, WT_START_SEQUENCE_Str, WT_END_SEQUENCE_Str, WT_CLEARING_COUNT_Str, WT_RECORD_COUNT_Str, WT_LOGOUT_TIME_Str, WT_OPERATOR_NAME_Str, Environment.NewLine);
        //                    Outstring           = string.Format("WT_FILE_TYPE          =  {0}{12}	WT_LABEL_TYPE     =  {1}{12}	WT_TERMINAL_NO    =  {2}{12}	WT_DATE           =  {3}{12}	WT_BRANCH_NO      =  {4}{12}	WT_FILE_NO        =  {5}{12}	WT_START_SEQUENCE =  {6}{12}	WT_END_SEQUENCE   =  {7}{12}	WT_CLEARING_COUNT =  {8}{12}	WT_RECORD_COUNT   =  {9}{12}	WT_LOGOUT_TIME    =  {10}{12}	WT_OPERATOR_NAME  = {11}{12}", WT_FILE_TYPE_Str, WT_LABEL_TYPE_Str, WT_TERMINAL_NO_Str, WT_DATE_Str, WT_BRANCH_NO_Str, WT_FILE_NO_Str, WT_START_SEQUENCE_Str, WT_END_SEQUENCE_Str, WT_CLEARING_COUNT_Str, WT_RECORD_COUNT_Str, WT_LOGOUT_TIME_Str, WT_OPERATOR_NAME_Str, Environment.NewLine);
        //                    Outstring_Formatted = string.Format("WT_FILE_TYPE =  {0} WT_LABEL_TYPE =  {1} WT_TERMINAL_NO =  {2} WT_DATE = {3} WT_BRANCH_NO = {4} WT_FILE_NO = {5} WT_START_SEQUENCE = {6} WT_END_SEQUENCE = {7} WT_CLEARING_COUNT = {8} WT_RECORD_COUNT = {9} WT_LOGOUT_TIME = {10} WT_OPERATOR_NAME = {11}{12}", WT_FILE_TYPE_Str, WT_LABEL_TYPE_Str, WT_TERMINAL_NO_Str, WT_DATE_Str, WT_BRANCH_NO_Str, WT_FILE_NO_Str, WT_START_SEQUENCE_Str, WT_END_SEQUENCE_Str, WT_CLEARING_COUNT_Str, WT_RECORD_COUNT_Str, WT_LOGOUT_TIME_Str, WT_OPERATOR_NAME_Str, Environment.NewLine);

        //                    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                    {
        //                        File.AppendAllText(openFile,          Outstring + Environment.NewLine);
        //                        File.AppendAllText(openFileFormatted, Outstring_Formatted + Environment.NewLine);
        //                    }
        //                    else
        //                    {
        //                        OutputStrMain    += Outstring;
        //                        OutputStrMainFmt += Outstring_Formatted;
        //                    }
        //                }
        //            }
        //        }
        //        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //        {
        //            File.AppendAllText(openFile,          OutputStrMain);
        //            File.AppendAllText(openFileFormatted, OutputStrMainFmt);
        //        }
        //    }
        //    return "0";
        //}


        //public string fn_Post_to_ZIMRA_OfflineFile()
        //{
        //    string    Ref_No_C   = "";
        //    DataTable Data_Table = new DataTable();
        //    DataTable Data_Rec   = new DataTable();
        //    DataTable Temp_Rec   = new DataTable();
        //    DataTable Curr_Rec   = new DataTable();
        //    DataTable SysRec     = new DataTable();

        //    string Out_Dir       = null;
        //    double Curr_Run_No   = 0;
        //    string Curr_Rec_ID   = null;
        //    string Out_File_Name = "";
        //    string Bck_File_Name = "";
        //    string BackupDir     = "";


        //    double ValAmnt    = 0;
        //    int    ValAmntTMP = 0;
        //    string Str_Amnt   = null;
        //    double Trn_Recs   = 0;
        //    string Str_Recs   = null;

        //    string File_ID      = null;
        //    string Print_Str    = null;
        //    string Print_Tmp    = null;

        //    string Svr_Lic_Date = "";
        //    bool postingStatus  = false;
        //    string SQLStr = "SELECT Count(*) AS ObjRecs FROM tbl_Object_Status WHERE Obj_Status_ID_C = 'fn_Post_to_ZIMRA_OfflineFile' AND Obj_Status_B = 1";
        //    if  (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0]["ObjRecs"]) == 0)
        //    {
        //        LogStep("fn_Post_to_ZIMRA_OfflineFile Step 0", "fn_Post_to_ZIMRA_OfflineFile disabled");
        //        return "0";
        //    }
        //    LogStep("fn_Post_to_ZIMRA_OfflineFile Step 1", "fn_Post_to_ZIMRA_OfflineFile Main Entry");
            
        //    try 
        //    {
        //        SQLStr = "[dbo].[ustp_CheckManualProcessingStatus] @Entity_ID_C = 'ZIMRA'"; 
        //        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //        if (SysRec.Rows.Count > 0)
        //        {
        //            foreach (DataRow Sys_Row in SysRec.Rows)
        //            {
        //                Svr_Lic_Date  = Sys_Row["Curr_Date"].ToString().Trim();
        //                postingStatus = Convert.ToBoolean(Sys_Row["Posting_Status"].ToString().Trim());
        //            }
        //        }
        //        if (postingStatus)
        //        {
        //            SQLStr = "SELECT DISTINCT Tc.Curr_Short_Name AS Trn_Curr_Code,Tr.TRH_CR_AccNo_C, Tc.Curr_Short_Name AS Curr_Short_Name  from EXTRHFLE Tr, tbl_Currencies Tc Where Tr.TRH_Trxn_Type = 'PST' And Tc.Curr_Short_Name  = Tr.Curr_ShortName_C AND Tr.TRH_Extracted = 0 And TRH_Acc_Group_C = 'ZIMRA'";
        //            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //            if (Curr_Rec.Rows.Count > 0)
        //            {

        //                SQLStr = "UPDATE tbl_Run_Days SET run_Time = CURRENT_TIMESTAMP, Trxn_RunNo_N = 1 WHERE   Trxn_Prod_ID = 'ZIMRA_OFFLINE_EXPORT' AND CONVERT(VARCHAR(10),Trxn_Date_D,25) = CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) ";
        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                foreach (DataRow Row1 in Curr_Rec.Rows)
        //                {
        //                    string Curr_Code       = Row1["Trn_Curr_Code"].ToString();
        //                    string Curr_Short_Name = Row1["Curr_Short_Name"].ToString();
        //                    string Zimra_Acc       = Row1["TRH_CR_AccNo_C"].ToString();

        //                    SQLStr = "SELECT * from tbl_SysParam WITH (NOLOCK) Where ParamID ='CTL'";

        //                    Data_Table = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

        //                    Out_Dir     = Data_Table.Rows[0]["Extract_Dir"].ToString().Trim();
        //                    BackupDir   = Data_Table.Rows[0]["BackupDir"].ToString().Trim();

        //                    if (!Out_Dir.EndsWith(@"\"))   Out_Dir   = Out_Dir   + @"\";
        //                    if (!BackupDir.EndsWith(@"\")) BackupDir = BackupDir + @"\";

        //                    Curr_Run_No = Convert.ToDouble(Data_Table.Rows[0]["Extract_Number"].ToString().Trim());
        //                    File_ID     = Data_Table.Rows[0]["Extract_Number"].ToString().Trim().PadLeft(8, (char)48);

        //                    Out_File_Name = string.Format("{0}\\E_{1}_{2}_{3}.csv", Out_Dir  , Zimra_Acc, Curr_Short_Name, ((int)Curr_Run_No).ToString().PadLeft(6, (char)48));
        //                    Bck_File_Name = string.Format("{0}\\E_{1}_{2}_{3}.csv", BackupDir, Zimra_Acc, Curr_Short_Name, ((int)Curr_Run_No).ToString().PadLeft(6, (char)48));
        //                    Data_Table    = new DataTable();

        //                    SQLStr = string.Format("SELECT * FROM EXTRHFLE WITH (NOLOCK) WHERE TRH_Extracted = '0' And TRH_Posted = '1' And TRH_Trxn_Type = 'PST' And TRH_Reversal = '0' And TRH_Acc_Group_C = '{1}' And TRH_ID not in (Select TRH_Reversed_Id from EXTRHFLE Where TRH_Reversal = '1' And TRH_Reversed_Id is Not Null) And Curr_ShortName_C = '{0}' Order By TRH_Teller_ID,TRH_ID", Curr_Code, "ZIMRA");
        //                    Data_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //                    if (Data_Rec.Rows.Count > 0)
        //                    {
        //                            //Write Header
        //                            Print_Str = string.Format("UHL,{0:yyyyMMdd},{1},{2}, ZIMRA-Commissioner General Deposit{3}", DateTime.Now, File_ID, Zimra_Acc, Environment.NewLine);
        //                            Print_Tmp = string.Format("UHL,{0:yyyyMMdd},{1},{2}, ZIMRA-Commissioner General Deposit", DateTime.Now, File_ID, Zimra_Acc);
        //                            if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                            {
        //                                AppendToFile(Out_File_Name, Bck_File_Name, string.Format("{0}{1}", Print_Tmp, Environment.NewLine));
        //                            }
        //                            // Initialise Totals
        //                            Trn_Recs = 0;
        //                            ValAmnt  = 0;
        //                            foreach (DataRow Row in Data_Rec.Rows)
        //                            {
        //                                Curr_Rec_ID = Row["TRH_ID"].ToString();
        //                                Ref_No_C    = Curr_Rec_ID;
        //                                Str_Amnt    = ((int)Convert.ToDouble(Row["TRH_TR_Amt"].ToString().Replace("-", "")) * 100).ToString();
        //                                ValAmnt     += Convert.ToDouble(Str_Amnt);
        //                                Print_Str   += string.Format("PAY,{0},{1},{2},SBICZWHX,3100,{3},{4:yyyyMMdd},{4:yyyyMMdd},{5}{6}", Row["TRH_BPart"].ToString(), Row["TRH_BPartName"].ToString(), Row["TRH_Type"].ToString(), Row["TRH_Branch"].ToString(), Convert.ToDateTime(Row["TRH_Approval_Date"].ToString()), Str_Amnt, Environment.NewLine);
        //                                Print_Tmp   =  string.Format("PAY,{0},{1},{2},SBICZWHX,3100,{3},{4:yyyyMMdd},{4:yyyyMMdd},{5}",    Row["TRH_BPart"].ToString(), Row["TRH_BPartName"].ToString(), Row["TRH_Type"].ToString(), Row["TRH_Branch"].ToString(), Convert.ToDateTime(Row["TRH_Approval_Date"].ToString()), Str_Amnt);
        //                                if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                                {
        //                                    AppendToFile(Out_File_Name, Bck_File_Name, string.Format("{0}{1}", Print_Tmp, Environment.NewLine));
        //                                }
        //                                Trn_Recs++;
        //                                // Mark Record as read
        //                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("Update EXTRHFLE SET TRH_Extracted = 1, TRH_Extract_File = '{0}', TRH_Extract_Time = CURRENT_TIMESTAMP WHERE TRH_ID = '{1}'", Out_File_Name, Curr_Rec_ID));
        //                            }
        //                            Print_Str += string.Format("UTL,0,{0},0,{1}{2}", ((int)ValAmnt).ToString(),((int)Trn_Recs).ToString(), Environment.NewLine);
        //                            Print_Tmp = string.Format("UTL,0,{0},0,{1}"    , ((int)ValAmnt).ToString(), ((int)Trn_Recs).ToString());
        //                            if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                            {
        //                                AppendToFile(Out_File_Name, Bck_File_Name, string.Format("{0}{1}", Print_Tmp, Environment.NewLine));
        //                            }
        //                            if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WriteWasteFileInSingleDump)
        //                            {
        //                                AppendToFile(Out_File_Name, Bck_File_Name, string.Format("{0}{1}", Print_Str, Environment.NewLine));
        //                            }

        //                        //Increase Run Number
        //                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "Update tbl_SysParam Set Extract_Number = Extract_Number + 1 Where ParamID = 'CTL'");
        //                    }
        //                }
        //                SQLStr = "UPDATE tbl_Run_Days SET run_Time = CURRENT_TIMESTAMP, Trxn_RunNo_N = 2 WHERE   Trxn_Prod_ID = 'ZIMRA_OFFLINE_EXPORT' AND CONVERT(VARCHAR(10),Trxn_Date_D,25) = CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) ";
        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
        //            }
        //        }
        //        return "2";
        //    }
        //    catch (Exception exPost2ZimraOfflinex) 
        //    {
        //        string retErr = LogError(exPost2ZimraOfflinex.GetHashCode().ToString(), "fn_Post_to_ZIMRA_OfflineFile", exPost2ZimraOfflinex, Ref_No_C);
        //        return "3";
        //    }
        //    LogStep("fn_Post_to_ZIMRA_OfflineFile Step 3", "fn_Post_to_ZIMRA_OfflineFile Main Exit");
        //    return "4";
        //}

      
        // Procedure to Process All the Files in the Directory
        public string fn_Post_to_ZIMRA()
        {
            string Rec_InstNo = "";
            if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Post_to_ZIMRA)
            {
                LogStep("fn_Post_to_ZIMRA Step 0", "Post_to_ZIMRA_Transactions disabled");
                return "0";
            }
            LogStep("fn_Post_to_ZIMRA Step 1", "Post_to_ZIMRA_Transactions Main Entry");
       
            string    Str_to_display = "";
            int       File_Loop_No   = 1;
            //int File_Loop_Max = int.Parse(System.Configuration.ConfigurationSettings.AppSettings["eVerify_Integrate_Max_Batch_Size"]);
            string    lstContents        = "";
            bool      TxtFound           = false;
            string    Ref_No_C           = "";
            DataTable MQ_Rec;
            string    SQLStr             = "";
            string    Entity_ID_C_Tmp    = "ZIMRA";
            bool      Posting_Status_Tmp = false;
            bool      Posting_Holiday    = false;
            bool      Posting_Saturday   = false;
            bool      PostingWeekDay     = false;
            bool      usePsuedoResponse  = false;
            string    StartTime          = "";
            string    EndTime            = "";
            Hashtable m_hashtable        = new Hashtable();
            string    localCaptureTime   = "";
            bool      IsWalkIN           = false;
            string    localPaymentDate   = "";
            //String MQ_OutDir = System.Configuration.ConfigurationSettings.AppSettings["eVerify_Integrate_Temp_Directory"];
            //if (!(MQ_OutDir.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) MQ_OutDir = MQ_OutDir + System.IO.Path.DirectorySeparatorChar.ToString();

            string Mobile_Connection = "";
            Select_Research.SQLDB Mobile_DB;
            m_databaseClass    = new Select_Research.SQLDB(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString());
            m_SMSDatabaseClass = new Select_Research.SQLDB(ConfigurationManager.AppSettings["SMS_DB_Connection"].ToString());
            
            try
            {
                Mobile_Connection  = m_databaseClass.getDataSet("SELECT Conn_String_C FROM tbl_Connections WITH (NOLOCK) WHERE Conn_Name_C = 'MOBILE'").Tables[0].Rows[0][0].ToString();
                Mobile_DB          = new Select_Research.SQLDB(Mobile_Connection);
                m_databaseClass    = new Select_Research.SQLDB(m_databaseConnection.ConnString);

                m_SMSDatabaseClass = new Select_Research.SQLDB(m_SMSConnection.ConnString);

                usePsuedoResponse  = Convert.ToBoolean(m_databaseClass.getDataSet("SELECT UsePseudoData_YN FROM dbo.tbl_Entities WHERE Entity_ID_C  = 'ZIMRA'").Tables[0].Rows[0][0]);
                // Check if There was any processing Today and Insert a new Record if there was not
                m_databaseClass.exec("IF NOT EXISTS(SELECT * FROM [tbl_Run_Days] WITH (NOLOCK) WHERE [Trxn_Prod_ID] = 'ZIMRA' AND [Trxn_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))) INSERT INTO [tbl_Run_Days]([Trxn_Date_D],[Trxn_Prod_ID],[Trxn_RunNo_N]) SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime ,'ZIMRA' AS [Trxn_Prod_ID], 1 AS RunNo");

                //string Move_Files = Move_Approved_Files();
                string Processing_Date = m_databaseClass.getDataSet(String.Format("SELECT RTRIM(REPLACE(CONVERT(VARCHAR(17),CURRENT_TIMESTAMP,102),'.','-')) + ' ' +  Substring(CONVERT(VARCHAR(17),CURRENT_TIMESTAMP,114),1,5) as Curr_Date")).Tables[0].Rows[0][0].ToString();

                SQLStr = string.Format("SELECT * FROM vw_ZIMRA_Outgoing", Entity_ID_C_Tmp);
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BLB")
                {
                   SQLStr = string.Format("SELECT * FROM vw_ZIMRA_Outgoing_Barc");
                }

                MQ_Rec = m_databaseClass.getDataSet(SQLStr).Tables[0];
                if (MQ_Rec.Rows.Count != 0)
                {
                    foreach (DataRow MQRow in MQ_Rec.Rows)
                    {
                        Rec_InstNo = MQRow["ZIMRA_OutStage_Inst_N"].ToString();

                        // Check if we are within Processing Window
                        SQLStr = string.Format("[dbo].[ustp_CheckProcessingStatus_Barc] @Entity_ID_C = '{0}'", Entity_ID_C_Tmp);
                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "BLB")
                        {
                            SQLStr = string.Format("exec [dbo].[ustp_CheckProcessingStatus_Barc] @Entity_ID_C = '{0}'", Entity_ID_C_Tmp);
                        }
                 
                        DataTable Posting_Status_Tmp_Tbl = new DataTable();

                        Posting_Status_Tmp_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(),SQLStr);
                        foreach (DataRow PostingRow in Posting_Status_Tmp_Tbl.Rows)
                        {
                             Posting_Status_Tmp = Convert.ToBoolean(PostingRow["Posting_Status"]);
                             Posting_Holiday    = Convert.ToBoolean(PostingRow["IsHoliday"]); 
                             Posting_Saturday   = Convert.ToBoolean(PostingRow["IsSaturday"]);
                             PostingWeekDay     = Convert.ToBoolean(PostingRow["IsDayOfWeek"]);
                             if (Posting_Holiday)
                             {
                                 StartTime = string.Format("{0:yyyy-MM-dd HH:mm:ss}", PostingRow["Holiday_Window_StartTime"]);
                                 EndTime   = string.Format("{0:yyyy-MM-dd HH:mm:ss}", PostingRow["Holiday_Window_EndTime"]);
                             }
                             if (Posting_Saturday)
                             {
                                 StartTime = string.Format("{0:yyyy-MM-dd HH:mm:ss}", PostingRow["Saturday_Window_StartTime"]);
                                 EndTime   = string.Format("{0:yyyy-MM-dd HH:mm:ss}", PostingRow["Saturday_Window_EndTime"]);
                             }
                             if (PostingWeekDay)
                             {
                                 StartTime = string.Format("{0:yyyy-MM-dd HH:mm:ss}", PostingRow["WeekDay_Window_StartTime"]);
                                 EndTime   = string.Format("{0:yyyy-MM-dd HH:mm:ss}", PostingRow["WeekDay_Window_EndTime"]);
                             }
                        }

                        if (!Posting_Status_Tmp)
                        {
                            //Str_to_display = string.Format("ZIMRA Outwards : {0}{1}. {2}{0}", DateTime.Now.ToString(), (char)13, "Out Of Processing Window : ");
                            return "7";
                        }

                        Ref_No_C = MQRow["ReferenceNumber"].ToString().Trim();
                        string ZIMRA_Reciept_No   = "";
                        string ZIMRA_Reciept_Date = "";
                        int    Int_Records_Found  = 0;
                        string Cur_RRN            = "";
                        bool   NewRRN             = false;
                        if (m_databaseClass.getDataSet(String.Format("SELECT COUNT(*) AS Recs FROM tbl_ZIMRA_Confirmation WHERE ZIMRA_In_Ref_C = '{0}'", Ref_No_C)).Tables[0].Rows[0][0].ToString() == "0")
                        {
                            // Get Server Date
                            string Curr_Date = m_databaseClass.getDataSet(String.Format("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(5),CURRENT_TIMESTAMP,108) as Curr_Date")).Tables[0].Rows[0][0].ToString();
                            if ((MQRow["ZIMRA_RRN_C"].ToString() == "") || (MQRow["ZIMRA_RRN_C"].ToString() == null))
                            {
                                //Cur_RRN = m_databaseClass.getDataSet(String.Format("[dbo].[ustp_GetRRN]")).Tables[0].Rows[0][0].ToString();
                                int    myRandomNo = new Random().Next(0, 999999999);
                                string strRandom  = myRandomNo.ToString();
                                if (strRandom.Length < 9)
                                {
                                    strRandom = strRandom.PadLeft(9, (char)48);
                                }
                                Cur_RRN = strRandom;
                                NewRRN  = true;
                                m_databaseClass.exec(string.Format("Update tbl_ZIMRA_Integration_Staging set ZIMRA_RRN_C = '{0}' Where ZIMRA_Ref_C = '{1}'", Cur_RRN, Ref_No_C));
                            }
                            else
                            {
                                Cur_RRN = MQRow["ZIMRA_RRN_C"].ToString();
                            }

                            string MQPaymentDate    = "";
                            MQPaymentDate           = string.Format("{0}{1}{2}", MQRow["PaymentDate"].ToString().Substring(8, 2), MQRow["PaymentDate"].ToString().Substring(5, 2), MQRow["PaymentDate"].ToString().Substring(2, 2));
                            string MQPaymentTime    = "";
                            MQPaymentTime           = MQRow["CaptureTime"].ToString().Substring(0, 5);

                            e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.ZimraWebServiceSoapClient sc       = new e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.ZimraWebServiceSoapClient();
                            e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.Response                  Trn_Resp = new e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.Response();
                            //Initialise the Body
                            string localAccNo       = MQRow["AccountNumber"].ToString();
                            string localAmount      = MQRow["Amount"].ToString();
                            string localBPNumber    = MQRow["BPNumber"].ToString();

                            //if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.UseCurrentTimeforZIMRA_Trxns)
                            {
                                localCaptureTime = string.Format("{0:HH:mm}", DateTime.Now);
                                localPaymentDate = string.Format("{0:ddMMyy}", DateTime.Now);
                            }
                            //else
                            //{
                            //     localCaptureTime   = MQPaymentTime;
                            //     localPaymentDate   = MQPaymentDate;
                            //}
                            string localClientName      = MQRow["ClientName"].ToString();
                            //string localCurrency      = "USD";
                            string localCurrency        = MQRow["Currency"].ToString().Trim().ToUpper();
                            localCurrency               = ((localCurrency == "USN") || (localCurrency == "USF")) ? "USD" : localCurrency;
                            
                            string localReferenceNumber = MQRow["ReferenceNumber"].ToString();
                            string localRegion          = MQRow["Region"].ToString();
                            //string localRRN           = string.Format("F{0}_STB", Cur_RRN);
                            string localRRN             = string.Format("F{0}_{1}", Cur_RRN, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.ZIMRA_ID);
                            string localSerialNumber    = Cur_RRN;
                            string localTaxCode         = MQRow["TaxCode"].ToString();
                            //Trn_Req.Body.SelectCode = "SELECT_ZIMRA";
                            //string localUserID = "StanbicBankeVerify";

                            if ((localBPNumber.Length < 10) && (localBPNumber.Length > 1) && (MQRow["WalkIn"].ToString() == "0"))
                            {
                                //if ((localBPNumber.Substring(0, 1) == "P") || (localBPNumber.Substring(0, 1) == "F"))
                                double BPOut = 0;
                                if (double.TryParse(localBPNumber, out BPOut))
                                {
                                    localBPNumber = localBPNumber.PadLeft(10, (char)48); ;
                                }
                            }

                            localClientName = Utilities.Remove_XML_SpecialCharacters(localClientName);
                            if (localClientName.Length > 25)
                            {
                                localClientName = localClientName.Substring(0, 25);
                            }
                            // Manage_timeouts Here Mark a Timed_Out Transactions as Processed and Give Error Reasons
                            string Trn_Curr_Date = m_databaseClass.getDataSet(String.Format("SELECT (CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))")).Tables[0].Rows[0][0].ToString();
                            string Trn_Curr_Time = m_databaseClass.getDataSet(String.Format("SELECT (CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,108))")).Tables[0].Rows[0][0].ToString();
                            string TrnPostingStr = "";
                            try
                            {
                                if (usePsuedoResponse)  
                                {
                                    TrnPostingStr = string.Format("<Reciept_ENV><Reciept>{0}</Reciept> <ReceiptTime>{1:HH:mm}</ReceiptTime> <Serial>{2}</Serial>  <Message>sucess</Message> <Error_Desc></Error_Desc> </Reciept_ENV>", localRRN,DateTime.Now,  Cur_RRN);
                                }
                                else
                                {
                                    TrnPostingStr = sc.ZIMRA_PaymentAdvice("SELECT_ZIMRA", localAccNo, localAmount, localBPNumber, localCaptureTime, localClientName, localCurrency, localPaymentDate, localReferenceNumber, localRegion, localRRN, localSerialNumber, localTaxCode, "").ToString();
                                }

                                TrnPostingStr                = System.Text.RegularExpressions.Regex.Replace(TrnPostingStr, @"\s{2,}", " ").Replace("\n", "");

                                Tag_Separator.SetValue("<Reciept_ENV>", 0);
                                string[] TrnPostingStr_Parms = TrnPostingStr.Split(Tag_Separator, StringSplitOptions.None);
                                int TrnPostingStr_Len        = 0;
                                TrnPostingStr_Len            = TrnPostingStr_Parms.Length;

                                //MessageBox.Show(string.Format("Posting string = {0}",TrnPostingStr));

                                if (TrnPostingStr_Len > 1)
                                {
                                    TrnPostingStr = string.Format("{0}{1}", "<Reciept_ENV>", TrnPostingStr_Parms[1]);
                                    try
                                    {
                                        //MessageBox.Show(string.Format("Posting string for XML Passing {0}", TrnPostingStr));
                                        XmlDocument xml    = new XmlDocument();
                                        xml.LoadXml(TrnPostingStr);
                                        ZIMRA_Reciept_No   = xml.SelectSingleNode("/Reciept_ENV/Reciept").InnerText;
                                        ZIMRA_Reciept_Date = xml.SelectSingleNode("/Reciept_ENV/ReceiptTime").InnerText;

                                        // Now send the SMSes.
                                        string Cust_No = MQRow["TRH_Cust_Contact_C"].ToString().Trim();
                                        //MessageBox.Show(string.Format("Customer Mobile Number is = {0}", Cust_No));

                                        if ((ZIMRA_Reciept_No != "") && (ZIMRA_Reciept_Date != ""))
                                        {
                                            string Trn_Amount = MQRow["Amount"].ToString();
                                            string Trn_SMS_Data = string.Format("Your ZIMRA Receipt No is {0}. Barclays Ref : {1}, Amnt: {2:0,0.00}, BPN {3} for {4}. Thank YOU", ZIMRA_Reciept_No, MQRow["ReferenceNumber"].ToString(), MQRow["Amount"].ToString(), MQRow["BPNumber"].ToString(), MQRow["TaxCode"].ToString());

                                            m_hashtable = new Hashtable();
                                            m_hashtable.Add("ZIMRA_In_Ref_C"         , MQRow["ReferenceNumber"].ToString());
                                            m_hashtable.Add("ZIMRA_In_Receipt_C"     , ZIMRA_Reciept_No);
                                            m_hashtable.Add("ZIMRA_In_Receipt_Date_C", ZIMRA_Reciept_Date);
                                            m_hashtable.Add("ZIMRA_In_Amnt_N"        , Trn_Amount);
                                            m_hashtable.Add("Curr_C"                 , localCurrency);
                                            m_hashtable.Add("ZIMRA_In_ImportDate_D"  , Trn_Curr_Date);
                                            m_hashtable.Add("ZIMRA_In_ImportTime_C"  , Trn_Curr_Time);
                                            m_hashtable.Add("Sent_to_SMS_Data_C"     , Trn_SMS_Data);
                                            m_databaseClass.insertSQL("tbl_ZIMRA_Confirmation", m_hashtable);

                                            // SEND SMS Immediately
                                            m_hashtable = new Hashtable();
                                            m_hashtable.Add("SMS_Source_System_C"   , "ZIMRA");
                                            m_hashtable.Add("SMS_Source_IMSISDN_C"  , MQRow["Source_Mobile_C"].ToString());
                                            m_hashtable.Add("SMS_Target_IMSISDN_C"  , Cust_No);
                                            m_hashtable.Add("SMS_Message_C"         , Trn_SMS_Data);
                                            m_hashtable.Add("SMS_Source_Date_D"     , string.Format("{0} {1}", Trn_Curr_Date, Trn_Curr_Time));
                                            m_hashtable.Add("SMS_Source_Reference_C", MQRow["ReferenceNumber"].ToString());
                                            m_hashtable.Add("SMS_Target_Reference_C", ZIMRA_Reciept_No);
                                            m_SMSDatabaseClass.insertSQL("tbl_SMS"  , m_hashtable);
                                            Int_Records_Found += 1;

                                            // Now Tag the Transaction
                                            string Move_Processed_Trxn = string.Format("dbo.ustp_Move_ZIMRA_Posted  '{0}',          '{1:yyyy-MM-dd HH:mmm:ss}'        , '{2:yyyy-MM-dd HH:mmm:ss}'      , '{3}'      ,'{4}'    ,'{5}', '{6}'", Ref_No_C, StartTime, EndTime, Curr_Date, string.Format("{0}#R#{1}", ZIMRA_Reciept_Date, ZIMRA_Reciept_No), "", "1");
                                            //  EXEC [ustp_Move_ZIMRA_Posted] 'SB201211180004','2013-05-05','2013-05-05','2013-05-05','TESTING',''
                                            m_databaseClass.exec(Move_Processed_Trxn);

                                            Str_to_display = string.Format("{0}  has been processed on : {1}", Ref_No_C, DateTime.Now.ToString());
                                            //lst_Info.Items.Add(Str_to_display);
                                            //lst_Info.Refresh();
                                            //  Mark the Record as Extracted.
                                            m_databaseClass.exec(string.Format("Update EXTRHFLE SET TRH_Extracted = 1, TRH_Extracted_Auto = 1,  TRH_Extract_Time = CURRENT_TIMESTAMP Where TRH_Group_ID = '{0}' AND TRH_Trxn_Type = 'PST'", Ref_No_C));

                                        }
                                        else
                                        {
                                            TxtFound = lstContents.Contains(Ref_No_C);
                                            if (!(TxtFound))
                                            {
                                                Str_to_display = string.Format("{0}  has NOT BEEN PROCESSED on : {1}", Ref_No_C, DateTime.Now.ToString());
                                                //lst_Info.Items.Add(Str_to_display);
                                                //lst_Info.Refresh();
                                            }
                                            SQLStr = string.Format("UPDATE tbl_ZIMRA_Integration_Staging SET Processing_Time = CURRENT_TIMESTAMP , Processing_Retry_No = CASE WHEN Processing_Retry_No IS NULL THEN 1 ELSE Processing_Retry_No + 1 END WHERE ZIMRA_OutStage_Inst_N = '{0}'", Rec_InstNo);
                                            m_databaseClass.exec(SQLStr);
                                        }
                                    }
                                    catch (XmlException XML_Parsing)
                                    {
                                        ZIMRA_Reciept_No = string.Format("{0} - {1}", "ERROR", XML_Parsing.StackTrace.ToString());
                                        SQLStr           = string.Format("UPDATE tbl_ZIMRA_Integration_Staging SET Processing_Time = CURRENT_TIMESTAMP , Processing_Retry_No = CASE WHEN Processing_Retry_No IS NULL THEN 1 ELSE Processing_Retry_No + 1 END WHERE ZIMRA_OutStage_Inst_N = '{0}'", Rec_InstNo);
                                        m_databaseClass.exec(SQLStr);
                                    }
                                }
                                else
                                {
                                    SQLStr = string.Format("UPDATE tbl_ZIMRA_Integration_Staging SET Processing_Time = CURRENT_TIMESTAMP , Processing_Retry_No = CASE WHEN Processing_Retry_No IS NULL THEN 1 ELSE Processing_Retry_No + 1 END WHERE ZIMRA_OutStage_Inst_N = '{0}'", Rec_InstNo);
                                    m_databaseClass.exec(SQLStr);
                                }
                            }
                            catch (Exception TimeOutException)
                            {
                                string Move_Processed_Trxn_str = string.Format("dbo.ustp_Move_ZIMRA_Posted  '{0}',          '{1:yyyy-MM-dd HH:mmm:ss}'        , '{2:yyyy-MM-dd HH:mmm:ss}'      , '{3}'      ,'{4}'    ,'{5}', '{6}'", Ref_No_C, StartTime, EndTime, Curr_Date, string.Format("{0}#R#{1}", ZIMRA_Reciept_Date, ZIMRA_Reciept_No), "", "0");
                                //  EXEC [ustp_Move_ZIMRA_Posted] 'SB201211180004','2013-05-05','2013-05-05','2013-05-05','TESTING',''
                                m_databaseClass.exec(Move_Processed_Trxn_str);


                                string Error_File = string.Format("Time Out Error on : {0} . Check Error Log for complete details", Ref_No_C);
                                lstContents = "";
                                TxtFound    = lstContents.Contains(Error_File);
                                if (!(TxtFound))
                                {
                                    Str_to_display = string.Format("ZIMRA Outwards : {0}{1}. {2}{0}", DateTime.Now.ToString(), (char)13, Error_File);
                                    //lst_Info.Items.Add(Str_to_display);
                                    //lst_Info.Refresh();
                                    string Err_Narr = LogError(TimeOutException.GetHashCode().ToString(), "Connection to Zimra Service", TimeOutException, Ref_No_C);
                                }
                                SQLStr = string.Format("UPDATE tbl_ZIMRA_Integration_Staging SET Processing_Time = CURRENT_TIMESTAMP , Processing_Retry_No = CASE WHEN Processing_Retry_No IS NULL THEN 1 ELSE Processing_Retry_No + 1 END WHERE ZIMRA_OutStage_Inst_N = '{0}'", Rec_InstNo);
                                m_databaseClass.exec(SQLStr);
                            }
                            File_Loop_No = File_Loop_No + 1;
                        }
                    }
                }

                // Now Update ECONET Records
                //string Mobile_Str = "";
                //if (Finacle_Live == false)
                //{

                //    Mobile_DB.exec(string.Format("[usp_MoveIntegration_Trxns]"));

                //    if ((Mobile_Type == "ECONET") || (Mobile_Type == "CELLULANT"))
                //    {
                //        Mobile_Str = "SELECT stg.ECONET_Ref_C FROM tbl_ECONET_Integration_Staging stg WHERE stg.ECONET_Out_Posted_YN_B = 0";
                //    }
                //    MQ_Rec = Mobile_DB.getDataSet(Mobile_Str).Tables[0];
                //    if (MQ_Rec.Rows.Count != 0)
                //    {
                //        foreach (DataRow MQRow in MQ_Rec.Rows)
                //        {
                //            string Econet_Reference = MQRow["ECONET_Ref_C"].ToString();
                //            if ((Mobile_Type == "ECONET") || (Mobile_Type == "CELLULANT"))
                //            {
                //                Mobile_DB.exec(string.Format("UPDATE Payment_Instruction SET Posted_In_MUB_B = 1 Where trnReference = '{0}' OR sourceReference = '{0}'", Econet_Reference));
                //            }
                //            Mobile_DB.exec(string.Format("UPDATE tbl_ECONET_Integration_Staging SET ECONET_Out_Posted_YN_B = 1 Where  ECONET_Ref_C = '{0}'", Econet_Reference));

                //            Str_to_display = string.Format("{0} mobile Ref. has been processed on : {1}. ", Econet_Reference, DateTime.Now.ToString());
                //            lst_Info.Items.Add(Str_to_display);
                //            lst_Info.Refresh();
                //        }
                //    }
                //}
                LogStep("fn_Post_to_ZIMRA Step 2", "Post_to_ZIMRA_Transactions Main Exit");
                return "3";
            }
            catch (Exception exPost2Zimra)
            {
                SQLStr = string.Format("UPDATE tbl_ZIMRA_Integration_Staging SET Processing_Time = CURRENT_TIMESTAMP , Processing_Retry_No = CASE WHEN Processing_Retry_No IS NULL THEN 1 ELSE Processing_Retry_No + 1 END WHERE ZIMRA_OutStage_Inst_N = '{0}'", Rec_InstNo);
                m_databaseClass.exec(SQLStr);
                string retErr = LogError(exPost2Zimra.GetHashCode().ToString(), "fn_Post_to_ZIMRA", exPost2Zimra, Ref_No_C);
                return "2";
            }
            finally
            {
                //Application.DoEvents();
            }
        }

        string Post_Incoming_Failues_To_Suspense_FT()
        {
            string Reference_C;
            string From_Bank_Desc_C = "";
            string paymentType_Local = "";
            string tokenId_Local = "";
            string sourceAccountNo_Local;
            string destinationAccount_Local;
            string sourceReference_Local;
            double paymentAmount_Local;
            string SourceTrxnID_Local;
            string Trxn_Narr_Local;
            string Current_Trxn_Local = "";
            string Current_Trn_Batch = "";
            string sourceAccountNo_OG_Local;
            string destinationAccount_OG_Local;
            string Source_Types_Local;
            string sourceMethod_Local;
            string Remitter_C;
            string Remitter_Ac;
            string Remitter_Detail;
            string Remitter_Details_Str = "";
            string Tmp_Remiter_Detail = "";
            string Benef_C;
            string Tmp_Benef_Detail;
            string Benef_Detail;
            string Trn_OIR_C;
            string lstContents = "";
            bool TxtFound = false;
            string Display_Info;
            string[] LocalTag_Separator = { "BCN" };
            string BYORDOF2;
            string BYORDOF3;
            string BYORDOF4;
            string BYORDOF5;
            string ULT_BENEF2;
            string ULT_BENEF3;
            string ULT_BENEF4;
            string ULT_BENEF5;
            string PMTDET1;
            string PMTDET2;
            string PMTDET3;
            string PMTDET4;
            int PMTDETField_Lenght = 25;
            int NonNull_Line = 0;
            string Inward_Str = "";
            DataTable SysRec = new DataTable();
            string SQLStr = "";
            string INCOMING_SINGLE_DAY_POSTING_DATE = "";
            string RTGS_Inwards_FCUBS_Posting_Retry = "";
            string STP_Currencies                   = "";
            bool   ENABLE_INCOMING_SINGLE_DAY_POSTING = false;
            bool   Curr_Base_YN                       = true;
            string Curr_SwitchCode_C                  = "";

            try
                
            {
               
                bool Post_Incoming    = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Inwards_FCUBS_DataPosting;
                bool Post_to_Suspense = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Inwards_Post_Failures_to_Suspense;

                if ((Post_Incoming == true) && (Post_to_Suspense == true))
                {
                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('ENABLE_INCOMING_SINGLE_DAY_POSTING','INCOMING_SINGLE_DAY_POSTING_DATE','RTGS_Inwards_FCUBS_Posting_Retry','STP_Currencies') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    if (SysRec.Rows.Count > 0)
                    {
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "INCOMING_SINGLE_DAY_POSTING_DATE".ToUpper())   INCOMING_SINGLE_DAY_POSTING_DATE   = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ENABLE_INCOMING_SINGLE_DAY_POSTING".ToUpper()) ENABLE_INCOMING_SINGLE_DAY_POSTING = ((param_Row["Parameter_Value"].ToString().ToUpper().Trim().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().Trim().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().Trim().ToUpper() == "1")) ? true : false;
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Inwards_FCUBS_Posting_Retry".ToUpper())   RTGS_Inwards_FCUBS_Posting_Retry   = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "STP_Currencies".ToUpper())                     STP_Currencies                     = param_Row["Parameter_Value"].ToString().Trim();
                        }  
                    }

                    STP_Currencies = string.Format("'{0}'", STP_Currencies.Replace(" ", "").Replace(",", "','"));

                    DataTable           Inward_Rec;
                    FCUBS_PostingResult FCUBS_Result = new FCUBS_PostingResult();
                    if (ENABLE_INCOMING_SINGLE_DAY_POSTING)
                    {
                        Inward_Str = string.Format("SELECT Trxn.*, tbl_Curr.RTGS_Acc_C ,  tbl_Curr.RTGS_Suspense_Acc_C, tbl_Curr.Curr_Base_YN , Curr_SwitchCode_C FROM tbl_RTGSIn_Trxn Trxn INNER JOIN tbl_Currencies tbl_Curr ON Trxn.Curr_Code_C = tbl_Curr.Curr_Short_Name WHERE Trxn.Posted_to_Suspense_B = 0 AND Trxn.Posted_B = 0  AND COALESCE(Trxn.Num_Retry_N,0) >= {0} AND COALESCE(Trxn.Num_Retries_Suspense_N,0) < {0} AND (CONVERT(VARCHAR(10),Value_Date_D,25) = '{1}') AND DATEDIFF(MINUTE, COALESCE(Trxn.Retry_Date, CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Num_Retries_Suspense_N,0)))  AND tbl_Curr.Curr_Short_Name IN ({2}) Order by Num_Retries_Suspense_N ASC, Inst_No ASC", RTGS_Inwards_FCUBS_Posting_Retry, INCOMING_SINGLE_DAY_POSTING_DATE, STP_Currencies);
                    }
                    else
                    {
                        Inward_Str = string.Format("SELECT Trxn.*, tbl_Curr.RTGS_Acc_C ,  tbl_Curr.RTGS_Suspense_Acc_C, tbl_Curr.Curr_Base_YN , Curr_SwitchCode_C FROM tbl_RTGSIn_Trxn Trxn INNER JOIN tbl_Currencies tbl_Curr ON Trxn.Curr_Code_C = tbl_Curr.Curr_Short_Name WHERE Trxn.Posted_to_Suspense_B = 0 AND Trxn.Posted_B = 0  AND COALESCE(Trxn.Num_Retry_N,0) >= {0} AND COALESCE(Trxn.Num_Retries_Suspense_N,0) < {0} AND (Value_Date_D >  DATEADD(dd,-4,CURRENT_TIMESTAMP)) AND DATEDIFF(MINUTE, COALESCE(Trxn.Retry_Date, CURRENT_TIMESTAMP), CURRENT_TIMESTAMP) >= (10 * (COALESCE(Trxn.Num_Retries_Suspense_N,0))) AND tbl_Curr.Curr_Short_Name IN ({1}) Order by Num_Retries_Suspense_N ASC, Inst_No ASC", RTGS_Inwards_FCUBS_Posting_Retry, STP_Currencies);
                    }

                    Inward_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), Inward_Str);
                    if (Inward_Rec.Rows.Count != 0)
                    {
                        foreach (DataRow Inward_Row in Inward_Rec.Rows)
                        {
                            BYORDOF2   = "";
                            BYORDOF3   = "";
                            BYORDOF4   = "";
                            BYORDOF5   = "";
                            ULT_BENEF2 = "";
                            ULT_BENEF3 = "";
                            ULT_BENEF4 = "";
                            ULT_BENEF5 = "";
                            PMTDET1    = "";
                            PMTDET2    = "";
                            PMTDET3    = "";
                            PMTDET4    = "";

                            tokenId_Local            = Inward_Row["Inst_No"].ToString().Trim();
                            Reference_C              = Inward_Row["Reference_C"].ToString().Trim();
                            From_Bank_Desc_C         = Inward_Row["From_Bank_Desc_C"].ToString().Trim();
                            sourceAccountNo_Local    = Inward_Row["RTGS_Acc_C"].ToString().Trim();
                            destinationAccount_Local = Inward_Row["RTGS_Suspense_Acc_C"].ToString().Trim();
                            Curr_SwitchCode_C        = Inward_Row["Curr_SwitchCode_C"].ToString().Trim();

                            Curr_Base_YN             = Convert.ToBoolean(Inward_Row["Curr_Base_YN"]);

                            sourceAccountNo_OG_Local = Inward_Row["Benef_Acc_C"].ToString().Trim();
                            Trn_OIR_C                = Inward_Row["Trn_OIR_C"].ToString().Trim();
                            sourceReference_Local    = Inward_Row["Trn_PID_C"].ToString().Trim();
                            if (sourceReference_Local.Length == 0) sourceReference_Local = Trn_OIR_C;
                            paymentAmount_Local      = double.Parse(Inward_Row["Amount_N"].ToString().Trim());

                            // Remitter Details
                            Remitter_C               = Inward_Row["Remitter_C"].ToString().Trim();
                            Remitter_Details_Str     = Remitter_C;
                            Remitter_Ac              = Inward_Row["Remitter_Acc_C"].ToString().Trim();
                            Remitter_Detail          = Inward_Row["Remitter_Detail"].ToString().Trim();
                            if (Remitter_C.Length > 20) Remitter_C = Remitter_C.Substring(1, 20);

                            LocalTag_Separator.SetValue("#R#", 0);
                            string[] RemitterParams  = Remitter_Detail.Split(LocalTag_Separator, StringSplitOptions.None);
                            double Remitter_Lines    = RemitterParams.Length;
                            Tmp_Remiter_Detail       = "";
                            NonNull_Line             = 0;

                            // Remitter Details
                            PMTDETField_Lenght = 73;
                            if (Remitter_Details_Str != "")
                            {
                                BYORDOF2 = Remitter_Details_Str;
                                if (BYORDOF2.Length >= PMTDETField_Lenght)
                                {
                                    BYORDOF2 = BYORDOF2.Substring(0, PMTDETField_Lenght);
                                    BYORDOF3 = Remitter_Details_Str.Substring(PMTDETField_Lenght, Remitter_Details_Str.Length - PMTDETField_Lenght);
                                    if (BYORDOF3.Length >= PMTDETField_Lenght)
                                    {
                                        BYORDOF3 = BYORDOF3.Substring(0, PMTDETField_Lenght);
                                        BYORDOF4 = Remitter_Details_Str.Substring(PMTDETField_Lenght * 2, Remitter_Details_Str.Length - PMTDETField_Lenght * 2);
                                        if (BYORDOF4.Length >= PMTDETField_Lenght)
                                        {
                                            BYORDOF4 = BYORDOF4.Substring(0, PMTDETField_Lenght);
                                            BYORDOF5 = Remitter_Details_Str.Substring(PMTDETField_Lenght * 3, Remitter_Details_Str.Length - PMTDETField_Lenght * 3);
                                            if (BYORDOF5.Length >= PMTDETField_Lenght)
                                            {
                                                BYORDOF5 = BYORDOF5.Substring(0, PMTDETField_Lenght);
                                            }
                                        }
                                    }
                                }
                            }

                            // Benef Details
                            Benef_C          = Inward_Row["Benef_C"].ToString().Trim();
                            Tmp_Benef_Detail = Benef_C;
                            Benef_Detail     = Inward_Row["Benef_Detail"].ToString().Trim();
                            if (Benef_C.Length > 20) Benef_C = Benef_C.Substring(1, 20);

                            LocalTag_Separator.SetValue("#R#", 0);
                            string[] BenefParams = Benef_Detail.Split(LocalTag_Separator, StringSplitOptions.None);
                            double BenefLines    = BenefParams.Length;
                            Tmp_Benef_Detail     = "";
                            NonNull_Line         = 0;

                            PMTDETField_Lenght = 73;
                            if (Tmp_Benef_Detail != "")
                            {
                                ULT_BENEF2 = Tmp_Benef_Detail;
                                if (ULT_BENEF2.Length >= PMTDETField_Lenght)
                                {
                                    ULT_BENEF2 = ULT_BENEF2.Substring(0, PMTDETField_Lenght);
                                    ULT_BENEF3 = Tmp_Benef_Detail.Substring(PMTDETField_Lenght, Tmp_Benef_Detail.Length - PMTDETField_Lenght);
                                    if (ULT_BENEF3.Length >= PMTDETField_Lenght)
                                    {
                                        ULT_BENEF3 = ULT_BENEF3.Substring(0, PMTDETField_Lenght);
                                        ULT_BENEF4 = Tmp_Benef_Detail.Substring(PMTDETField_Lenght * 2, Tmp_Benef_Detail.Length - PMTDETField_Lenght * 2);
                                        if (ULT_BENEF4.Length >= PMTDETField_Lenght)
                                        {
                                            ULT_BENEF4 = ULT_BENEF4.Substring(0, PMTDETField_Lenght);
                                            ULT_BENEF5 = Tmp_Benef_Detail.Substring(PMTDETField_Lenght * 3, Tmp_Benef_Detail.Length - PMTDETField_Lenght * 3);
                                            if (ULT_BENEF5.Length >= PMTDETField_Lenght)
                                            {
                                                ULT_BENEF5 = ULT_BENEF5.Substring(0, PMTDETField_Lenght);
                                            }
                                        }
                                    }
                                }
                            }

                            Trxn_Narr_Local    = string.Format("REM {0}/{1} - {2}", From_Bank_Desc_C, Remitter_C, sourceReference_Local);
                            PMTDETField_Lenght = 73;
                            if (Trxn_Narr_Local != "")
                            {
                                PMTDET1 = Trxn_Narr_Local;
                                if (PMTDET1.Length >= PMTDETField_Lenght)
                                {
                                    PMTDET1 = PMTDET1.Substring(0, PMTDETField_Lenght);
                                    PMTDET2 = Trxn_Narr_Local.Substring(PMTDETField_Lenght, Trxn_Narr_Local.Length - PMTDETField_Lenght);
                                    if (PMTDET2.Length >= PMTDETField_Lenght)
                                    {
                                        PMTDET2 = PMTDET2.Substring(0, PMTDETField_Lenght);
                                        PMTDET3 = Trxn_Narr_Local.Substring(PMTDETField_Lenght * 2, Trxn_Narr_Local.Length - PMTDETField_Lenght * 2);
                                        if (PMTDET3.Length >= PMTDETField_Lenght)
                                        {
                                            PMTDET3 = PMTDET3.Substring(0, PMTDETField_Lenght);
                                            PMTDET4 = Trxn_Narr_Local.Substring(PMTDETField_Lenght * 3, Trxn_Narr_Local.Length - PMTDETField_Lenght * 3);
                                            if (PMTDET4.Length >= PMTDETField_Lenght)
                                            {
                                                PMTDET4 = PMTDET4.Substring(0, PMTDETField_Lenght);
                                            }
                                        }
                                    }
                                }
                            }

                            Current_Trxn_Local      = Inward_Row["XML_File_C"].ToString().Trim();
                            Current_Trn_Batch       = Inward_Row["Batch_No_C"].ToString().Trim();
                            if (Current_Trxn_Local.Length == 0)
                            {
                                Current_Trxn_Local  = GetTrxnNo();
                                Current_Trn_Batch   = GetBatchNumber();
                                Inward_Str          = string.Format("UPDATE tbl_RTGSIn_Trxn SET XML_File_C = '{0}',  Batch_No_C = '{1}' WHERE Inst_No = '{2}'", Current_Trxn_Local, Current_Trn_Batch, tokenId_Local);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                            }
                            SourceTrxnID_Local          = Current_Trxn_Local;

                            //sourceAccountNo_OG_Local  = Inward_Row["RTGS_Acc_C"].ToString().Trim();
                            destinationAccount_OG_Local = "";
                            Source_Types_Local          = "FCUBSFCUBS";
                            sourceMethod_Local          = "CREDITPUSH";

                            FCUBS_Result                = fn_Post_Incoming_To_FCUBS_FT("IAS", tokenId_Local, "26371777", sourceAccountNo_Local, destinationAccount_Local, sourceReference_Local, paymentAmount_Local, SourceTrxnID_Local, "D", Trxn_Narr_Local, Current_Trxn_Local, "", destinationAccount_OG_Local, "FCUBSFCUBS", "CREDITPUSH", Reference_C, sourceReference_Local, Trn_OIR_C, Remitter_Ac, BYORDOF2, BYORDOF3, BYORDOF4, BYORDOF5, ULT_BENEF2, ULT_BENEF3, ULT_BENEF4, ULT_BENEF5, PMTDET1, PMTDET2, PMTDET3, PMTDET4, Curr_Base_YN, Curr_SwitchCode_C, Curr_SwitchCode_C);

                            if (FCUBS_Result.DE_Result == "SUCCESS")
                            {
                                Display_Info = string.Format("{0} : Successfully Processsed ", Reference_C);
                                Inward_Str   = string.Format("UPDATE tbl_RTGSIn_Trxn SET Posted_to_Suspense_B = '1', XML_File_C = '{1}', Posted_to_Suspense_Time = CURRENT_TIMESTAMP, Posted_to_Suspense_Desc ='{2}', Core_Reference_C = '{3}'  WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result, FCUBS_Result.DE_Core_Ref);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                            }
                            else
                            {
                                if (FCUBS_Result.DE_Result_Desc.Contains("Duplicate External Reference Number") == true)
                                {
                                    Display_Info = string.Format("{0} : Successfully Processsed ", Reference_C);
                                    Inward_Str   = string.Format("UPDATE tbl_RTGSIn_Trxn SET Posted_to_Suspense_B = '1', XML_File_C = '{1}', Posted_to_Suspense_Time = CURRENT_TIMESTAMP, Posted_to_Suspense_Desc ='{2}', Core_Reference_C = '{3}' WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result, FCUBS_Result.DE_Core_Ref);
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                }
                                else
                                {
                                    if (FCUBS_Result.DE_Result_Desc.Contains("Possible message id duplication") == true)
                                    {
                                        Display_Info = string.Format("{0} : Not Processed Processsed ({1}.  Retrying) ", Reference_C, FCUBS_Result.DE_Result_Desc);
                                        Inward_Str   = string.Format("UPDATE tbl_RTGSIn_Trxn SET   Num_Retries_Suspense_N = 0,                       XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Posted_to_Suspense_Desc ='{2}', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result_Desc);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                    }
                                    else
                                    {
                                        Display_Info = string.Format("{0} : Not Processed Processsed ({1}.) ", Reference_C, FCUBS_Result.DE_Result_Desc);
                                        Inward_Str   = string.Format("UPDATE tbl_RTGSIn_Trxn SET  Num_Retries_Suspense_N = Num_Retries_Suspense_N+1, XML_File_C = '{1}', XML_File_Date_D = CURRENT_TIMESTAMP, Posted_to_Suspense_Desc ='{2}', Retry_Date = CURRENT_TIMESTAMP WHERE Inst_No = '{0}'", tokenId_Local, Current_Trxn_Local, FCUBS_Result.DE_Result_Desc);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                                    }
                                }
                            }
                        }
                    }
                }
                return "OK";
            }
            catch (Exception ex)
            {
                Inward_Str = string.Format("UPDATE tbl_RTGSIn_Trxn SET XML_File_C = '{0}',  Batch_No_C = '{1}' WHERE Inst_No = '{2}'", Current_Trxn_Local, Current_Trn_Batch, tokenId_Local);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);

                string Err_String = ex.StackTrace.ToString();
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                Inward_Str       = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Update Detbit Accounts", Err_Date2);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], Inward_Str);
                return "Failed";
            }
        }

        public static byte[] IntToBCD(int[] input, bool isLittleEndian = false)
        {
            byte[] outArr = new byte[Convert.ToInt32(Math.Ceiling((double)input.Length / 2))];

            //Handle the case of an odd number in which a zero should be added at the beginning
            if (input.Length % 2 != 0)
            {
                //Use a temp array to expand the old one, you can use lists or 
                //anyother datastructure if you wish to
                int[] newInput = new int[input.Length + 1];
                Array.Copy(input, 0, newInput, 1, input.Length);
                newInput[0] = 0;
                input = newInput;
                //Dispose the temp array
                newInput = null;
            } 

            for (int i = 0; i < outArr.Length; i++)
            {
                outArr[i]  = (byte)(input[i * 2] << 4);
                outArr[i] |= (byte)(input[i * 2 + 1]);
            }
            return outArr;
        }


        public static string ConvertStringToHex(char[] str)
        {
            //char[] str = "12345".ToCharArray();
            int num = 0;
            for (int i = 0; i < str.Length; i++)
            {
                var val = str[str.Length - 1 - i] - 48;
                if (val < 0 || val > 9)
                    throw new ArgumentOutOfRangeException();
                num += val << (4 * i);
            }
            return num.ToString("x2");
        }


        public static string TextToHex(string ANumber, int Length)
        {
            long     Anum;
            String   HexStr = "";
            int val, val1;
            // Fix parse problem when string starts with a space
        
            long.TryParse(ANumber.Trim(), out Anum);
            double dbl;

            for (int Counter = 1; Counter <= Length; Counter++)
            {
                val    = (int)(Anum / Math.Pow(256, Counter));
                dbl    = Anum / Math.Pow(256, Counter);
                val1   = (int)((dbl - val) * 256);
                HexStr = (char)val1 + HexStr;
            }

            //for (int Counter = 0; Counter <= Length - 1; Counter++)
            //{
            //    val = (int)(Anum / Math.Pow(256, Counter));
            //    dbl = Anum / Math.Pow(256, Counter);
            //    val1 = (int)((dbl - val) * 256);
            //    HexStr = (char)val1 + HexStr;
            //}
            return HexStr;
        }


        // Just Trying something here
        public static string TextToHex(string ANumber)
        {
            int    Length = ANumber.Trim().Length;
            long   Anum;
            String HexStr = "";
            int val, val1;
            // Fix parse problem when string starts with a space

            long.TryParse(ANumber.Trim(), out Anum);
            double dbl;

            for (int Counter = 1; Counter <= Length; Counter++)
            {
                val    = (int)(Anum / Math.Pow(256, Counter));
                dbl    = Anum / Math.Pow(256, Counter);
                val1   = (int)((dbl - val) * 256);
                HexStr = (char)val1 + HexStr;
            }

            //for (int Counter = 0; Counter <= Length - 1; Counter++)
            //{
            //    val = (int)(Anum / Math.Pow(256, Counter));
            //    dbl = Anum / Math.Pow(256, Counter);
            //    val1 = (int)((dbl - val) * 256);
            //    HexStr = (char)val1 + HexStr;
            //}
            return HexStr;
        }


        public static string HexFromID(Int32 ID)
        {
            return ID.ToString("X");
        }

        public static int IDFromHex(string HexID)
        {
            return int.Parse(HexID, System.Globalization.NumberStyles.HexNumber);
        }


        //public string Import_Barclays_StaticData()
        //{
        //    System.Data.DataTable Curr_Rec = new System.Data.DataTable();
        //    System.Data.DataTable ChkRec = new System.Data.DataTable();
        //    string Curr_File = "";
        //    string Curr_File_1 = "";
        //    string currline = "";
        //    string currline_Detail = "";
        //    try
        //    {
        //        if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Barc_StaticDataImport_Enabled_YN)
        //        {
        //            LogStep("Import_Barclays_StaticData Step 0", "Import_Barclays_StaticData disabled");
        //            return "Import_Barclays_StaticData not Enabled";
        //        }
        //        else
        //        {
        //            LogStep("Import_Barclays_StaticData Step 1", "Import_Barclays_StaticData Main Entry");
        //            Curr_File               = null;
        //            string RTGS_Ref         = "";
        //            string sErrorString     = "";
        //            string Bck_Up_File      = "";
        //            string Bck_Up_File_Name = "";
        //            string TrnDate          = " ";
        //            string TrnDate2         = " ";
        //            string Response_File    = "";
        //            string Finacle_Remote_File     = "";
        //            string Finacle_Remote_File_Bkp = "";
        //            int PosSep  = 0;
        //            int PosSep2 = 0;
        //            int PosSep3 = 0;
        //            string[] Tag_Separator = { "BCN" };
        //            int Trn_Len = 0;
        //            int LineNo  = 1;

        //            //string Trn_Codes = System.Configuration.ConfigurationManager.AppSettings["AML_Trn_Codes"];

        //            string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Barc_StaticData_Folder;
        //            if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //            {
        //                In_Path += System.IO.Path.DirectorySeparatorChar;
        //            }
        //            string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Barc_StaticData_Backup_Folder;
        //            if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //            {
        //                Back_Path += System.IO.Path.DirectorySeparatorChar;
        //            }
        //            string[] FileList = Directory.GetFiles(In_Path, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Barc_StaticData_Stem);
        //            string FileName   = null;

        //            cls_StaticData tmp_StaticData_Trn = new cls_StaticData();
        //            tmp_StaticData_Trn.Initialise_Details();

        //            int File_Number = 0;
        //            foreach (string FileName_loopVariable in FileList)
        //            {
        //                FileName             = FileName_loopVariable;
        //                PosSep               = FileName.LastIndexOf("\\");

        //                Curr_File            = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
        //                Curr_File_1          = In_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //                Bck_Up_File_Name     = Back_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //                FileInfo varFileInfo = new FileInfo(Curr_File_1);

        //                if (!Utilities.IsFileLocked(varFileInfo))
        //                {
        //                    // Check if file has been imported
        //                    int File_Found = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("SELECT COUNT(*) FROM [tbl_FileHistory] WITH (NOLOCK) WHERE [File_Name_C] = '{0}'", Curr_File)).Rows[0][0].ToString());
        //                    if (File_Found == 0)
        //                    {
        //                        string LineData1 = "";
        //                        string LineData2 = "";
        //                        string LineData3 = "";
 
        //                        var lines = File.ReadAllLines(Curr_File_1);

        //                        //string FilHashVal = md5.ComputeHash(lines);
        //                        //using (var md5 = MD5.Create())
        //                        //{
        //                        //    //using (var stream = File.OpenRead(filename))
        //                        //    //{
        //                        //        return md5.ComputeHash(stream);
        //                        //    //}
        //                        //}

        //                        foreach (var line in lines)
        //                        {
        //                            currline        = line.ToString().Trim();
        //                            currline_Detail = string.Format(" Line # {0} : detail {1} in File {2}", LineNo, currline, FileName);
        //                            if (currline.Contains("|"))
        //                            {
        //                                char[]   Detail_Separator = { '|' };
        //                                string[] Data_Detail_1_Params = currline.Split(Detail_Separator);
        //                                Trn_Len = Data_Detail_1_Params.Length;
        //                                if (Trn_Len == 8)
        //                                {
        //                                    if (Data_Detail_1_Params[0].Trim() != "BRANCH NO")
        //                                    {
        //                                        tmp_StaticData_Trn.Acc_BranchNo  = Data_Detail_1_Params[0];
        //                                        tmp_StaticData_Trn.Acc_AccountNo = Data_Detail_1_Params[1];
        //                                        tmp_StaticData_Trn.Acc_CurrCode  = Data_Detail_1_Params[2];
        //                                        tmp_StaticData_Trn.Acc_ShortName = Data_Detail_1_Params[3];
        //                                        tmp_StaticData_Trn.Acc_LongName  = Data_Detail_1_Params[4];
        //                                        tmp_StaticData_Trn.Acc_Type      = Data_Detail_1_Params[5];
        //                                        tmp_StaticData_Trn.Acc_Segment   = Data_Detail_1_Params[6];
        //                                        tmp_StaticData_Trn.Acc_Opened    = Data_Detail_1_Params[7];

        //                                        var stringwriter = new System.IO.StringWriter();
        //                                        var serializer = new XmlSerializer(tmp_StaticData_Trn.GetType());
        //                                        serializer.Serialize(stringwriter, tmp_StaticData_Trn);

        //                                        currline_Detail = string.Format("RecID  in FileName_loopVariable = {0}, Object to Save = ", LineNo, stringwriter.ToString());
        //                                        string SaveResponse = saveBrainsAccountDetail(tmp_StaticData_Trn, FileName);
        //                                    }
        //                                }
        //                            }
        //                            LineNo++;
        //                        }
        //                    }
        //                    //log the file

        //                    m_databaseClass.exec(string.Format("INSERT INTO [tbl_FileHistory](File_Date_D,File_Name_C,File_Import_Date_D,Exported_B,STR_Exported_B,File_Source_C) SELECT '{0:yyyy-MM-dd}','{1}' ,'{0:yyyy-MM-dd HH:mm:ss}','0','0', 'BARC_ACCOUNTS'      ", DateTime.Now, Curr_File));
        //                    //m_databaseClass.exec(string.Format("INSERT INTO [tbl_FileHistory](File_Date_D,File_Name_C,File_Import_Date_D,Exported_B,STR_Exported_B,File_Source_C) SELECT '{0:yyyy-MM-dd}','{1}' ,'{0:yyyy-MM-dd HH:mm:ss}','0','0', 'EFT_n_IFT'", DateTime.Now, Curr_File));

        //                    //if (localImportResponse.ImportStatus == "SUCCESS")
        //                    System.IO.File.Copy(FileName, Bck_Up_File_Name, overwrite: true);
        //                    System.IO.File.Delete(FileName);
        //                }
        //            }
        //            LogStep("Import_Barclays_StaticData Step 2", "Import_Barclays_StaticData Main Exit");
        //        }
        //    }
        //    catch (Exception ExGlobal)
        //    {
        //        SR_Class.Log_to_Error("2527880", ExGlobal, "SqlHelper.insertSQL", currline_Detail);
        //    }
        //    return "Nothing";
        //}



        public string saveBrainsAccountDetail(cls_StaticData localFinDetail, string fileNme)
        {
            Hashtable Fin_Trxn_Hash = new Hashtable();
            try
            {
 
                if (localFinDetail.Acc_BranchNo  != "") Fin_Trxn_Hash.Add("Acc_BranchNo",  localFinDetail.Acc_BranchNo );
                if (localFinDetail.Acc_AccountNo != "") Fin_Trxn_Hash.Add("Acc_AccountNo", localFinDetail.Acc_AccountNo);
                if (localFinDetail.Acc_CurrCode  != "") Fin_Trxn_Hash.Add("Acc_CurrCode",  localFinDetail.Acc_CurrCode );
                if (localFinDetail.Acc_ShortName != "") Fin_Trxn_Hash.Add("Acc_ShortName", localFinDetail.Acc_ShortName);
                if (localFinDetail.Acc_LongName  != "") Fin_Trxn_Hash.Add("Acc_LongName",  localFinDetail.Acc_LongName );
                if (localFinDetail.Acc_Type      != "") Fin_Trxn_Hash.Add("Acc_Type",      localFinDetail.Acc_Type     );
                if (localFinDetail.Acc_Segment   != "") Fin_Trxn_Hash.Add("Acc_Segment",   localFinDetail.Acc_Segment  );
                if (localFinDetail.Acc_Opened    != "") Fin_Trxn_Hash.Add("Acc_Opened",    localFinDetail.Acc_Opened   );

                Fin_Trxn_Hash.Add("File_Name_C", fileNme);
                //Fin_Trxn_Hash.Add("TrnDate",     localFinDetail.TrnDate);
                //Fin_Trxn_Hash.Add("Posted_B",    "0");
                Fin_Trxn_Hash.Add("ImportTime",  string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], "tbl_CORE_Accounts", Fin_Trxn_Hash);
                return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }


        public string Synch_Customers_to_Selcom()
        {
            LogStep("Step 1", "Synch_Customers_to_Selcom Start");
            int File_Loop_Max         = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool Proxy_InUse          = true;
            string Proxy_IP           = "";
            string Proxy_Domain       = "";
            string Proxy_User         = "";
            string Proxy_Password     = "";
            string SMS_API_User       = "";
            string SMS_API_Pwd        = "";
            string Target_SMS_IMSISDN = "";
            string Target_Reg_User    = "";
            string Target_Reg_Acc     = "";
            string InstNo             = "";
            string SQLStr             = "";
            string Selcom_UserId      = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass    = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];
            string Num_Retries        = "0";
            string Last_Retry_Time    = "";
            string Extracted_YN       = "";

            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);
                {
                    // Read Transactions from View Table 
                    SQLStr = string.Format("SELECT UsrAcc.CustomerId, UsrAcc.TelephoneNo, UsrAcc.Acc_Name_C,AccountNo, CASE WHEN UsrAcc.Num_Retries_N IS NULL THEN 0 ELSE  UsrAcc.Num_Retries_N END AS Num_Retries_N, CASE WHEN UsrAcc.Last_Retry_D IS NULL THEN CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) ELSE CONVERT(VARCHAR(10),UsrAcc.Last_Retry_D,25) + ' ' + CONVERT(VARCHAR(10),UsrAcc.Last_Retry_D,108) END AS Last_Retry_D,  UsrAcc.Extracted_YN_B, Parm.* FROM UserAccount UsrAcc, (SELECT Proxy_InUse_YN_B,Proxy_IP_C,Proxy_Port_C,Proxy_Domain_C,Proxy_UserID_C,Proxy_Pass_C,SMS_API_User_C,SMS_API_Pass_C FROM tbl_SysParam WHERE Param_Type_C = 'CTL') Parm WHERE UsrAcc.Verified = 1 and ( UsrAcc.Extracted_YN_B = 0 or UsrAcc.Extracted_YN_B IS NULL) and (UsrAcc.Num_Retries_N < 5 OR UsrAcc.Num_Retries_N is null) AND (DATEDIFF(minute, UsrAcc.Last_Retry_D,CURRENT_TIMESTAMP) > 1 OR UsrAcc.Last_Retry_D IS null) order by UsrAcc.CustomerId DESC");
                    DataTable DB2Table = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (DB2Table != null && DB2Table.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DB2Table.Rows)
                        {
                            try
                            {
                                bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                                Proxy_IP         = string.Format("{0}:{1}",dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                                Proxy_Domain     = dr["Proxy_Domain_C"].ToString().Trim();
                                Proxy_User       = dr["Proxy_UserID_C"].ToString().Trim();
                                Proxy_Password   = dr["Proxy_Pass_C"].ToString().Trim();
                                SMS_API_User     = dr["SMS_API_User_C"].ToString().Trim();
                                SMS_API_Pwd      = dr["SMS_API_Pass_C"].ToString().Trim();
                                Num_Retries      = dr["Num_Retries_N"].ToString().Trim();
                                Last_Retry_Time  = dr["Last_Retry_D"].ToString().Trim();
                                Extracted_YN     = dr["Extracted_YN_B"].ToString().Trim();

                                WebProxy Http_proxy    = new WebProxy(Proxy_IP, true);
                                //Http_proxy.UseDefaultCredentials = true;
                                Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                WebClient client       = new WebClient();
                                if (Proxy_InUse)
                                {
                                    client.Proxy = Http_proxy;
                                }
                                //REQUEST
                                //username           Your username provided by Selcom to authenticate to the web service
                                //password           Your password provided by Selcom to authenticate to the web service
                                //msisdn             MSISDN for the customer whose registration is being synchronized
                                //action             One of two actions – ADD to register a new customer, DEL to unregister an existing customer
                                //RESPONSE
                                //code               Response code – 
                                //                   000 for a successful ; 
                                //                   006 Invalid Mobile Number
                                //                   007 Already exists ;
                                //                   008 Already exists ;
                                //                   999 for unsuccessful
                                //description        Brief description of the result

                                //Registered for BancABC Tanzania mobile banking portal. Username BANKABC and password 105561. Go to https://bancabc.selcommobile.com/mbanking
                                //http://soap.selcommobile.com:8080/selcom/service.asmx?op=syncCustomer
                                //http://soap.selcommobile.com:8080/selcom/service.asmx

                                string Customer_SynchresultDesc = "";
                                string Customer_SynchresultCode = "";
                                SQLStr = "";

                                Target_SMS_IMSISDN = dr["TelephoneNo"].ToString().Trim();
                                Target_Reg_User    = dr["Acc_Name_C"].ToString().Trim();
                                Target_Reg_Acc     = dr["AccountNo"].ToString().Trim();
                                InstNo             = dr["CustomerId"].ToString().Trim();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient ws            = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType      CredType      = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequestType      SynchReqType  = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequestType();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncCustomerRequest  SynchCustReq  = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncCustomerRequest();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType           Cust_StatType = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType();

                                //CredType.username = "BANCABC";
                                //CredType.password = "105561";
                                CredType.username = Selcom_UserId;
                                CredType.password = SelCom_UserPass;

                                // Synch the Customer First

                                SynchCustReq.Body                     = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncCustomerRequestBody();
                                SynchCustReq.Body.requestData         = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequestType();
                                SynchCustReq.Body.requestData.payload = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequest();

                                SynchCustReq.Body.requestData.payload.msisdn = Target_SMS_IMSISDN;
                                SynchCustReq.Body.requestData.payload.name   = Target_Reg_User;
                                SynchCustReq.Body.requestData.payload.type   = "ADD";

                                SynchReqType             = SynchCustReq.Body.requestData;
                                SynchReqType.credentials = CredType;
                               
                                Cust_StatType            = ws.syncCustomer(SynchReqType);

                                Customer_SynchresultCode = Cust_StatType.code.Trim();
                                Customer_SynchresultDesc = string.Format("{0} - {1}", Cust_StatType.code.Trim(), Cust_StatType.description.Trim());

                                SQLStr = string.Format("[dbo].[ustp_Customer_Synch] @Mobile_TelephoneNo = '{0}',@Mobile_Acc_Name_C = '{1}',@Mobile_Synch_RespCode = '{2}',@Mobile_Synch_RespDesc = '{3}', @Mobile_Synch_Action = '{4}'", Target_SMS_IMSISDN, Target_Reg_User, Customer_SynchresultCode, Customer_SynchresultDesc, "ADD");
                              
                                SqlHelper.ExecuteScalar(SQLStr);
                            }
                            catch (Exception Record_Exception)
                            {
                                string Err_String = Record_Exception.ToString();
                                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                                string retErr = LogError("Synch_Customers_to_Selcom", Err_String);
                            }
                        }
                    }
                    DB2Table = null;
                }
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("Synch_Customers_to_Selcom", Err_String);
                //MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }



        // Procedure to Process All the Files in the Directory
        public string Synch_Accounts_to_Selcom()
        {

            LogStep("Step 1", "Synch_Accounts_to_Selcom Start");
            int File_Loop_Max         = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool Proxy_InUse          = true;
            string Proxy_IP           = "";
            string Proxy_Domain       = "";
            string Proxy_User         = "";
            string Proxy_Password     = "";
            string SMS_API_User       = "";
            string SMS_API_Pwd        = "";
            string Target_SMS_IMSISDN = "";
            string Target_Reg_User    = "";
            string Target_Reg_Acc     = "";
            string InstNo             = "";
            string SQLStr             = "";
            string Selcom_UserId      = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass    = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];
            string Num_Retries        = "0";
            string Last_Retry_Time    = "";
            string Extracted_YN       = "";

            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);
                {
                    // Read Transactions from View Table 
                    //SQLStr = string.Format("SELECT UsrAcc.CustomerId, UsrAcc.TelephoneNo, UsrAcc.Acc_Name_C,AccountNo, Parm.* FROM UserAccount UsrAcc, (SELECT Proxy_InUse_YN_B,Proxy_IP_C,Proxy_Port_C,Proxy_Domain_C,Proxy_UserID_C,Proxy_Pass_C,SMS_API_User_C,SMS_API_Pass_C FROM tbl_SysParam WHERE Param_Type_C = 'CTL') Parm WHERE UsrAcc.Verified = 1 and ( UsrAcc.Extracted_YN_B = 0 or UsrAcc.Extracted_YN_B IS NULL) and (UsrAcc.Num_Retries_N < 5 OR UsrAcc.Num_Retries_N is null) AND (DATEDIFF(minute, UsrAcc.Last_Retry_D,CURRENT_TIMESTAMP) > 1 OR UsrAcc.Last_Retry_D IS null)");
                    SQLStr = string.Format("SELECT UsrAcc.CustomerId, UsrAcc.TelephoneNo, UsrAcc.Acc_Name_C,AccountNo, CASE WHEN UsrAcc.Num_Retries_N IS NULL THEN 0 ELSE  UsrAcc.Num_Retries_N END AS Num_Retries_N, CASE WHEN UsrAcc.Last_Retry_D IS NULL THEN CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) ELSE CONVERT(VARCHAR(10),UsrAcc.Last_Retry_D,25) + ' ' + CONVERT(VARCHAR(10),UsrAcc.Last_Retry_D,108) END AS Last_Retry_D,  UsrAcc.Extracted_YN_B, Parm.* FROM UserAccount UsrAcc, (SELECT Proxy_InUse_YN_B,Proxy_IP_C,Proxy_Port_C,Proxy_Domain_C,Proxy_UserID_C,Proxy_Pass_C,SMS_API_User_C,SMS_API_Pass_C FROM tbl_SysParam WHERE Param_Type_C = 'CTL') Parm WHERE UsrAcc.Verified = 1 and ( UsrAcc.Extracted_YN_B = 0 or UsrAcc.Extracted_YN_B IS NULL) and (UsrAcc.Num_Retries_N < 5 OR UsrAcc.Num_Retries_N is null) AND (DATEDIFF(minute, UsrAcc.Last_Retry_D,CURRENT_TIMESTAMP) > 1 OR UsrAcc.Last_Retry_D IS null)");
                    DataTable DB2Table = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (DB2Table != null && DB2Table.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DB2Table.Rows)
                        {
                            try
                            {
                                bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                                Proxy_IP        = string.Format("{0}:{1}", dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                                Proxy_Domain    = dr["Proxy_Domain_C"].ToString().Trim();
                                Proxy_User      = dr["Proxy_UserID_C"].ToString().Trim();
                                Proxy_Password  = dr["Proxy_Pass_C"].ToString().Trim();
                                SMS_API_User    = dr["SMS_API_User_C"].ToString().Trim();
                                SMS_API_Pwd     = dr["SMS_API_Pass_C"].ToString().Trim();
                                Num_Retries     = dr["Num_Retries_N"].ToString().Trim();
                                Last_Retry_Time = dr["Last_Retry_D"].ToString().Trim();
                                Extracted_YN    = dr["Extracted_YN_B"].ToString().Trim();

                                WebProxy Http_proxy = new WebProxy(Proxy_IP, true);
                                Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                WebClient client = new WebClient();
                                if (Proxy_InUse)
                                {
                                    client.Proxy = Http_proxy;
                                }

                                //REQUEST
                                //username           Your username provided by Selcom to authenticate to the web service
                                //password           Your password provided by Selcom to authenticate to the web service
                                //msisdn             MSISDN for the customer whose registration is being synchronized
                                //action             One of two actions – ADD to register a new customer, DEL to unregister an existing customer
                                //RESPONSE
                                //code               Response code – 000 for a successful ; 008 Already exists ;999 for unsuccessful
                                //description        Brief description of the result

                                //Registered for BancABC Tanzania mobile banking portal. Username BANKABC and password 105561. Go to https://bancabc.selcommobile.com/mbanking
                                //http://soap.selcommobile.com:8080/selcom/service.asmx?op=syncCustomer
                                //http://soap.selcommobile.com:8080/selcom/service.asmx

                                string Account_SynchresultDesc = "";
                                string Account_SynchresultCode = "";

                                SQLStr = "";
                                Target_SMS_IMSISDN = dr["TelephoneNo"].ToString().Trim();
                                Target_Reg_User    = dr["Acc_Name_C"].ToString().Trim();
                                Target_Reg_Acc     = dr["AccountNo"].ToString().Trim();
                                InstNo             = dr["CustomerId"].ToString().Trim();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient    ws              = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType         CredType        = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequestType  SynchAccReqType = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequestType();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequest      SynchAccReq     = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequest();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountResponse     SynchAccResp    = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountResponse();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType              Acc_StatType    = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType();

                                

                                //CredType.username = "BANCABC";
                                //CredType.password = "105561";
                                CredType.username = Selcom_UserId;
                                CredType.password = SelCom_UserPass;

                                // Synch the Account
                                SynchAccReq.msisdn  = Target_SMS_IMSISDN;
                                SynchAccReq.account = Target_Reg_Acc;
                                SynchAccReq.type    = "ADD";

                                SynchAccReqType.credentials = CredType;
                                SynchAccReqType.payload     = SynchAccReq;

                                Acc_StatType                = ws.syncAccount(SynchAccReqType);

                                //SynchReq.name = Target_Reg_User;
                                //SynchReq.msisdn = "255682800585";

                                Account_SynchresultCode = Acc_StatType.code.Trim();
                                Account_SynchresultDesc = string.Format("{0} - {1}", Acc_StatType.code.Trim(), Acc_StatType.description.Trim());

                                if (Account_SynchresultCode == "000")
                                {
                                    SQLStr = string.Format("Update UserAccount set Extract_ID_C = '{0}', Extract_FileName_C = '{1}', Extract_Date_D = '{2:yyyy-MM-dd HH:mmm:ss}', Extracted_YN_B = '1' Where CustomerId = '{3}'", Account_SynchresultCode, Account_SynchresultDesc, DateTime.Now, InstNo);
                                }
                                else
                                {
                                    SQLStr = string.Format("[dbo].[ustp_Sycn_Retry] @MobileNo = '{0}', @Response_Code = '{1}', @Response_Desc = '{2}', @Num_Retries = '{3}',  @Last_Retry_Time = '{4}', @Extracted_YN = '{5}'", Target_SMS_IMSISDN, Account_SynchresultCode, Account_SynchresultDesc, Num_Retries, Last_Retry_Time, (Extracted_YN == "False" ? "0":"1"));
                                }

                                SqlHelper.ExecuteScalar(SQLStr);
                               // string kats = m_databaseClass.exec(SQLStr).ToString();

                                //lstContents = "";
                                //foreach (string s in lst_Info.Items)
                                //{
                                //    lstContents += s;
                                //}
                                //TxtFound = lstContents.Contains(Target_SMS_IMSISDN);
                                //if (!(TxtFound))
                                //{
                                //    lst_Info.Items.Add(string.Format("{0:yyyy/MM/dd HH:mm:ss} Synched Mobile : {1} ", DateTime.Now.ToString(), Target_SMS_IMSISDN));
                                //    lst_Info.Refresh();
                                //}
                            }
                            catch (Exception Record_Exception)
                            {
                                string Err_String = Record_Exception.ToString();
                                Err_String    = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                                string retErr = LogError("Synch_Accounts_to_Selcom", Err_String);
                            }
                        }
                    }
                    DB2Table = null;
                }
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("Synch_Accounts_to_Selcom", Err_String);
               // MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }


        public string De_Synch_Accounts_from_Selcom()
        {

            LogStep("Step 1", "De_Synch_Accounts_from_Selcom Step Start");
            int File_Loop_Max         = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool Proxy_InUse          = true;
            string Proxy_IP           = "";
            string Proxy_Domain       = "";
            string Proxy_User         = "";
            string Proxy_Password     = "";
            string SMS_API_User       = "";
            string SMS_API_Pwd        = "";
            string Target_SMS_IMSISDN = "";
            string Target_Reg_User    = "";
            string Target_Reg_Acc     = "";
            string InstNo             = "";
            string SQLStr             = "";
            string Account_SynchresultDesc = "";
            string Account_SynchresultCode = "";
            string Selcom_UserId          = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass        = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];

            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);
                {
                    // Read Transactions from View Table 
                    SQLStr             = string.Format("SELECT TOP 30 * FROM vw_UnDeSynched_Accounts ORDER BY 1 ASC");
                    DataTable DB_Table = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (DB_Table != null && DB_Table.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DB_Table.Rows)
                        {
                            try
                            {
                                bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                                Proxy_IP       = string.Format("{0}:{1}", dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                                Proxy_Domain   = dr["Proxy_Domain_C"].ToString().Trim();
                                Proxy_User     = dr["Proxy_UserID_C"].ToString().Trim();
                                Proxy_Password = dr["Proxy_Pass_C"].ToString().Trim();
                                SMS_API_User   = dr["SMS_API_User_C"].ToString().Trim();
                                SMS_API_Pwd    = dr["SMS_API_Pass_C"].ToString().Trim();

                                WebProxy Http_proxy    = new WebProxy(Proxy_IP, true);
                                //Http_proxy.UseDefaultCredentials = true;
                                Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                WebClient client       = new WebClient();
                                if (Proxy_InUse)
                                {
                                    client.Proxy = Http_proxy;
                                }
                                //REQUEST
                                //username           Your username provided by Selcom to authenticate to the web service
                                //password           Your password provided by Selcom to authenticate to the web service
                                //msisdn             MSISDN for the customer whose registration is being synchronized
                                //action             One of two actions – ADD to register a new customer, DEL to unregister an existing customer
                                //RESPONSE
                                //code               Response code – 
                                //                   000 for a successful ; 
                                //                   006 Invalid Mobile Number
                                //                   007 Already exists ;
                                //                   008 Already exists ;
                                //                   999 for unsuccessful
                                //description        Brief description of the result

                                //Registered for BancABC Tanzania mobile banking portal. Username BANKABC and password 105561. Go to https://bancabc.selcommobile.com/mbanking
                                //http://soap.selcommobile.com:8080/selcom/service.asmx?op=syncCustomer
                                //http://soap.selcommobile.com:8080/selcom/service.asmx

                                Account_SynchresultDesc = "";
                                Account_SynchresultCode = "";

                                Target_SMS_IMSISDN = dr["TelephoneNo"].ToString().Trim();
                                Target_Reg_User    = dr["Acc_Name_C"].ToString().Trim();
                                Target_Reg_Acc     = dr["AccountNo"].ToString().Trim();
                                InstNo             = dr["Inst_No"].ToString().Trim();


                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient ws  = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType CredType = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequestType SynchAccReqType = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequestType();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequest SynchAccReq         = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountRequest();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountResponse SynchAccResp       = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncAccountResponse();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType Acc_StatType = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType();

                                //CredType.username = "BANCABC";
                                //CredType.password = "105561";
                                CredType.username = Selcom_UserId;
                                CredType.password = SelCom_UserPass;

                                // Synch the Account
                                SynchAccReq.msisdn  = Target_SMS_IMSISDN;
                                SynchAccReq.account = Target_Reg_Acc;
                                SynchAccReq.type    = "DEL";

                                SynchAccReqType.credentials = CredType;
                                SynchAccReqType.payload = SynchAccReq;

                                Acc_StatType = ws.syncAccount(SynchAccReqType);

                                //SynchReq.name = Target_Reg_User;
                                //SynchReq.msisdn = "255682800585";

                                Account_SynchresultCode = Acc_StatType.code.Trim();
                                Account_SynchresultDesc = string.Format("{0} - {1}", Acc_StatType.code.Trim(), Acc_StatType.description.Trim()).ToString();
                                Account_SynchresultDesc = System.Text.RegularExpressions.Regex.Replace(Account_SynchresultDesc, @"\s{2,}", " ").Replace("\n", "").Trim();

                                SQLStr = string.Format("Update UserAccount_UnSync set  UnSunch_Account_Resp_C = '{0}', Last_Retry_Account_D = CURRENT_TIMESTAMP, Num_Retries_Account_N = (CASE WHEN Num_Retries_Account_N IS NULL THEN 1 ELSE Num_Retries_Account_N + 1 END) Where Inst_No = '{1}'", Account_SynchresultDesc, InstNo);
                                m_databaseClass.exec(SQLStr);

                                //lstContents = "";
                                //foreach (string s in lst_Info.Items)
                                //{
                                //    lstContents += s;
                                //}
                                //TxtFound = lstContents.Contains(Target_SMS_IMSISDN);
                                //if (!(TxtFound))
                                //{
                                //    lst_Info.Items.Add(string.Format("{0:yyyy/MM/dd HH:mm:ss} Synched Mobile : {1} ", DateTime.Now.ToString(), Target_SMS_IMSISDN));
                                //    lst_Info.Refresh();
                                //}
                            }
                            catch (Exception Record_Exception)
                            {
                                string Err_String = Record_Exception.StackTrace.ToString();
                                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                                string retErr = LogError("De_Synch_Accounts_from_Selcom", Err_String);
                            }
                        }
                    }
                    DB_Table = null;
                }
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.StackTrace.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("De_Synch_Accounts_from_Selcom", Err_String);
                //MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }



        public string De_Synch_Customers_from_Selcom()
        {

            LogStep("Step 1", "De_Synch_Customers_from_Selcom Step Start");
            int File_Loop_Max = int.Parse(System.Configuration.ConfigurationManager.AppSettings["SMS_Max_Batch_Size"]);
            bool   Proxy_InUse = true;
            string Proxy_IP = "";
            string Proxy_Domain = "";
            string Proxy_User = "";
            string Proxy_Password = "";
            string SMS_API_User = "";
            string SMS_API_Pwd = "";
            string Target_SMS_IMSISDN = "";
            string Target_Reg_User = "";
            string Target_Reg_Acc = "";
            string InstNo = "";
            string SQLStr = "";
            string Customer_SynchresultDesc = "";
            string Customer_SynchresultCode = "";

            string Selcom_UserId   = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserID"];
            string SelCom_UserPass = System.Configuration.ConfigurationManager.AppSettings["Selcom_Web_UserPass"];

            try
            {
                m_databaseClass = new Select_Research.SQLDB(m_databaseConnection.ConnString);
                {
                    // Read Transactions from View Table 
                    SQLStr = string.Format("SELECT TOP 30 * FROM vw_UnDeSynched_Customers ORDER BY 1 ASC");
                    DataTable DB_Table = m_databaseClass.getDataSet(SQLStr).Tables[0];
                    if (DB_Table != null && DB_Table.Rows.Count > 0)
                    {
                        foreach (DataRow dr in DB_Table.Rows)
                        {
                            try
                            {
                                bool.TryParse(dr["Proxy_InUse_YN_B"].ToString().Trim(), out Proxy_InUse);
                                Proxy_IP       = string.Format("{0}:{1}", dr["Proxy_IP_C"].ToString().Trim(), dr["Proxy_Port_C"].ToString().Trim());
                                Proxy_Domain   = dr["Proxy_Domain_C"].ToString().Trim();
                                Proxy_User     = dr["Proxy_UserID_C"].ToString().Trim();
                                Proxy_Password = dr["Proxy_Pass_C"].ToString().Trim();
                                SMS_API_User   = dr["SMS_API_User_C"].ToString().Trim();
                                SMS_API_Pwd    = dr["SMS_API_Pass_C"].ToString().Trim();

                                WebProxy   Http_proxy  = new WebProxy(Proxy_IP, true);
                                Http_proxy.Credentials = new NetworkCredential(Proxy_User, Proxy_Password, Proxy_Domain);
                                WebClient client       = new WebClient();
                                if (Proxy_InUse)
                                {
                                    client.Proxy = Http_proxy;
                                }
                                //REQUEST
                                //username           Your username provided by Selcom to authenticate to the web service
                                //password           Your password provided by Selcom to authenticate to the web service
                                //msisdn             MSISDN for the customer whose registration is being synchronized
                                //action             One of two actions – ADD to register a new customer, DEL to unregister an existing customer
                                //RESPONSE
                                //code               Response code – 
                                //                   000 for a successful ; 
                                //                   006 Invalid Mobile Number
                                //                   007 Already exists ;
                                //                   008 Already exists ;
                                //                   999 for unsuccessful
                                //description        Brief description of the result

                                //Registered for BancABC Tanzania mobile banking portal. Username BANKABC and password 105561. Go to https://bancabc.selcommobile.com/mbanking
                                //http://soap.selcommobile.com:8080/selcom/service.asmx?op=syncCustomer
                                //http://soap.selcommobile.com:8080/selcom/service.asmx

                                Customer_SynchresultDesc = "";
                                Customer_SynchresultCode = "";
                               

                                Target_SMS_IMSISDN = dr["TelephoneNo"].ToString().Trim();
                                Target_Reg_User    = dr["Acc_Name_C"].ToString().Trim();
                                Target_Reg_Acc     = dr["AccountNo"].ToString().Trim();
                                InstNo             = dr["Inst_No"].ToString().Trim();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient ws            = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.WebServiceSoapClient();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType      CredType      = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.credentialsType();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequestType      SynchReqType  = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequestType();
                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncCustomerRequest  SynchCustReq  = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncCustomerRequest();

                                e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType           Cust_StatType = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.statusType();

                                //CredType.username = "BANCABC";
                                //CredType.password = "105561";
                                CredType.username = Selcom_UserId;
                                CredType.password = SelCom_UserPass;

                                // DeSynch the Customer First

                                SynchCustReq.Body                     = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncCustomerRequestBody();
                                SynchCustReq.Body.requestData         = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequestType();
                                SynchCustReq.Body.requestData.payload = new e_Verify_BACK_OFFICE_Service_Interface.selcommobile.syncRequest();

                                SynchCustReq.Body.requestData.payload.msisdn = Target_SMS_IMSISDN;
                                SynchCustReq.Body.requestData.payload.name   = Target_Reg_User;
                                SynchCustReq.Body.requestData.payload.type   = "DEL";

                                SynchReqType             = SynchCustReq.Body.requestData;
                                SynchReqType.credentials = CredType;

                                Cust_StatType            = ws.syncCustomer(SynchReqType);

                                Customer_SynchresultCode = Cust_StatType.code.Trim();
                                Customer_SynchresultDesc = string.Format("{0} - {1}", Cust_StatType.code.Trim(), Cust_StatType.description.Trim());

                                Customer_SynchresultDesc = System.Text.RegularExpressions.Regex.Replace(Customer_SynchresultDesc, @"\s{2,}", " ").Replace("\n", "").Trim();
                                if (Customer_SynchresultCode == "008")
                                {
                                    SQLStr = string.Format("Update UserAccount_UnSync SET UnSunch_Customer_Resp_C = '{0}', Last_Retry_Customer_D = CURRENT_TIMESTAMP, Num_Retries_Customer_N = 6 Where Inst_No = '{1}'", Customer_SynchresultDesc, InstNo);
                                }
                                else
                                {
                                    SQLStr = string.Format("Update UserAccount_UnSync SET UnSunch_Customer_Resp_C = '{0}', Last_Retry_Customer_D = CURRENT_TIMESTAMP, Num_Retries_Customer_N = (CASE WHEN Num_Retries_Customer_N IS NULL THEN 1 ELSE Num_Retries_Customer_N + 1 END) Where Inst_No = '{1}'", Customer_SynchresultDesc, InstNo);
                                }
                                m_databaseClass.exec(SQLStr);
                            }
                            catch (Exception Record_Exception)
                            {
                                string Err_String = Record_Exception.StackTrace.ToString();
                                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                                string retErr = LogError("De_Synch_Customers_from_Selcom", Err_String);
                            }
                        }
                    }
                    DB_Table = null;
                }
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String = ex.StackTrace.ToString();
                Err_String = System.Text.RegularExpressions.Regex.Replace(Err_String, @"\s{2,}", " ").Replace("\n", "").Trim();
                string retErr = LogError("De_Synch_Customers_from_Selcom", Err_String);
                //MessageBox.Show(string.Format("Error : {0} - {1}", ex.GetHashCode().ToString(), Err_String));
                return "2";
            }
            //finally
            //{
            //    Application.DoEvents();
            //}
        }

        public License_Obj fn_Check_License(int Lic_Len, string DeCryptkey)
        {
            int       Lic_Err_Code          = 0;
            string    License_Response      = "";
            DataTable InfoRec               = new DataTable();
            string    License_Code          = "";
            string    DecryPted_License     = "";
            string    DateToday_Str         = "";
            string    Tmp_Date              = "";
            int       License_Response_Code = -9;
            DateTime  Lic_ExpiryDate;
            DateTime  DateToday     ;

            License_Obj Tmp_License_Obj = new License_Obj();
            Tmp_License_Obj.IntialiseResults();
            //InitializeConnection();

            try
            {
                //InfoRec = m_databaseClass.getDataSet("SELECT License_Code_Outward_C, CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,108)   as CurrDate FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'").Tables[0];
                InfoRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "SELECT License_Code_Outward_C AS Licence_Code_Global, CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,108) as CurrDate FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'");
                if (InfoRec.Rows.Count != 0)
                {
                    foreach (DataRow InfoRow1 in InfoRec.Rows)
                    {
                        License_Code  = InfoRow1["Licence_Code_Global"].ToString().Trim();
                        DateToday_Str = InfoRow1["CurrDate"].ToString().Trim();
                    }
                }

                DecryPted_License = Utilities.DecryptStringAES(License_Code, DeCryptkey);

                if ((DecryPted_License == null) || (DecryPted_License.Length != 19))
                {
                    Tmp_License_Obj.Response_Code = -3;
                    Tmp_License_Obj.Response_Desc = string.Format("Invalid License Code - Call IT/SelTech Support. ");
                }

                Tmp_Date = string.Format("{0}-{1}-{2}", DecryPted_License.Substring(0, 4), DecryPted_License.Substring(6, 2), DecryPted_License.Substring(12, 2));
                DateTime.TryParse(Tmp_Date, out Lic_ExpiryDate);
                Tmp_License_Obj.License_Expiry_Date = Lic_ExpiryDate;

                Lic_ExpiryDate = Lic_ExpiryDate.AddHours(09);
                Lic_ExpiryDate = Lic_ExpiryDate.AddDays(01);
                Tmp_License_Obj.License_Expiry_Date_Concessionary = Lic_ExpiryDate;

                DateTime.TryParse(DateToday_Str, out DateToday);

                if (DateToday > Lic_ExpiryDate)
                {
                    Tmp_License_Obj.Response_Code = -5;
                    Tmp_License_Obj.Response_Desc = string.Format("License expired on {0:yyyy-MM-dd HH:mm} - Call IT/SelTech Support.", Lic_ExpiryDate);
                    LogStep("fn_Check_License", Tmp_License_Obj.Response_Desc);
                }
                else
                {
                    Tmp_License_Obj.Response_Code = 0;
                    Tmp_License_Obj.Response_Desc = string.Format("License is Valid Until {0:yyyy-MM-dd HH:mm}", Lic_ExpiryDate);
                }
                if (Tmp_License_Obj.Response_Code != 0)
                {
                    LogStep("fn_Check_License", "License has expired. All Operations Aborting - Report to SelTech");
                }
            }
            catch (Exception ex)
            {
                Tmp_License_Obj.Response_Code = -11;
                Tmp_License_Obj.Response_Desc = ex.StackTrace.ToString();
                LogStep("fn_Check_License", "License seems to have been tempered with. All Operations Aborting - Report to SelTech");
            }
            return Tmp_License_Obj;
        }

        public License_Obj fn_Check_License(int Lic_Len, string DeCryptkey, string License_Code, string DateToday_Str)
        {
            int         Lic_Err_Code            = 0;
            string      License_Response        = "";
            DataTable   InfoRec                 = new DataTable();
            string      DecryPted_License       = "";
            string      Tmp_Date                = "";
            int         License_Response_Code   = -9;
            DateTime    Lic_ExpiryDate;
            DateTime    DateToday;

            License_Obj Tmp_License_Obj         = new License_Obj();
            Tmp_License_Obj.IntialiseResults();
            //InitializeConnection();

            try
            {
                DecryPted_License = Utilities.DecryptStringAES(License_Code, DeCryptkey);

                if ((DecryPted_License == null) || (DecryPted_License.Length != 19))
                {
                    Tmp_License_Obj.Response_Code = -3;
                    Tmp_License_Obj.Response_Desc = string.Format("Invalid License Code - Call IT/SelTech Support. ");
                }

                Tmp_Date = string.Format("{0}-{1}-{2}", DecryPted_License.Substring(0, 4), DecryPted_License.Substring(6, 2), DecryPted_License.Substring(12, 2));
                DateTime.TryParse(Tmp_Date, out Lic_ExpiryDate);
                Tmp_License_Obj.License_Expiry_Date = Lic_ExpiryDate;

                Lic_ExpiryDate = Lic_ExpiryDate.AddHours(09);
                Lic_ExpiryDate = Lic_ExpiryDate.AddDays(01);
                Tmp_License_Obj.License_Expiry_Date_Concessionary = Lic_ExpiryDate;

                DateTime.TryParse(DateToday_Str, out DateToday);

                if (DateToday > Lic_ExpiryDate)
                {
                    Tmp_License_Obj.Response_Code = -5;
                    Tmp_License_Obj.Response_Desc = string.Format("License expired on {0:yyyy-MM-dd HH:mm} - Call IT/SelTech Support.", Lic_ExpiryDate);
                    LogStep("fn_Check_License", Tmp_License_Obj.Response_Desc);
                }
                else
                {
                    Tmp_License_Obj.Response_Code = 0;
                    Tmp_License_Obj.Response_Desc = string.Format("License is Valid Until {0:yyyy-MM-dd HH:mm}", Lic_ExpiryDate);
                }
                if (Tmp_License_Obj.Response_Code != 0)
                {
                    LogStep("fn_Check_License", "License has expired. All Operations Aborting - Report to SelTech");
                }
            }
            catch (Exception ex)
            {
                Tmp_License_Obj.Response_Code = -11;
                Tmp_License_Obj.Response_Desc = ex.StackTrace.ToString();
                LogStep("fn_Check_License", "License seems to have been tempered with. All Operations Aborting - Report to SelTech");
            }
            return Tmp_License_Obj;
        }

        string LogError(string error_Module, string error_Desc)
        {
            try
            {
                string Error_Text  = System.Text.RegularExpressions.Regex.Replace(error_Desc, @"\s{2,}", " ").Replace("\n", "");
                string Error_Time3 = string.Format("{0:yyyy-MM-dd HH:mm:ss}",  DateTime.Now);
                Hashtable m_hashtable3 = new Hashtable();
                m_hashtable3.Add("Err_Module_C", error_Module);
                m_hashtable3.Add("Err_Desc_C", Error_Text);
                m_hashtable3.Add("Err_Date_D", Error_Time3);
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(),"tbl_ErrorLog", m_hashtable3);
                return "ERROR";
            }
            catch (Exception ErrException)
            {
                string Err_Narr = LogError("Error Logging", ErrException.ToString());
                return "ERROR";
            }
        }

        string LogError(string error_Module, string error_Desc, string Tkn_ID)
        {
            try
            {
                string Error_Text = System.Text.RegularExpressions.Regex.Replace(error_Desc, @"\s{2,}", " ").Replace("\n", "");
                Hashtable m_hashtable = new Hashtable();
                m_hashtable.Add("Err_Module_C", error_Module);
                m_hashtable.Add("Err_Desc_C", Error_Text);
                m_hashtable.Add("Err_Date_D", string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                m_hashtable.Add("Err_Token", Tkn_ID);
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "tbl_ErrorLog", m_hashtable);
           
                return "ERROR";
            }
            catch (Exception ErrException)
            {
                string Err_Narr = LogError("Error Logging", ErrException.StackTrace.ToString(), Tkn_ID);
                return "ERROR";
            }
        }

        string LogError(string err_Number, string error_Module, Exception error_Desc, string serNum)
        {
            try
            {
                string error_Desc_text = System.Text.RegularExpressions.Regex.Replace(error_Desc.StackTrace.ToString(), @"\s{2,}", " ").Replace(@"\n", "");
                error_Desc_text = System.Text.RegularExpressions.Regex.Replace(error_Desc_text, @"\s{2,}", " ").Replace(@"\n", "");
                error_Desc_text = error_Desc_text.Replace("!", " ").Replace("&", " And ").Replace("<", "").Replace(">", "").Replace("'", "").Replace(",", " ");
                if (error_Desc_text.Length > 3000) 
                {
                    error_Desc_text = error_Desc_text.Substring(0, 3000);
                }

                if (error_Desc_text.Length > 3900)
                {
                    error_Desc_text = error_Desc_text.Substring(0, 3900);
                }

                string    Error_Time  = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss"));

                Hashtable m_hashtable = new Hashtable();
                m_hashtable.Add("Err_Number_N", err_Number);
                m_hashtable.Add("Err_Module_C", error_Module);
                m_hashtable.Add("Err_Desc_C"  , error_Desc_text);
                m_hashtable.Add("Unique_Ref_C", serNum);
                m_hashtable.Add("Err_Date_D"  , Error_Time);
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "tbl_ErrorLog", m_hashtable);

                return "ERROR";
            }
            catch (Exception ErrException)
            {

                string FileStem   = ConfigurationManager.AppSettings["ErrorLog_Folder"].ToString();

                if (!FileStem.EndsWith(@"\")) FileStem = FileStem + @"\";

                string TargetFile = string.Format("{0}Err_{1:yyyyMMddHH}.err",FileStem, DateTime.Now);
                File.AppendAllText(TargetFile, string.Format("{0:yyyy-MM-dd HH:mm:sss} {1}{3}", DateTime.Now, ErrException.StackTrace.ToString(), Environment.NewLine));
                return "ERROR";
            }
        }

        public e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail  fn_Post_Finacle_Transaction(
                string Param_SR_UserID,
                string Param_SR_Password,
                string Param_channelId,
                string Param_RequestUUID,
                string Parm_ChannelRefNum,
                bool Parm_ReversalFlag,
                string Parm_OriginalChannelRefNum,
                string Parm_TranAmount,
                string Parm_TranCrncy,
                string Parm_DrAcctNo,
                string Parm_CrAcctNo,
                string Parm_CrValueDate,
                string Parm_DrBICCode,
                string Parm_CrBICCode,
                string Parm_DrAcctName,
                string Parm_DrAcctAddress1,
                Trn_Narr1_Narr2_AndRef ParmTrnDet,
                string Parm_TranParticularsCodeDr,
                string Parm_TranParticularsCodeCr,
                string Parm_SourceChannel)
        {
            string HostTransaction_Status = "";
            string Parm_ChannelRefNum_Resp = "";
            string Resp_Code = "";
            string Resp_Remarks = "";
            string Off_UsRefNum = "";

            e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient Fin_Bridge_SC = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
            e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail  Fin_Response  = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();
            try
            {
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "STB")
                {
                    Fin_Response = Fin_Bridge_SC.PostToFinacle(Param_SR_UserID, Param_SR_Password, Param_channelId, Param_RequestUUID, Parm_ChannelRefNum, Parm_ReversalFlag, Parm_OriginalChannelRefNum, Parm_TranAmount, Parm_TranCrncy, Parm_DrAcctNo, Parm_CrAcctNo, Parm_CrValueDate, Parm_DrBICCode, Parm_CrBICCode, Parm_DrAcctName, Parm_DrAcctAddress1, ParmTrnDet.DR_Trn_Narrative1, ParmTrnDet.DR_Trn_Reference, ParmTrnDet.DR_Trn_Narrative2, ParmTrnDet.CR_Trn_Narrative1, ParmTrnDet.CR_Trn_Reference, ParmTrnDet.CR_Trn_Narrative2, Parm_TranParticularsCodeDr, Parm_TranParticularsCodeCr, Parm_SourceChannel);
                }
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "SCB")
                {
                    Fin_Response = Fin_Bridge_SC.PostToEDMI(Param_SR_UserID, Param_SR_Password, Param_channelId, Param_RequestUUID, Parm_ChannelRefNum, Parm_ReversalFlag, Parm_OriginalChannelRefNum, Parm_TranAmount, Parm_TranCrncy, Parm_DrAcctNo, Parm_CrAcctNo, Parm_CrValueDate, Parm_DrBICCode, Parm_CrBICCode, Parm_DrAcctName, Parm_DrAcctAddress1, ParmTrnDet.DR_Trn_Narrative1, ParmTrnDet.DR_Trn_Reference, ParmTrnDet.DR_Trn_Narrative2, ParmTrnDet.CR_Trn_Narrative1, ParmTrnDet.CR_Trn_Reference, ParmTrnDet.CR_Trn_Narrative2, Parm_TranParticularsCodeDr, Parm_TranParticularsCodeCr, Parm_SourceChannel);
                }
            }
            catch (Exception Posting_Main_Ex)
            {
                LogError(Param_RequestUUID.GetHashCode().ToString(), "Post  Finacle Transaction Out", Posting_Main_Ex, Parm_ChannelRefNum);
            }
            finally
            {
                //  Return Tmp_Finacle_Response_Detail
            }
            return Fin_Response;
        }

        private void LogError(string error)
        {
            SqlConnection con = new SqlConnection();
            try
            {

                con.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
                con.Open();

                SqlCommand cmd  = new SqlCommand();
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Connection  = con;

                cmd.CommandText = "spx_logerror";

                cmd.Parameters.Add(new SqlParameter("@Error_decription", error));

                int recordCount = cmd.ExecuteNonQuery();

            }
            catch
            {
            }
            finally
            {
                try { con.Close(); }
                catch { }
            }
        }


        private void LogStep(string varStepNumber, string varStepDescription)
        {
            try
            {
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Enable_Service_Logging)
                {
                    string    Error_Time4   = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss"));
                    Hashtable m_hashtable4  = new Hashtable();
                    m_hashtable4.Add("STEP_DESCR"  , varStepNumber);
                    m_hashtable4.Add("LOGGER_DESCR", varStepDescription);
                    m_hashtable4.Add("DATE_LOGGED" , Error_Time4);
                    SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "Service_Logger", m_hashtable4);
                }
            }
            catch
            {
            }
        }

        private void LogStep(string varStepNumber, string varStepDescription, bool LogIT)
        {
            try
            {
                if (LogIT)
                {
                    string Error_Time4 = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss"));
                    Hashtable m_hashtable4 = new Hashtable();
                    m_hashtable4.Add("STEP_DESCR"   , varStepNumber);
                    m_hashtable4.Add("LOGGER_DESCR" , varStepDescription);
                    m_hashtable4.Add("DATE_LOGGED"  , Error_Time4);
                    SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "Service_Logger", m_hashtable4);
                }
            }
            catch
            {
            }
        }


        private void SendSMS(string varPHONE_NUMBER, string varDESCRIPTION, string varSENDYESNO, string varSUBJECT, string varCAMPAIGN_NAME)
        {

            SqlConnection con = new SqlConnection();
            try
            {

                con.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
                con.Open();

                SqlCommand cmd = new SqlCommand();
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Connection = con;

                cmd.CommandText = "spx_Addcustomers";

                cmd.Parameters.Add(new SqlParameter("@PHONE_NUMBER", varPHONE_NUMBER));
                cmd.Parameters.Add(new SqlParameter("@DESCRIPTION", varDESCRIPTION));
                cmd.Parameters.Add(new SqlParameter("@SENDYESNO", varSENDYESNO));
                cmd.Parameters.Add(new SqlParameter("@SUBJECT", varSUBJECT));
                cmd.Parameters.Add(new SqlParameter("@CAMPAIGN_NAME", varCAMPAIGN_NAME));

                int recordCount = cmd.ExecuteNonQuery();

            }
            catch (Exception ex)
            {

                LogError(ex.Message.ToString());

            }
            finally
            {
                try { con.Close(); }
                catch { }
            }
        }

         int CountLinesInFile(string f)
        {
            int count = 0;
            using (StreamReader r = new StreamReader(f))
            {
                string line;
                while ((line = r.ReadLine()) != null)
                {
                    if (line.Trim() != string.Empty)
                    {
                        if (line.Substring(1, 9).Length != 0)
                        {
                            count++;
                        }
                    }
                }
            }
            return count - 1;

        }

        /*
          
         * Remove commentd subs below For the Service to run
         * Keep Commented when using in Windows Forms
           
       */
        [STAThread]
        public void DoWork(object data)
        {
            while (true)
            {
                //Execute();

                License_Obj Licence_Obj_TZ = new License_Obj();
                Licence_Obj_TZ.IntialiseResults();

                Licence_Obj_TZ = fn_Check_License(72, "SELTECH");
                if (Licence_Obj_TZ.Response_Code == 0)
                {
                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.INSTALLATION_TYPE == "CLIENT")
                    {
                        SendFileToBank();
                    }
                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.INSTALLATION_TYPE == "SERVER")
                    {
                        Zimra_Integration();
                        SendCreditAlerts();
                        ReverseZeePayIncoming();
                        ReverseZeePayOutgoing();
                        //Acquire_Incoming_And_Confirmations_Cloud();
                        UpdateDigitalID_ASYNCH();
                        //Acquire_Outward_Trxns_From_Oracle_IB_FTOT();
                       // Acquire_Outward_Trxns_From_Oracle_FSTP();
                       // Acquire_Outward_Trxns_From_Oracle_ZIPP_InternetBanking();
                        UpdateUserAccountKYCDetails();
                        //Post_Outward_to_MQ();
                        //Post_Outward_to_Cloud();
                        Post_Incoming_to_FCUBS_FT();
                        //Post_Incoming_Failues_To_Suspense_FT();
                        //Acquire_Incoming_And_Confirmations();

                        //SR_Class.fn_Save_UserLogging_Detail("before import", "0", "15831", "No Session");
                        Parse_and_Import_SFI_File();
                        //SR_Class.fn_Save_UserLogging_Detail("after  import", "0", "15831", "No Session");
                        Post_Zeepay_OutGoing_Transactions();
                        //SR_Class.fn_Save_UserLogging_Detail("before getting response", "0", "16604", "No Session");
                        Get_Zeepay_OutGoing_Transactions_Response();

                        // send_EmailAlerts();
                        //UpdateRemitterName();

                        //Acquire_RTGS_Outwards_from_History_FSTP();
                        // Acquire_RTGS_Outwards_from_History_FTOT();
                        // Acquire_RTGS_Outwards_from_History_ZIPP();
                        //Import_XML_Files();
                        //Import_IBanking_RegFile();
                        //Import_IBanking_RegFile_Move_to_UserAccount();
                        //Import_WesternUnion_csv_Files();
                        //if (1 == 9)
                        {
                            Post_MobileCharges_n_Levy_STB();
                            autoRegister2MNO();
                            Post_Mobile_Charges_n_Levy_ABC();
                            Reverse_Mobile_Transactions_Data_Insert();
                            Reverse_Mobile_Transactions_SCB();
                            Reverse_Mobile_Transactions();
                            Reverse_Mobile_Transactions_Data_Insert_Zipit();
                            Reverse_Mobile_Transactions_Zipit();

                            // Archive_Mobile_Records();

                            //fn_Post_to_Barclays_Brains();
                            fn_Post_to_ZIMRA();
                            //Alert_for_ZIMRA_Transactions();
                            //fn_Post_to_ZIMRA_OfflineFile();
                            //Synch_Customers_to_Selcom();
                            //Synch_Accounts_to_Selcom();

                            //De_Synch_Accounts_from_Selcom();
                            //De_Synch_Customers_from_Selcom();
                            //Import_Barclays_StaticData();

                            //Import_SCB_AML_Transactions();
                            //Import_SCB_Static_Data();

                            //CreateAML_File_CTR_SCB();
                            //CreateAML_File_STR();

                            Synch_ZimraBPNumbers();

                            //Synch_Customers_to_Selcom();
                            //Synch_Accounts_to_Selcom();

                            //De_Synch_Accounts_from_Selcom();
                            //De_Synch_Customers_from_Selcom();

                            //Alert_for_TZ_Mobile_Transactions();
                        }
                        //Alert_for_TZ_Mobile_License(Licence_Obj_TZ);
                        //Alert_for_ZAM_Interface_License(Licence_Obj_TZ);

                        //Thread.Sleep(e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Service_InterVal_inMilliseconds);
                    }
                }
            }
        }

        [Conditional("DEBUG_SERVICE")]
        private  void DebugMode()
        {
            Debugger.Break();
        }
        /*
        protected void ExportToPDF(object sender, EventArgs e)
        {

            //Get the data from database into datatable

            string strQuery = "select CustomerID, ContactName, City, PostalCode" +

                " from customers";

            SqlCommand cmd = new SqlCommand(strQuery);

            DataTable dt = GetData(cmd);



            //Create a dummy GridView

            GridView GridView1 = new GridView();

            GridView1.AllowPaging = false;

            GridView1.DataSource = dt;

            GridView1.DataBind();



            Response.ContentType = "application/pdf";

            Response.AddHeader("content-disposition",

                "attachment;filename=DataTable.pdf");

            Response.Cache.SetCacheability(HttpCacheability.NoCache);

            StringWriter sw = new StringWriter();

            HtmlTextWriter hw = new HtmlTextWriter(sw);

            GridView1.RenderControl(hw);

            StringReader sr = new StringReader(sw.ToString());

            Document pdfDoc = new Document(PageSize.A4, 10f, 10f, 10f, 0f);

            HTMLWorker htmlparser = new HTMLWorker(pdfDoc);

            PdfWriter.GetInstance(pdfDoc, Response.OutputStream);

            pdfDoc.Open();

            htmlparser.Parse(sr);

            pdfDoc.Close();

            Response.Write(pdfDoc);

            Response.End();

        }
        */

        /// <param name="ExcelFilePath">A valid file path like  @"C:\Users\John\Documents\Inventory.xlsx</param>
        /// <param name="SheetName">Name of excel sheet</param>
        /// 
        private DataTable GetData(SqlCommand cmd)
        {

             DataTable dt = new DataTable();

            SqlConnection con = new SqlConnection();

            con.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];

            SqlDataAdapter sda = new SqlDataAdapter();

            cmd.CommandType = CommandType.Text;

            cmd.Connection = con;

            try
            {

                con.Open();

                sda.SelectCommand = cmd;

                sda.Fill(dt);

                return dt;

            }

            catch (Exception ex)
            {

                throw ex;

            }

            finally
            {

                con.Close();

                sda.Dispose();

                con.Dispose();

            }

        }

        public static string createSettlement_UP_Req_XML
        (
            string localCurrent_Trxn, string localpostingbranch, string varPrepaid_Card_Number, string varMaker_Name,string varValueDate, string varTransfer_amount,string varChecker_Name,   string varDebit_Account_Number, string varComments, string varSettlement_UP_File_Loads_ID
        )
        {
            try
            {

                //localpostingbranch = "203";

                // Get the  Posting Branch  need to cnange to 
                string Trn_XML = "";
                Trn_XML += string.Format("<FCUBS_REQ_ENV>");
                Trn_XML += string.Format("   <FCUBS_HEADER>");
                Trn_XML += string.Format("       <SOURCE>LOANTRACKER</SOURCE>"); // CRM replaced with LOANTRACKER
                Trn_XML += string.Format("       <UBSCOMP>FCUBS</UBSCOMP>");
                Trn_XML += string.Format("       <MSGID>{0}</MSGID>", localCurrent_Trxn);
                Trn_XML += string.Format("       <CORRELID>{0}</CORRELID>", localCurrent_Trxn);
                //Trn_XML += string.Format("       <USERID>MSCRM</USERID>");

                //Trn_XML += string.Format("       <USERID>{0}</USERID>", Session["FullName"].ToString()); // LOANTRACKER

                int Use_Loan_Tracker_User_In_FCUBS_As_Maker_ID = Convert.ToInt32(ConfigurationManager.AppSettings.Get("Use_Loan_Tracker_User_In_FCUBS_As_Maker_ID"));

                if (Use_Loan_Tracker_User_In_FCUBS_As_Maker_ID == 0)
                {
                    Trn_XML += string.Format("       <USERID>{0}</USERID>", "INTERFACE"); // INTERFACE Hard coded to use the "SYSTEM" LOANTRACKER user
                }
                else
                {
                    Trn_XML += string.Format("       <USERID>{0}</USERID>", varMaker_Name); //  Picks up the currently logged in Loan tracker system user name from the session value FullName
                }

                Trn_XML += string.Format("       <BRANCH>{0}</BRANCH>", localpostingbranch);
                Trn_XML += string.Format("       <MODULEID/>");
                Trn_XML += string.Format("       <SERVICE>FCUBSUPService</SERVICE> ");
                Trn_XML += string.Format("       <OPERATION>CreateUPTransaction</OPERATION>");
                Trn_XML += string.Format("       <DESTINATION>FLEXCUBE</DESTINATION>");
                //Trn_XML += string.Format("       <FUNCTIONID>FLEXCUBE</FUNCTIONID>");
                Trn_XML += string.Format("   </FCUBS_HEADER>");
                Trn_XML += string.Format("   <FCUBS_BODY>  ");

                Trn_XML += string.Format("       <Transaction-Details-IO>");

                if (Use_Loan_Tracker_User_In_FCUBS_As_Maker_ID == 0)
                {
                    Trn_XML += string.Format("       <MAKERID>{0}</MAKERID>", "INTERFACE"); // INTERFACE LOANTRACKER FCATOP // Hard coded to use the "LOAN_TRACKER" user
                }
                else
                {
                    Trn_XML += string.Format("       <MAKERID>{0}</MAKERID>", varMaker_Name); //  Picks up the currently logged in user name from the session value FullName
                    //Trn_XML += string.Format("<CHECKERID>{0}</CHECKERID>", varChecker_Name);
                }

                Trn_XML += string.Format("<PRD>{0}</PRD>", "BPAT");
                Trn_XML += string.Format("<INSTID>{0}</INSTID>", "109820");
                Trn_XML += string.Format("<TXNCCY>{0}</TXNCCY>", "TZS");
                Trn_XML += string.Format("<BILLNO>{0}</BILLNO>", varPrepaid_Card_Number);// "4860530111721954" // Prepaid Card Number
                Trn_XML += string.Format("<BILLDT>{0}</BILLDT>", varFormatDate_To_YYYY_MM_DD(varValueDate)); //"2013-08-30" // Value date
                Trn_XML += string.Format("<BAMT>{0}</BAMT>", varTransfer_amount); //  "4000000" Transfer amount
                Trn_XML += string.Format("<BCCY>{0}</BCCY>", "TZS");
                Trn_XML += string.Format("<CUSTACNO>{0}</CUSTACNO>", varDebit_Account_Number); //"1010502818" //Please specify the FCUBS Compnay Account no linked to the card

                // Write Code which Picks the Customer Branch Code where the Account is sitting in FCUBS.
                // Trn_XML += string.Format("<CUSTBRN>{0}</CUSTBRN>", SqlHelper.GetCurrentBranche()); // Taken out by Kirungi on 14 May 2014
                Trn_XML += string.Format("<ACCCY>{0}</ACCCY>", "TZS");
                Trn_XML += string.Format("<NARRATIVE>{0}</NARRATIVE>", varPrepaid_Card_Number + " : " + varComments); // "203CLEZ132540031" //Loan Disbursement - Loan Account Number
                //Trn_XML += string.Format("<INSTRNO>{0}</INSTRNO>","12345"); // Please specify the check number
                Trn_XML += string.Format("<CONSNO>{0}</CONSNO>", varPrepaid_Card_Number);//"4860530111721954" // Same as the prepaid card number
                Trn_XML += string.Format("<XRATE>{0}</XRATE>", "1");
                Trn_XML += string.Format("<CUST_ID>{0}</CUST_ID>", "109820"); // "109820" Please specify the Customer No  here -- txtCustomer_Settlement_Account_In_FCUBS.Text.Trim()
                Trn_XML += string.Format("<OFSACNO>{0}</OFSACNO>", "L13110000");
                Trn_XML += string.Format("<OFSACBRN>{0}</OFSACBRN>", "004");
                Trn_XML += string.Format("<OFSACCCY>{0}</OFSACCCY>", "TZS");
                Trn_XML += string.Format("<TXNDATE>{0}</TXNDATE>", varFormatDate_To_YYYY_MM_DD(varValueDate)); //"2013-08-30" // Value date
                Trn_XML += string.Format("<TXNBRN>{0}</TXNBRN>", localpostingbranch);

                Trn_XML += string.Format("<XREF>{0}</XREF>", "INTFF_" + varSettlement_UP_File_Loads_ID); // "203CLEZ132540" // Put The Loan refenece number or Account umber

                //Trn_XML += string.Format("<RATECODE>{0}</RATECODE>","M");
                //Trn_XML += string.Format("<RATETYPE>{0}</RATETYPE>","STANDARD");

                Trn_XML += string.Format("       </Transaction-Details-IO>");

                Trn_XML += string.Format("   </FCUBS_BODY>  ");
                Trn_XML += string.Format("</FCUBS_REQ_ENV>");

                Trn_XML = System.Text.RegularExpressions.Regex.Replace(Trn_XML, @"\s{2,}", " ");
                return Trn_XML;
            }
            catch (Exception ErrException)
            {
                //string Err_Narr = LogError("Query Utility Record ", ErrException.ToString());
                return ErrException.ToString();
            }

        }

        public static string Post_To_FCUBS_Process
        (
            string sourceAccountBranch,
            string varPrepaid_Card_Number,
            string varMaker_Name,
            string varValueDate,
            string varTransfer_amount,
            string varChecker_Name,
            string varDebit_Account_Number, 
            string varComments, 
            string varSettlement_UP_File_Loads_ID
        )
        {
            try
            {
                string SourceAccBranch = sourceAccountBranch;
                string Trn_EntryXML    = "";
                string TrnPostingStr   = "";
                string DE_Result       = "";
                string DE_Result_Desc  = "";
                //string Trxn_Narr = "";
                string Posting_Result  = "NOT SUCCESSFUL";

                string Current_Trxn = "MS" + "000000000111";
                //string Current_Batch = "8015";

                Trn_EntryXML = createSettlement_UP_Req_XML
                (
                    Current_Trxn, SourceAccBranch,varPrepaid_Card_Number, varMaker_Name,varValueDate, varTransfer_amount,
                    varChecker_Name,varDebit_Account_Number,  varComments,  varSettlement_UP_File_Loads_ID
                );

                // Use the WebService CreateCustAcc Exposed Method.
                //System.Diagnostics.Debugger.Break();

                e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.FCUBSUPServiceSEIClient     sc       = new e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.FCUBSUPServiceSEIClient();
                e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.CreateUPTransactionRequest  TrxnReq  = new e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.CreateUPTransactionRequest();
                e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.CreateUPTransactionResponse TrxnResp = new e_Verify_BACK_OFFICE_Service_Interface.FCUBSUPService.CreateUPTransactionResponse();

                // Trn_EntryXML = "<FCUBS_REQ_ENV> <FCUBS_HEADER> <SOURCE>LOANTRACKER</SOURCE> <UBSCOMP>FCUBS</UBSCOMP> <MSGID>MS000000000111</MSGID> <CORRELID>MS000000000111</CORRELID> <USERID>SYSTEM</USERID> <BRANCH>TZ1</BRANCH> <MODULEID/> <SERVICE>FCUBSUPService</SERVICE> <OPERATION>CreateUPTransaction</OPERATION> <DESTINATION>FLEXCUBE</DESTINATION> </FCUBS_HEADER> <FCUBS_BODY> <Transaction-Details-IO><MAKERID>FCATOP</MAKERID><CHECKERID>FCATOP</CHECKERID><PRD>BPAT</PRD><INSTID>109820</INSTID><TXNCCY>TZS</TXNCCY><BILLNO>4860530111721954</BILLNO><BILLDT>2013-08-30</BILLDT><BAMT>4000000</BAMT><BCCY>TZS</BCCY><CUSTACNO>1010502818</CUSTACNO><CUSTBRN>TZ1</CUSTBRN><ACCCY>TZS</ACCCY><NARRATIVE>203CLEZ132540031</NARRATIVE><CONSNO>4860530111721954</CONSNO><XRATE>1</XRATE><CUST_ID>109820</CUST_ID><OFSACNO>L13110000</OFSACNO><OFSACBRN>004</OFSACBRN><OFSACCCY>TZS</OFSACCCY><TXNDATE>2013-08-30</TXNDATE><TXNBRN>TZ1</TXNBRN><XREF>203CLEZ1326</XREF> </Transaction-Details-IO> </FCUBS_BODY> </FCUBS_REQ_ENV>";

                // Working Values in this TAGS below - just comment out and get the EXREF is not Unique error as the reponse
               // Trn_EntryXML = "<FCUBS_REQ_ENV> <FCUBS_HEADER> <SOURCE>LOANTRACKER</SOURCE> <UBSCOMP>FCUBS</UBSCOMP> <MSGID>MS000000000111</MSGID> <CORRELID>MS000000000111</CORRELID> <USERID>FLEXSWITCH</USERID> <BRANCH>TZ1</BRANCH> <MODULEID/> <SERVICE>FCUBSUPService</SERVICE> <OPERATION>CreateUPTransaction</OPERATION> <DESTINATION>FLEXCUBE</DESTINATION> </FCUBS_HEADER> <FCUBS_BODY> <Transaction-Details-IO><MAKERID>FCATOP</MAKERID><CHECKERID>FCATOP</CHECKERID><PRD>BPAT</PRD><INSTID>109820</INSTID><TXNCCY>TZS</TXNCCY><BILLNO>4860530111721954</BILLNO><BILLDT>2013-08-30</BILLDT><BAMT>4000000</BAMT><BCCY>TZS</BCCY><CUSTACNO>1010502818</CUSTACNO><CUSTBRN>TZ1</CUSTBRN><ACCCY>TZS</ACCCY><NARRATIVE>203CLEZ132540031</NARRATIVE><CONSNO>4860530111721954</CONSNO><XRATE>1</XRATE><CUST_ID>109820</CUST_ID><OFSACNO>L13110000</OFSACNO><OFSACBRN>004</OFSACBRN><OFSACCCY>TZS</OFSACCCY><TXNDATE>2013-08-30</TXNDATE><TXNBRN>TZ1</TXNBRN><XREF>203CLEZ1326</XREF> </Transaction-Details-IO> </FCUBS_BODY> </FCUBS_REQ_ENV>";

                TrnPostingStr = sc.CreateUPTransaction(Trn_EntryXML);

                if (TrnPostingStr == null)
                {
                 
                    //TrnPostingStr = sc.CreateUPTransaction(Trn_EntryXML).ToString();

                    return "Failed No respone Error for sc.CreateUPTransaction(Trn_EntryXML)";
                }

                TrnPostingStr = System.Text.RegularExpressions.Regex.Replace(TrnPostingStr, @"\s{2,}", " ").Replace("\n", "");

                string[] Tag_Separator = { "BCN" };
                Tag_Separator.SetValue("<FCUBS_HEADER>", 0);
                string[] TrnPostingStr_Parms = TrnPostingStr.Split(Tag_Separator, StringSplitOptions.None);
                int TrnPostingStr_Len = 0;
                TrnPostingStr_Len = TrnPostingStr_Parms.Length;
                if (TrnPostingStr_Len > 1)
                {
                    TrnPostingStr = string.Format("{0}{1}", "<FCUBS_RES_ENV><FCUBS_HEADER>", TrnPostingStr_Parms[1]);
                }
                try
                {

                    XmlDocument xml = new XmlDocument();

                    // System.Diagnostics.Debugger.Break();

                    // Load the xml document
                    xml.LoadXml(TrnPostingStr);
                    DE_Result = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_HEADER/MSGSTAT").InnerText;

                    //XmlNodeList xnList = xml.SelectNodes("/FCUBS_RES_ENV/FCUBS_HEADER/MSGSTAT");
                    //foreach (XmlNode xn in xnList)
                    //{
                    //    DE_Result = xn["MSGSTAT"].InnerText;
                    //}

                    //System.Diagnostics.Debugger.Break();

                    if (DE_Result == "FAILURE")
                    {
                        /* 
                         Create a table called FCUBS_ WEB_LOGIC_ERRORS with 3 Fields
                         
                         1 - Field name = ErrorID = @@identity = seed Unique System generated field get next seq no
                         
                         2 - Field name = ECODE = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/ECODE").InnerText
                         
                         3 - Field name = EDESC = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/EDESC").InnerText;
                         
                         */
                        DE_Result_Desc = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/EDESC").InnerText;

                        DE_Result = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR/ECODE").InnerText;
                        Posting_Result = DE_Result_Desc;

                        // System.Diagnostics.Debugger.Break();

                        XmlNodeList xnList = xml.SelectNodes("/FCUBS_RES_ENV/FCUBS_BODY/FCUBS_ERROR_RESP/ERROR");
                        foreach (XmlNode xn in xnList)
                        {

                            DE_Result_Desc = DE_Result_Desc + " " + xn["EDESC"].InnerText;
                            DE_Result = DE_Result + " " + xn["ECODE"].InnerText;

                        }

                        sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS(DE_Result, DE_Result_Desc, varMaker_Name, varSettlement_UP_File_Loads_ID);
                        //sub_Get_Settlement_UP_line();
                        
                        //MsgBox("Error for contract  " + DropDownProduct.Value + DE_Result_Desc + " Error Code  = : " + DE_Result, this.Page, this, DE_Result + "  : error for  " + DropDownProduct.Value);

                        //System.Diagnostics.Debugger.Break();

                    }
                    else
                    {
                        // Web Logic Created Utility Payment Successful. Money will be transefered to the pre-paid card number into Tieto CMS
                        if (DE_Result == "SUCCESS")
                        {
                            if (xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/Transaction-Details/FCCREF").InnerText != null)
                            {
                                DE_Result = xml.SelectSingleNode("/FCUBS_RES_ENV/FCUBS_BODY/Transaction-Details/FCCREF").InnerText;

                                //txtSettlement_UP_Reference_number_from_FCUBS.Text = DE_Result;

                                sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS(DE_Result, "Success", varMaker_Name,varSettlement_UP_File_Loads_ID);

                                //txtReference_number_from_FCUBS.Text = DE_Result;

                                //sub_Get_Settlement_UP_line();

                                //MsgBox("New contract " + DropDownProduct.Value + "  FCUBS reference number Created Successfully = " + DE_Result, this.Page, this, DE_Result + "  : new FCUBS reference for  " + DropDownProduct.Value);

                                //System.Diagnostics.Debugger.Break();
                            }
                            else
                            {
                                //System.Diagnostics.Debugger.Break();

                            }
                        }
                    }
                }
                catch (XmlException Create_Account_Err)
                {
                    // Log the Error into SQL Error Log Table
                    return Create_Account_Err.ToString();
                }

                //txtSettlement_FCUBS_feedback.Text = (DE_Result + " " + DE_Result_Desc.Trim()).Trim();
                //txtSettlement_UP_Reference_number_from_FCUBS.Text = DE_Result;

                return DE_Result;
            }
            catch (XmlException Create_Account_XML_Error)
            {
                //string Err_Narr = LogError("Post Oracle Charge", ChargePosting_Error.ToString());
                return Create_Account_XML_Error.ToString();
            }
        }

        protected static void sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS
        (
             string var_FCUBS_Reference_Number_Returned, string var_Settlement_FCUBS_feedback, string varMaker_Name, string varSettlement_UP_File_Loads_ID
        )
        {

            SqlConnection conn = new SqlConnection();
            try
            {
                if (SqlHelper.Get_Parameter_One_value("LoggingAll") == 1)
                {
                    SqlHelper.LogError_No_Pop_Up_Msg(varMaker_Name + " Settlement_UP_File_Loads_UP_ID : " + varSettlement_UP_File_Loads_ID + " :Inside sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS", "Step 1");
                }

                conn.ConnectionString = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
                conn.Open();

                SqlCommand cmd = new SqlCommand();
                cmd.CommandType = System.Data.CommandType.StoredProcedure;
                cmd.Connection = conn;


                cmd.CommandText = "sp_Settlement_UP_File_Loads_Update_One";

                cmd.Parameters.Add("@parSettlement_UP_File_Loads_ID", SqlDbType.BigInt).Value = varSettlement_UP_File_Loads_ID;
                cmd.Parameters.Add("@parLastUpdatedBy ", SqlDbType.NVarChar).Value = varMaker_Name;
                cmd.Parameters.Add("@parSettlement_UP_Reference_number_from_FCUBS", SqlDbType.NVarChar).Value = var_FCUBS_Reference_Number_Returned;

                if (var_Settlement_FCUBS_feedback == "Success")
                {
                    cmd.Parameters.Add("@parSettlement_FCUBS_feedback", SqlDbType.NVarChar).Value = "Success";
                }
                else
                {
                    cmd.Parameters.Add("@parSettlement_FCUBS_feedback", SqlDbType.NVarChar).Value = var_Settlement_FCUBS_feedback;
                }
               
                if (SqlHelper.Get_Parameter_One_value("LoggingAll") == 1)
                {
                    SqlHelper.LogError_No_Pop_Up_Msg(varMaker_Name + " Settlement_UP_File_Loads_UP_ID : " + varSettlement_UP_File_Loads_ID + " :Inside sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS", "Step 2 Before cmd.ExecuteNonQuery()");
                }

                int recordCount = cmd.ExecuteNonQuery();

                //sub_Get_Settlement_UP_line(); // Retrieve back all records again to reflect the Saved New or updated record

                if (SqlHelper.Get_Parameter_One_value("LoggingAll") == 1)
                {
                    SqlHelper.LogError_No_Pop_Up_Msg(varMaker_Name + " Settlement_UP_File_Loads_UP_ID : " + varSettlement_UP_File_Loads_ID + " :Inside sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS", "Step 2 After cmd.ExecuteNonQuery()");
                }

            }
            catch (SqlException ex)
            {
                SqlHelper.LogError_No_Pop_Up_Msg(ex.ToString(), "Settlement_UP_File_Loads_UP_ID : " + varSettlement_UP_File_Loads_ID + " sub_Settlement_UP_File_Loads_UP_Update_Reference_number_from_FCUBS");
            }
            finally
            {
                try { conn.Close(); }
                catch { }
            }
        }

        public string Zimra_Integration()
        {
            string    Str_to_display = "";
            int       File_Loop_No   = 1;
            //int     File_Loop_Max  = int.Parse(System.Configuration.ConfigurationSettings.AppSettings["eVerify_Integrate_Max_Batch_Size"]);
            string    lstContents    = "";
            bool      TxtFound       = false;
            string    Ref_No_C       = "";
            string    SQLStr         = "";
            bool      isNewRRN       = true ;
            DataTable MQ_Rec         = new DataTable();
            DataTable paramTable     = new DataTable();
            Int32     ZIMRA_RRN_RANGE_START = 1;
            Int32     ZIMRA_RRN_RANGE_END   = 999999999;
            DataTable Mobile_DB             = new DataTable();
            Hashtable m_hashtable;

            bool Finacle_Live           = true;
            string Mobile_Type          = "";
            string Mobile_Connection    = "";
            string localReferenceNumber = "";
            string trxnProduct_ID       = "Zimra_Integration";
            //String MQ_OutDir       = System.Configuration.ConfigurationSettings.AppSettings["eVerify_Integrate_Temp_Directory"];
            //if (!(MQ_OutDir.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) MQ_OutDir = MQ_OutDir + System.IO.Path.DirectorySeparatorChar.ToString();

            try
            {
                SQLStr = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr).Rows[0][0].ToString()) > 0)
                {
                    LogStep(trxnProduct_ID, string.Format("{0} Main Entry", trxnProduct_ID));

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        Mobile_Connection = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(),    "SELECT Conn_String_C FROM tbl_Connections WITH (NOLOCK) WHERE Conn_Name_C = 'MOBILE'").Rows[0][0].ToString();
                        // Mobile_DB = new Select_Research.SQLDB(Mobile_Connection);
     
                        // Check if There was any processing Today and Insert a new Record if there was not
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "IF NOT EXISTS(SELECT * FROM [tbl_Run_Days] Where [Trxn_Prod_ID] = 'ZIMRA' AND [Trxn_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))) INSERT INTO [tbl_Run_Days]([Trxn_Date_D],[Trxn_Prod_ID],[Trxn_RunNo_N]) SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime ,'ZIMRA' AS [Trxn_Prod_ID], 1 AS RunNo");

                        //bool Finacle_Live = bool.Parse(m_databaseClass.getDataSet("SELECT Finacle_Live FROM tbl_SysParam  WITH (NOLOCK) WHERE ParamID = 'CTL'").Tables[0].Rows[0][0].ToString());
                        //if (Finacle_Live == false)
                        //{
                        //    string Import_File = Import_XML_Files();
                        //}
                        ///string Move_Files = Move_Approved_Files();
                        string Processing_Date = "";
      
                        MQ_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("EXEC [dbo].[ustp_ZIMRA_Outgoing] @Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID));
                        if (MQ_Rec.Rows.Count != 0)
                        {

                            SQLStr     = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('SAVE_ZIMRA_ONLINE_RECORD_ON_POSTING','ZIMRA_POSTING_DUPLICATE_CHECK_ENABLED','ZIMRA_RRN_RANGE_START','ZIMRA_RRN_RANGE_END','ZIMRA_RRN_PREFIX') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                            paramTable = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                            if (paramTable.Rows.Count > 0)
                            {
                                foreach (DataRow param_Row in paramTable.Rows)
                                {
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZIMRA_RRN_RANGE_START".ToUpper()) ZIMRA_RRN_RANGE_START = Convert.ToInt32(param_Row["Parameter_Value"].ToString());
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZIMRA_RRN_RANGE_END".ToUpper())   ZIMRA_RRN_RANGE_END   = Convert.ToInt32(param_Row["Parameter_Value"].ToString());
                                }
                            }
                            foreach (DataRow MQRow in MQ_Rec.Rows)
                            {
                                // Check if we are within Processing Window
                                Processing_Date    = MQRow["Curr_Date"].ToString();
                                Mobile_Type        = MQRow["Mobile_Type"].ToString();

                                DateTime Curr_Time = DateTime.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "SELECT CONVERT(VARCHAR(16),CURRENT_TIMESTAMP,25) as Curr_Date").Rows[0][0].ToString());
                                DateTime StartTime = DateTime.Parse(MQRow["eVerify_Integrate_Process_Window_Start"].ToString());
                                DateTime EndTime   = DateTime.Parse(MQRow["eVerify_Integrate_Process_Window_End"].ToString());
               
                                bool.TryParse(MQRow["Finacle_Live"].ToString(), out Finacle_Live);

                                if (!(Curr_Time >= StartTime && Curr_Time <= EndTime))
                                {
                                    break;
                                }


                                Ref_No_C                  = MQRow["ReferenceNumber"].ToString().Trim();
                                string ZIMRA_Reciept_No   = "";
                                string ZIMRA_Reciept_Date = "";
                                int    Int_Records_Found  = 0;
                                string Cur_RRN            = ""  ;
                                bool   NewRRN             = false;
                                if (SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("SELECT COUNT(*) AS Recs FROM tbl_ZIMRA_Confirmation WITH (NOLOCK) WHERE ZIMRA_In_Ref_C = '{0}'",Ref_No_C)).Rows[0][0].ToString() == "0")
                                {
                                    // Get Server Date
                                    string Curr_Date = MQRow["Curr_Time"].ToString();
                                    if ((MQRow["ZIMRA_RRN_C"].ToString() == "") || (MQRow["ZIMRA_RRN_C"].ToString() == null))
                                    {
                                       //Cur_RRN = m_databaseClass.getDataSet(String.Format("[dbo].[ustp_GetRRN]")).Tables[0].Rows[0][0].ToString();
                                       //int myRandomNo   = new Random().Next(0, 999999999);
                                       //string strRandom = myRandomNo.ToString();
                       
                                       //if (strRandom.Length < 9)
                                       //{
                                       //    strRandom = strRandom.PadLeft(9, (char)48);
                                       //}
                                        isNewRRN = true;
                                        while (isNewRRN)
                                        {
                                            int myRandomNo   = new Random().Next(ZIMRA_RRN_RANGE_START, ZIMRA_RRN_RANGE_END);
                                            string strRandom = myRandomNo.ToString();
                                            if (strRandom.Length < 9)
                                            {
                                                strRandom = strRandom.PadLeft(9, (char)48);
                                            }
                                            Cur_RRN    = strRandom;
                                            SQLStr     = string.Format("SELECT TOP 1 * FROM vw_Used_RRNs WITH (NOLOCK) WHERE TRH_Trn_Ref = '{0}'", Cur_RRN);
                                            if (SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr).Rows.Count == 0)
                                            {
                                                isNewRRN = false;
                                            }
                                        }

                                       NewRRN  = true;
                                       SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("Update tbl_ZIMRA_Integration_Staging SET ZIMRA_RRN_C = '{0}' Where ZIMRA_Ref_C  = '{1}'"                          , Cur_RRN, Ref_No_C));
                                       SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("Update EXTRHFLE                      SET TRH_Trn_Ref = '{0}' Where TRH_Group_ID = '{0}' AND TRH_Trxn_Type = 'PST'", Cur_RRN, Ref_No_C));
                                    }
                                    else
                                    {
                                       Cur_RRN = MQRow["ZIMRA_RRN_C"].ToString() ;
                                    }

                                    string MQPaymentDate = MQRow["PaymentDate"].ToString();
                                    MQPaymentDate        = string.Format("{0}{1}{2}", MQPaymentDate.Substring(8,2), MQPaymentDate.Substring(5,2), MQPaymentDate.Substring(2,2));
                                    string MQPaymentTime = "";
                                    MQPaymentTime        =  MQRow["CaptureTime"].ToString().Substring(0,5);
                                    e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.ZimraWebServiceSoapClient  sc  = new e_Verify_BACK_OFFICE_Service_Interface.ZIMRA_Online.ZimraWebServiceSoapClient();

                                    //Initialise the Body
                                    string localAccNo           = MQRow["AccountNumber"].ToString();
                                    string localAmount          = MQRow["Amount"].ToString();
                                    string localBPNumber        = MQRow["BPNumber"].ToString();
                                    string localCaptureTime     = MQPaymentTime;
                                    string localClientName      = MQRow["ClientName"].ToString();
                                    //string localCurrency      = "USD";
                                    string localCurrency        = MQRow["Currency"].ToString();
                                    string localPaymentDate     = MQPaymentDate;
                                    localReferenceNumber        = MQRow["ReferenceNumber"].ToString();
                                    string localRegion          = MQRow["Region"].ToString();
                                    string localRRN             =  string.Format("F{0}_STB",Cur_RRN);
                                    string localSerialNumber    = Cur_RRN;
                                    string localTaxCode         = MQRow["TaxCode"].ToString();
                                    //Trn_Req.Body.SelectCode = "SELECT_ZIMRA";
                                    //string localUserID = "StanbicBankeVerify";

                                    if ((localBPNumber.Length < 10) && (localBPNumber.Length > 1))
                                    {
                                        //if ((localBPNumber.Substring(0, 1) == "P") || (localBPNumber.Substring(0, 1) == "F"))
                                        double BPOut = 0;
                                        if (double.TryParse(localBPNumber, out BPOut))
                                        {
                                           localBPNumber = "0" + localBPNumber;
                                        }
                                    }

                                    //string TrnPostingStr = sc.ZIMRA_PaymentAdvice("SELECT_ZIMRA", localAccNo, localAmount, localBPNumber, localCaptureTime, localClientName, localCurrency, localCaptureTime, localReferenceNumber, localRegion, localRRN, localSerialNumber, localTaxCode, localUserID).ToString();
                                    localClientName     =  Utilities.Remove_XML_SpecialCharacters(localClientName);
                                    if (localClientName.Length > 25)
                                    {
                                        localClientName = localClientName.Substring(0, 25);
                                    }
                                    // Manage_timeouts Here Mark a Timed_Out Transactions as Processed and Give Error Reasons
                                    string Trn_Curr_Date = MQRow["Curr_Time"].ToString();
                                    string Trn_Curr_Time = MQRow["Curr_Time_Seconds"].ToString();
                                    string TrnPostingStr = "";
                                    try
                                    {
                                        TrnPostingStr = sc.ZIMRA_PaymentAdvice("SELECT_ZIMRA", localAccNo, localAmount, localBPNumber, localCaptureTime, localClientName, localCurrency, localPaymentDate, localReferenceNumber, localRegion, localRRN, localSerialNumber, localTaxCode, "").ToString();
                                        TrnPostingStr = System.Text.RegularExpressions.Regex.Replace(TrnPostingStr, @"\s{2,}", " ").Replace("\n", "");

                                        Tag_Separator.SetValue("<Reciept_ENV>", 0);
                                        string[] TrnPostingStr_Parms = TrnPostingStr.Split(Tag_Separator, StringSplitOptions.None);
                                        int TrnPostingStr_Len = 0;
                                        TrnPostingStr_Len     = TrnPostingStr_Parms.Length;

                                        if (TrnPostingStr_Len > 1)
                                        {
                                            TrnPostingStr = string.Format("{0}{1}", "<Reciept_ENV>", TrnPostingStr_Parms[1]);
                                            try
                                            {
                                                XmlDocument xml    = new XmlDocument();
                                                xml.LoadXml(TrnPostingStr);
                                                ZIMRA_Reciept_No   = xml.SelectSingleNode("/Reciept_ENV/Reciept").InnerText;
                                                ZIMRA_Reciept_Date = xml.SelectSingleNode("/Reciept_ENV/ReceiptTime").InnerText;

                                                // Now send the SMSes.
                                                string Cust_No     = MQRow["TRH_Cust_Contact_C"].ToString().Trim();
                                                if ((ZIMRA_Reciept_No != "") && (ZIMRA_Reciept_Date != ""))
                                                {
                                                    string Trn_Amount   = MQRow["Amount"].ToString();
                                                    string Trn_SMS_Data = string.Format("Your ZIMRA Receipt No. is : {0} for Stanbic Trn. Ref : {1}, Amnt: {2:0,0.00}, Obligation {3}. Thank YOU", ZIMRA_Reciept_No, MQRow["ReferenceNumber"].ToString(), MQRow["Amount"].ToString(), MQRow["TaxCode"].ToString());

                                                    m_hashtable = new Hashtable();
                                                    m_hashtable.Add("ZIMRA_In_Ref_C"         ,  MQRow["ReferenceNumber"].ToString());
                                                    m_hashtable.Add("ZIMRA_In_Receipt_C"     ,  ZIMRA_Reciept_No);
                                                    m_hashtable.Add("ZIMRA_In_Receipt_Date_C",  ZIMRA_Reciept_Date);
                                                    m_hashtable.Add("ZIMRA_In_Amnt_N"        ,  Trn_Amount);
                                                    m_hashtable.Add("Curr_C"                 ,  localCurrency);
                                                    m_hashtable.Add("ZIMRA_In_ImportDate_D"  ,  Trn_Curr_Date);
                                                    m_hashtable.Add("ZIMRA_In_ImportTime_C"  ,  Trn_Curr_Time);
                                                    m_hashtable.Add("Sent_to_SMS_Data_C"     ,  Trn_SMS_Data);
                                                    SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "tbl_ZIMRA_Confirmation", m_hashtable);

                                                    // SEND SMS Immediately
                                                    m_hashtable = new Hashtable();
                                                    m_hashtable.Add("SMS_Source_System_C"   ,  "ZIMRA");
                                                    m_hashtable.Add("SMS_Source_IMSISDN_C"  ,  MQRow["Source_Mobile_C"].ToString());
                                                    m_hashtable.Add("SMS_Target_IMSISDN_C"  ,  Cust_No);
                                                    m_hashtable.Add("SMS_Message_C"         ,  Trn_SMS_Data);
                                                    m_hashtable.Add("SMS_Source_Date_D"     ,  string.Format("{0} {1}", Trn_Curr_Date, Trn_Curr_Time));
                                                    m_hashtable.Add("SMS_Source_Reference_C",  MQRow["ReferenceNumber"].ToString());
                                                    m_hashtable.Add("SMS_Target_Reference_C",  ZIMRA_Reciept_No);
                                                    SqlHelper.insertSQL(ConfigurationManager.AppSettings["SMS_DB_Connection"].ToString(), "tbl_SMS"  ,  m_hashtable);
                                                    Int_Records_Found += 1;

                                                    // Now Tag the Transaction
                                                    string Move_Processed_Trxn = string.Format("dbo.ustp_Move_ZIMRA_Posted  '{0}',          '{1:yyyy-MM-dd HH:mmm:ss}'        , '{2:yyyy-MM-dd HH:mmm:ss}'      , '{3}'      ,'{4}'    ,'{5}', '{6}'", Ref_No_C, StartTime, EndTime, Curr_Date, string.Format("{0}#R#{1}", ZIMRA_Reciept_Date, ZIMRA_Reciept_No), "", "1");
                                                    //  EXEC [ustp_Move_ZIMRA_Posted] 'SB201211180004','2013-05-05','2013-05-05','2013-05-05','TESTING',''
                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), Move_Processed_Trxn);

                                                    Str_to_display = string.Format("{0}  has been processed on : {1}", Ref_No_C, DateTime.Now.ToString());
                                                    //  Mark the Record as Extracted.
                                                    Move_Processed_Trxn = string.Format("Update EXTRHFLE SET HTTP_Responce_C = '{1}', TRH_Trn_Ref = '{2}', TRH_Extracted = 1, TRH_Extracted_Auto = 1,  TRH_Extract_Time = CURRENT_TIMESTAMP Where TRH_Group_ID = '{0}' AND TRH_Trxn_Type = 'PST'", Ref_No_C, ZIMRA_Reciept_No, Cur_RRN);
                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), Move_Processed_Trxn);
                                                }
                                                else
                                                {
                                                    // Check if Errror Has already been displayed
                                                    lstContents  = "";
                                                    TxtFound     = lstContents.Contains(Ref_No_C);
                                                    if (!(TxtFound))
                                                    {
                                                        Str_to_display = string.Format("{0}  has NOT BEEN PROCESSED on : {1}", Ref_No_C, DateTime.Now.ToString());
                                                    }
                                                }
                                            }
                                            catch (XmlException XML_Parsing)
                                            {
                                                ZIMRA_Reciept_No = string.Format("{0} - {1}", "ERROR", XML_Parsing.StackTrace.ToString());
                                            }
                                        }
                                    }
                                    catch (Exception TimeOutException)
                                    {
                                        string Move_Processed_Trxn_str = string.Format("dbo.ustp_Move_ZIMRA_Posted  '{0}',          '{1:yyyy-MM-dd HH:mmm:ss}'        , '{2:yyyy-MM-dd HH:mmm:ss}'      , '{3}'      ,'{4}'    ,'{5}', '{6}'", Ref_No_C, StartTime, EndTime, Curr_Date, string.Format("{0}#R#{1}", ZIMRA_Reciept_Date, ZIMRA_Reciept_No), "","0");
                                        //  EXEC [ustp_Move_ZIMRA_Posted] 'SB201211180004','2013-05-05','2013-05-05','2013-05-05','TESTING',''
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), Move_Processed_Trxn_str);
     
                                        string Error_File = string.Format("Time Out Error on : {0} . Check Error Log for complete details",Ref_No_C);
                                        TxtFound = lstContents.Contains(Error_File);
                                        if (!(TxtFound))
                                        {
                                            Str_to_display     = string.Format("ZIMRA Outwards : {0}{1}. {2}{0}", DateTime.Now.ToString(), (char)13, Error_File);
                                            string InnerExcept =  System.Text.RegularExpressions.Regex.Replace(TimeOutException.StackTrace.ToString(), "/s{2,}", " ").Replace("\n", "");
                                            string Err_Narr    = LogError(TimeOutException.GetHashCode().ToString(), "Zimra_Integration", TimeOutException, Ref_No_C);
                                        }
                                    }
                                File_Loop_No = File_Loop_No + 1;
                                }
                            }
                        }
    
                        // Now Update ECONET Records
                        string Mobile_Str = "";
                        if (Finacle_Live == false)
                        {
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), string.Format("[usp_MoveIntegration_Trxns]"));
                            if ((Mobile_Type == "ECONET") || (Mobile_Type == "CELLULANT"))
                            {
                                Mobile_Str = "SELECT stg.ECONET_Ref_C FROM tbl_ECONET_Integration_Staging stg WHERE stg.ECONET_Out_Posted_YN_B = 0";
                            }
                            MQ_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), Mobile_Str);
                            if (MQ_Rec.Rows.Count != 0)
                            {
                                foreach (DataRow MQRow in MQ_Rec.Rows)
                                {
                                    string Econet_Reference = MQRow["ECONET_Ref_C"].ToString();
                                    if ((Mobile_Type == "ECONET") || (Mobile_Type == "CELLULANT"))
                                    {
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), string.Format("UPDATE Payment_Instruction SET Posted_In_MUB_B = 1 Where trnReference = '{0}' OR sourceReference = '{0}'", Econet_Reference));
                                    }
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"].ToString(), string.Format("UPDATE tbl_ECONET_Integration_Staging SET ECONET_Out_Posted_YN_B = 1 Where  ECONET_Ref_C = '{0}'", Econet_Reference));
                                    Str_to_display = string.Format("{0} mobile Ref. has been processed on : {1}. ", Econet_Reference, DateTime.Now.ToString());
                                }
                            }
                        }
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                    }
                }
                LogStep(trxnProduct_ID, string.Format("{0} Main Exit", trxnProduct_ID));
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = Err_String = System.Text.RegularExpressions.Regex.Replace(ex.StackTrace.ToString(), @"\s{2,}", " ").Replace("\n", "");
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display    = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string ErrRet     = LogError(ex.GetHashCode().ToString(), trxnProduct_ID, ex,localReferenceNumber);
                return "2";
            }
            finally
            {
                //Application.DoEvents();
            }
        }

        public string Acquire_RTGS_Outwards_from_History_ZIPP_OneDay()
        {
            string    Source_Ref     = "";
            string    Source_RefNew  = "";
            ////bool      TxtFound       = false;
            DataTable UserDefTable   = new DataTable();
            DataTable DailyOracleTbl = new DataTable();
            DataTable benefTable     = new DataTable();
            DataTable DupRecs        = new DataTable();
            DataTable MQ_Rec         = new DataTable();
            string    SQL_Str        = "";
            string    OraclStr       = "";
            string    Str_to_display = "";
            string    benefSQLStr    = "";
            DataTable FileTable      = new DataTable();
            Hashtable m_hashtable    = new Hashtable();
            string    FileName_C = "";

            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient EcoSvc     = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail             CustDetail = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();

            try
            {
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward;
                if (FCUBS_DataAquisition)
                {
                    SQL_Str   = "SELECT DISTINCT FH.* FROM dbo.tbl_FileHistory FH WITH (NOLOCK) INNER JOIN [tbl_RTGS_Outward_Trxn_Staging_Manual] ManTrxn ON ManTrxn.File_Name_C = FH.File_Name_C  WHERE UPPER(FH.File_Source_C) = UPPER('OutwardRecovery') AND  FH.importStage_C = '1' AND FH.Approved_YN = '1' AND ManTrxn.Reference_C LIKE '%ZIPP%' AND ManTrxn.Synched = 0";
                    FileTable = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                    if (FileTable != null && FileTable.Rows.Count > 0)
                    {
                        foreach (DataRow File_Row in FileTable.Rows)
                        {
                            FileName_C = File_Row["File_Name_C"].ToString();
                            SQL_Str  = string.Format("exec dbo.ustp_GetMissed_Transactions @File_Name_C = '{0}'", FileName_C);
                            OraclStr = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str).Rows[0]["FCUBSRef_Set"].ToString();

                            SQL_Str = " SELECT * FROM zwfcc11.ACTB_HISTORY LogTbl WHERE ";
                            SQL_Str += "     LogTbl.MODULE     = 'RT'  ";
                            SQL_Str += " AND LogTbl.AMOUNT_TAG = 'TXN_AMT'  ";
                            SQL_Str += " AND LogTbl.PRODUCT    = 'ZIPP'  ";
                            SQL_Str += " AND LogTbl.DRCR_IND   = 'D'   ";
                            SQL_Str += " AND LogTbl.CUST_GL    = 'A'   ";
                            //SQL_Str += " AND LogTbl.TRN_DT     = 'USD'  ";
                            //SQL_Str += " AND LogTbl.EVENT      != 'REVR'  ";
                            SQL_Str += " AND LogTbl.TRN_REF_NO IN  ('120ZIPP201410043','504ZIPP201410012','301ZIPP201410014','301ZIPP201410024','504ZIPP201410009','504ZIPP201410001','125ZIPP201410010','301ZIPP201410017','301ZIPP201410021','504ZIPP201410002','509ZIPP201410001','120ZIPP201410045','301ZIPP201410022','ZW2ZIPP201410027','504ZIPP201410010','504ZIPP201410005','125ZIPP201410007','117ZIPP201410007','301ZIPP201410015','504ZIPP201410013','125ZIPP201410008','116ZIPP201410005','ZW2ZIPP201410025','301ZIPP201410020','301ZIPP201410016','120ZIPP201410049','504ZIPP201410007','504ZIPP201410003','125ZIPP201410009','301ZIPP201410018','120ZIPP201410044','ZW2ZIPP201410028','301ZIPP201410027','504ZIPP201410011','504ZIPP201410008','301ZIPP201410019','125ZIPP201410011','504ZIPP201410014','301ZIPP201410026','116ZIPP201410004','301ZIPP201410028','512ZIPP201410002','ZW2ZIPP201410026','120ZIPP201410048','301ZIPP201410023','301ZIPP201410025','504ZIPP201410006','504ZIPP201410004')";

                            //SQL_Str += string.Format(" AND LogTbl.TRN_REF_NO IN  {0}", OraclStr);
                            //SQL_Str = "SELECT * FROM zwfcc11.ACTB_HISTORY LogTbl WHERE      LogTbl.MODULE     = 'RT'   AND LogTbl.AMOUNT_TAG = 'TXN_AMT'   AND LogTbl.PRODUCT    = 'ZIPP'   AND LogTbl.DRCR_IND   = 'D'    AND LogTbl.CUST_GL    = 'A'    AND LogTbl.TRN_DT     = 'USD'   AND LogTbl.TRN_REF_NO IN  ('120ZIPP201410043','504ZIPP201410012','301ZIPP201410014','301ZIPP201410024','504ZIPP201410009','504ZIPP201410001','125ZIPP201410010','301ZIPP201410017','301ZIPP201410021','504ZIPP201410002','509ZIPP201410001','120ZIPP201410045','301ZIPP201410022','ZW2ZIPP201410027','504ZIPP201410010','504ZIPP201410005','125ZIPP201410007','117ZIPP201410007','301ZIPP201410015','504ZIPP201410013','125ZIPP201410008','116ZIPP201410005','ZW2ZIPP201410025','301ZIPP201410020','301ZIPP201410016','120ZIPP201410049','504ZIPP201410007','504ZIPP201410003','125ZIPP201410009','301ZIPP201410018','120ZIPP201410044','ZW2ZIPP201410028','301ZIPP201410027','504ZIPP201410011','504ZIPP201410008','301ZIPP201410019','125ZIPP201410011','504ZIPP201410014','301ZIPP201410026','116ZIPP201410004','301ZIPP201410028','512ZIPP201410002','ZW2ZIPP201410026','120ZIPP201410048','301ZIPP201410023','301ZIPP201410025','504ZIPP201410006','504ZIPP201410004')";

                            DailyOracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], SQL_Str);
                            if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                            {
                                foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                                {
                                    Source_Ref = DailyOracleRow["TRN_REF_NO"].ToString();
                                    //Source_RefNew = Source_Ref.Replace("ZIPP", "RIPP");
                                    Source_RefNew = Source_Ref;

                                    // Check for Duplicates in Local Staging Table
                                    string Check_str = string.Format("SELECT Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) WHERE (Trxn_Ref_C = '{0}')", Source_RefNew);
                                    DupRecs = new DataTable();
                                    DupRecs = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], Check_str);
                                    if ((DupRecs.Rows.Count == 0) || (DupRecs == null))
                                    {
                                        OraclStr     = string.Format("SELECT CONTRACT_REF_NO, VERSION_NO, MODULE, PRODUCT_CODE, FIELD_VAL_1, FIELD_VAL_2, FIELD_VAL_3, FIELD_VAL_4, FIELD_VAL_5 FROM zwfcc11.CSTM_CONTRACT_USERDEF_FIELDS WHERE CONTRACT_REF_NO = '{0}'", Source_Ref);
                                        UserDefTable = new DataTable();
                                        UserDefTable = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                        if (UserDefTable != null && UserDefTable.Rows.Count > 0)
                                        {
                                            foreach (DataRow UserDefRow in UserDefTable.Rows)
                                            {
                                                CustDetail = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();
                                                CustDetail = EcoSvc.FCUBS_AccountEnquiry(string.Format("{0}{1}", DailyOracleRow["AC_BRANCH"].ToString(), DailyOracleRow["AC_NO"].ToString()), false, "FCUBS");

                                                string Remmitter = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Name);

                                                string Trn_Amnt = DailyOracleRow["LCY_AMOUNT"].ToString();
                                                string ValueDt = string.Format("{0:yyyyMMdd}", Convert.ToDateTime(DailyOracleRow["TRN_DT"].ToString()));
                                                //string RRF_Val  = DailyOracleRow["PAYMENT_DETAILS1"].ToString();
                                                string Benef_Bank = UserDefRow["FIELD_VAL_4"].ToString();

                                                string Benef_Acc = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_1"].ToString());
                                                string Benef_Name = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_2"].ToString());
                                                string Benef_Ref = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_5"].ToString());
                                                string DebitAcc_C = DailyOracleRow["AC_NO"].ToString();
                                                string DebitInfo1 = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Addr1);
                                                string DebitInfo2 = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Addr2);

                                                // Now save the record
                                                m_hashtable = new Hashtable();
                                                m_hashtable.Add("UserID_C", "AUTO");
                                                m_hashtable.Add("Trxn_Ref_C", Source_RefNew);
                                                m_hashtable.Add("ORF_Val_C", Source_Ref);
                                                m_hashtable.Add("UserName_C", "AUTO ACQUIRED");
                                                m_hashtable.Add("User_Branch_C", DailyOracleRow["AC_BRANCH"].ToString());
                                                m_hashtable.Add("Benef_Bank_C" , Benef_Bank);
                                                m_hashtable.Add("Amnt_N", Trn_Amnt);
                                                m_hashtable.Add("ValueDate_C", ValueDt);
                                                m_hashtable.Add("DebitName_C", Remmitter);
                                                m_hashtable.Add("DebitAcc_C", DebitAcc_C);
                                                m_hashtable.Add("DebitInfo1", DebitInfo1);
                                                m_hashtable.Add("DebitInfo2", DebitInfo2);
                                                //m_hashtable.Add("DebitInfo3" , DebitInfo3);
                                                //m_hashtable.Add("DebitInfo4" , DebitInfo4);
                                                m_hashtable.Add("DebitRef_C", Benef_Ref);
                                                m_hashtable.Add("BenefAcc_C", Benef_Acc);
                                                m_hashtable.Add("BenefName_C", Benef_Name);
                                                m_hashtable.Add("Fld_50_C", Remmitter);
                                                m_hashtable.Add("RTGS_Out_ImportDate_D", string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                                m_hashtable.Add("RTGS_Out_ImportTime_C", string.Format("{0:HH:mm:ss}", DateTime.Now));
                                                m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                                m_hashtable.Add("Approved_YN_B", "0");
                                                m_hashtable.Add("Posted_YN_B", "0");
                                                m_hashtable.Add("Info_Sent_YN_B", "0");
                                                m_hashtable.Add("TrnSource", "ZIPPI");
                                                m_hashtable.Add("RTGS_Out_FileName_C", "ZIPPI");

                                                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"], "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                                //Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS.", DateTime.Now.ToString(), Source_Ref);
                                            }
                                        }

                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1 WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                    else
                                    {
                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1, Reason_Invalid_C = 'REPLAYED ALREADY' WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                }
                            }
                        }
                    }
                }
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], ("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime")).Rows[0][0].ToString();
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_RTGS_Outwards_ZIPP_InternetBanking", Err_Date2));

                return "2";
            }
            finally
            {

            }
            return "Done";
        }


        //public string fnGetTextfromPdf( string SourcePDFFile, string TargetTxtFile)
        //{
        //    string FacilitStartDate = "";
        //    string CustomerName     = "";
        //    PdfDocument PDF     = new PdfDocument(SourcePDFFile);
        //    // Get all text to put in a search index
        //    string      AllText = PDF.GetTextWithFormatting();

        //    FacilitStartDate = Utilities.Get_TagValueWithEnd(AllText, "Sanctioned until", "on account of", true);
        //    CustomerName     = Utilities.Get_TagValueWithEnd(AllText, "on account of", "Application for facilities", true);
        //    File.WriteAllText(TargetTxtFile, AllText);

        //    //Console.WriteLine(AllText);
        //    return "done";
        //}

        public string ReverseZeePayOutgoing()
        {
            string trxnProduct_ID = "ReverseZeePayOutgoing";
            string Curr_Rec_ID    = "0";
            string SQL_Str        = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
            if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
            {
                DataTable   DigitalIDSynchTbl   = new DataTable();
                DataTable   UserAccountTable    = new DataTable();
                DataTable   UserAccountTableNew = new DataTable();
                DataTable   XML_Tbl             = new DataTable();
                License_Obj Licence_Obj_TZ      = new License_Obj();
                Licence_Obj_TZ.IntialiseResults();
                string      InstNo_Main         =  "";
  
                try
                {
                    LogStep(trxnProduct_ID, string.Format("{0} Main Entry", trxnProduct_ID));

                    string Instance_Name                = "";
                    string Curr_License                 = null;
                    string Svr_Lic_Date                 = null;
                    string FinWebUserID                 = "";
                    string FinWebUserPassword           = "";
                    string TrnDateTime                  = "";
                    string CurrDate                     = "";
                    string Rev_TrnRemarks               = "";
                    string Rev_Retry_No                 = "";
                    string Rev_ReqInst                  = "0";
                    string SQLStr                       = "";
                    string RevBatchID                   = "";
                    string ZEEPAY_REVERSAL_BATCH_size   = "";
                    string ZEEPAY_LICENSE_KEY           = "";
                    string ZEEPAY_FREE_BALANCE_ACCOUNT  = "";
                    string Parm_CrAcctNo                = "";
                    string Parm_CrValueDate             = "";
                    string Parm_CrBICCode               = "SBICZWHx";
                    string Parm_DrBICCode               = Parm_CrBICCode;
                    string Parm_TranAmount              = "0.00";
                    bool   Parm_ReversalFlag            = false;
                    string Parm_DrAcctName              = "ZEEPAY SUSPENSE";
                    string Parm_DrAcctAddress1          = "STANBIC RECON";
                    string Parm_TranParticularsCodeDr   = "TRF";
                    string Parm_TranParticularsCodeCr   = Parm_TranParticularsCodeDr;
                    string Parm_TranCrncy               = "";
                    string Param_channelId              = "EVF";
                    string Param_RequestUUID            = "";
                    string Parm_ChannelRefNum           = "";
                    string Parm_OriginalChannelRefNum   = "";
                    string DrTranParticulars            = "";
                    string DrTranRemarks1               = "";
                    string CrTranParticulars            = "";
                    string CrTranRemarks1               = "";
                    string MsgID                        = "";
                    string SFI_File_C                   = "";
                    string XML_File_C                   = "";
                    string RequestXML                   = "";
                    string ResponseXML                  = "";
                    string XML_Type_C                   = "";
                    bool   WasSuccessful                = false;
                    string endToEndID                   = "";

                    int    Processing_Retry_Max         = 0;
                    int    Processing_Retry_Interval    = 0;

                    bool   CreateTestXML                = false;
                    bool   Econet_Integrated            = false;
                    bool   Fin_PseudoResponse_Use       = false;
                    bool   Finacle_Live                 = false;
                    string[] TagSeparator               = { "/" };
                    TagSeparator.SetValue("/", 0);
                    int Array_Len                       = 0; 

                    DataTable     Curr_Rec              = new DataTable();
                    DataTable     SysRec                = new DataTable();
                    DataTable     XMLTbl                = new DataTable();

                    DateTime      CurrTime;
                    XMLObject_cls Rev_ReqXMLObj         = new XMLObject_cls();

                    e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient Fin_Bridge   = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
                    e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail  Fin_Response = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();

                    string ForcedTiming = string.Format("EXEC [dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime, CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,108) AS CurrDate, NEWID() AS RevBatchID  FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                RevBatchID                = Sys_Row["RevBatchID"].ToString().Trim();
                                Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                Econet_Integrated         = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                CreateTestXML             = Convert.ToBoolean(Sys_Row["Create_TestXML_YN_B"].ToString());
                                Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                TrnDateTime               = Sys_Row["TrnDateTime"].ToString();
                                CurrDate                  = Sys_Row["CurrDate"].ToString();
                                FinWebUserID              = Sys_Row["FinWebUserID"].ToString();
                                Finacle_Live              = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                FinWebUserPassword        = Sys_Row["FinWebUserPassword"].ToString();
                                Fin_PseudoResponse_Use    = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"].ToString());
                                Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"].ToString());
                            }
                        }  

                        SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('ZEEPAY_REVERSAL_BATCH_size','ZEEPAY_LICENSE_KEY','ZEEPAY_FREE_BALANCE_ACCOUNT') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            //if (param_Row["Parameter_ID"].ToString().ToUpper() == "KEEP_STP_TEMP_BATCHES".ToUpper()) KEEP_STP_TEMP_BATCHES = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAY_REVERSAL_BATCH_size".ToUpper())  ZEEPAY_REVERSAL_BATCH_size  = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAY_LICENSE_KEY".ToUpper())          ZEEPAY_LICENSE_KEY          = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAY_FREE_BALANCE_ACCOUNT".ToUpper()) ZEEPAY_FREE_BALANCE_ACCOUNT = param_Row["Parameter_Value"].ToString().Trim();
                        }

                        Licence_Obj_TZ = fn_Check_License(72, "SBICZPY", ZEEPAY_LICENSE_KEY, CurrDate);
                        if (Licence_Obj_TZ.Response_Code == 0)
                        {
                            SQLStr   = string.Format("Update tbl_NBOL_TPP SET Processing_ID_Rev = '{0}', Posting_NodeID = '{2}', Processing_Time_Rev = CURRENT_TIMESTAMP, Rev_Retry_No = COALESCE(Rev_Retry_No,0) + 1 Where NBOL_TPP_Inst_No in (SELECT TOP {1} NBOL_TPP_Inst_No FROM [vw_ZeePay_Outgoing_ReversalRecords] Order by Rev_Retry_No ASC)", RevBatchID, ZEEPAY_REVERSAL_BATCH_size, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID);
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SQLStr);

                            Curr_Rec = new DataTable();
                            SQLStr   = string.Format("SELECT * FROM [vw_ZeePay_Outgoing_ReversalRecords_Marked] WHERE Processing_ID_Rev = '{0}'", RevBatchID);
                            //SQLStr = string.Format("SELECT * FROM [tbl_tmp_ZeepayOut_20220421]", RevBatchID);
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SQLStr);
                            if  (Curr_Rec.Rows.Count > 0)
                            {
                                foreach (DataRow revRow in Curr_Rec.Rows)
                                {
                                    //FinWebUserID       = revRow["UsrID"].ToString().Trim();
                                    //FinWebUserPassword = revRow["Usr_Pass"].ToString().Trim();
                                    CurrTime       = DateTime.Now;
                                    InstNo_Main    = revRow["NBOL_TPP_Inst_No"].ToString().Trim();
                                    Rev_ReqInst    = revRow["NBOL_TPP_Inst_No"].ToString().Trim();
                                    Rev_TrnRemarks = revRow["respMsg"].ToString().Trim(); 
                                    Rev_Retry_No   = revRow["Rev_Retry_No"].ToString().Trim();
                                    MsgID          = revRow["MsgId"].ToString().Trim();
                                    Parm_OriginalChannelRefNum = MsgID;
                                    endToEndID     = revRow["endToEndID"].ToString().Trim();

                                    Tag_Separator.SetValue("/", 0);
                                    string[]   Param_RequestUUID_Parms  = MsgID.Split(Tag_Separator, StringSplitOptions.None);
                                    Array_Len                           = Param_RequestUUID_Parms.Length;

                                    if (Array_Len > 1)
                                    {
                                       Param_RequestUUID   = string.Format("V{0}{1}", Param_RequestUUID_Parms[0], Param_RequestUUID_Parms[2]);
                                       Parm_ChannelRefNum  = string.Format("{0}OUTGRV{1}", Param_RequestUUID_Parms[0], Param_RequestUUID_Parms[2]);
                                    }

                                    Parm_CrAcctNo       = revRow["Acct_Num_DR_C"].ToString().Trim();
                                    Parm_CrValueDate    = string.Format("{0:yyyy-MM-dd}", revRow["Posting_Date"]);
                                    Parm_TranAmount     = string.Format("{0:0.00}" , revRow["Trn_Amnt_N"]);
                                    DrTranParticulars   =  string.Format("REV {0:0.00}", revRow["BatchTotal"]);
                                    DrTranParticulars   = Regex.Replace(DrTranParticulars, @"\s+", " ");   // Remove Multiple Spaces
                                    DrTranRemarks1      = revRow["Act_Pst_Code_C"].ToString().Trim();
                                    CrTranParticulars   = string.Format("REV - {0}", revRow["Act_Adrr_C"].ToString().Trim());
                                    CrTranParticulars   = Regex.Replace(CrTranParticulars, @"\s+", " ");   // Remove Multiple Spaces
                                    //CrTranRemarks1      = string.Format("{0} ({1})",revRow["LKUp_Rejct_Desc"].ToString().Trim(), revRow["LKUp_Rejct_Code"].ToString().Trim());
                                    CrTranRemarks1      = revRow["LKUp_Rejct_Desc"].ToString().Trim();
                                    Parm_TranCrncy      = revRow["CurrCode"].ToString().Trim();

                                    SFI_File_C          = revRow["SFI_File_C"].ToString().Trim();
                                    XML_File_C          = revRow["XML_File_C"].ToString().Trim();

                                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID == "STB")
                                    {
                                        if (SFI_File_C != "")
                                        {
                                            FinWebUserID       = "ZeePayUser";
                                            FinWebUserPassword = "ZeeP@33w0rd";

                                            //SQLStr = string.Format("EXEC [dbo].[ustp_getZeepayXML_Log]  @Param1_RequestUUID = '{0}'", "V202111030000004");
                                            SQLStr = string.Format("EXEC [dbo].[ustp_getZeepayXML_Log]  @Param1_RequestUUID = '{0}'", XML_File_C);
                                            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                                            if (SysRec.Rows.Count > 0)
                                            {
                                                foreach (DataRow Sys_Row in SysRec.Rows)
                                                {
                                                    XML_Type_C         = Sys_Row["XML_Type_C"].ToString().Trim();
                                                    Param_RequestUUID  = Sys_Row["XML_Ref_C"].ToString().Trim();
                                                    Parm_ChannelRefNum = Sys_Row["ChannelRefNum_C"].ToString().Trim();

                                                    if (XML_Type_C == "Request")
                                                    { 
                                                        RequestXML = Sys_Row["XML_String_C"].ToString().Trim();
                                                    }
                                                    if (XML_Type_C == "Response")
                                                    {
                                                        ResponseXML  = Sys_Row["XML_String_C"].ToString().Trim();
                                                        Fin_Response = fn_Get_FinacleResponse_Detail(ResponseXML, Param_RequestUUID);
                                                        if (Fin_Response.SuccessOrFailure == "Y")
                                                        {
                                                            WasSuccessful = true;
                                                            break;
                                                        }
                                                    }
                                                }
                                            }
                                            if (!WasSuccessful)
                                            {
                                                if (RequestXML != "")
                                                {
                                                    Fin_Response = Fin_Bridge.ReverseZeePayTransaction_local(FinWebUserID, FinWebUserPassword, "ZEEPAY_OUTGOING_REV", Param_RequestUUID, Parm_ChannelRefNum, RequestXML);
                                                    SQLStr       = string.Format("Update tbl_NBOL_TPP SET Rev_Posted_B = {1} WHERE NBOL_TPP_Inst_No = '{0}'", InstNo_Main, (Fin_Response.SuccessOrFailure == "Y") ? "1" : "0");
                                                }
                                                else
                                                {
                                                    SQLStr       = string.Format("Update tbl_NBOL_TPP SET Rev_Retry_No = 6 WHERE NBOL_TPP_Inst_No = '{0}'", InstNo_Main);
                                                }
                                            }
                                            else
                                            {
                                                SQLStr           = string.Format("Update tbl_NBOL_TPP SET Rev_Posted_B = 1 WHERE NBOL_TPP_Inst_No = '{0}'", InstNo_Main);
                                            }
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"], SQLStr);
                                        }
                                        else
                                        {
                                            FinWebUserID       = "ZeePayUser";
                                            FinWebUserPassword = "ZeeP@33w0rd";
                                            Fin_Response       = Fin_Bridge.PostToFinacle_ZeePay(FinWebUserID, FinWebUserPassword, Param_channelId , Param_RequestUUID , Parm_ChannelRefNum , Parm_ReversalFlag , MsgID                      , Parm_TranAmount , Parm_TranCrncy , ZEEPAY_FREE_BALANCE_ACCOUNT, Parm_CrAcctNo , Parm_CrValueDate , Parm_DrBICCode , Parm_CrBICCode , Parm_DrAcctName , Parm_DrAcctAddress1 , ""                  , ""                  , DrTranParticulars      , MsgID               , endToEndID          , CrTranParticulars      , CrTranRemarks1      , endToEndID          , Parm_TranParticularsCodeDr , Parm_TranParticularsCodeCr , "ZEEPAY_OUTGOING_REV", ""                   , ""                  , ""                  , ""                  , ""          );
                                            //Fin_Response = Fin_Bridge.PostToFinacle_ZeePay(SR_UserID   , SR_Password       , Param1_channelId, Param1_RequestUUID, Parm1_ChannelRefNum, Parm1_ReversalFlag, Parm1_OriginalChannelRefNum, Parm1_TranAmount, Parm1_TranCrncy, Parm1_DrAcctNo             , Parm1_CrAcctNo, Parm1_CrValueDate, Parm1_DrBICCode, Parm1_CrBICCode, Parm1_DrAcctName, Parm1_DrAcctAddress1, Parm1_DrAcctAddress2, Parm1_DrAcctAddress3, Parm1_DrTranParticulars, Parm1_DrTranRemarks1, Parm1_DrTranRemarks2, Parm1_CrTranParticulars, Parm1_CrTranRemarks1, Parm1_CrTranRemarks2, Parm1_TranParticularsCodeDr, Parm1_TranParticularsCodeCr, Parm1_SourceChannel  , Parm1_DrForcePostFlag, Parm1_CrAcctAddress1, Parm1_CrAcctAddress2, Parm1_CrAcctAddress3, ExtraDetails);

                                            SQLStr             = string.Format("Update tbl_NBOL_TPP SET XML_File_C = '{0}', SFI_File_C = '{1}', Rev_Posted_B = {3} WHERE NBOL_TPP_Inst_No = '{2}'", Param_RequestUUID, Parm_ChannelRefNum, InstNo_Main, (Fin_Response.SuccessOrFailure == "Y") ? "1" : "0");
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"], SQLStr);
                                        }
                                    }
                                }
                            }
                        }
                       SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                       SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                       LogStep(trxnProduct_ID, string.Format("{0} Main Exit", trxnProduct_ID));
                    }
                }
                catch (Exception ReverseZeePayIncoming_ex)
                {
                    LogStep(trxnProduct_ID, string.Format("{0} Exception Main Exit", trxnProduct_ID));
                    string retErr = LogError(ReverseZeePayIncoming_ex.GetHashCode().ToString(), trxnProduct_ID, ReverseZeePayIncoming_ex, InstNo_Main);
                }
                finally
                {

                }
            }
            return "done";
        }

       
        public string SendCreditAlerts()
        {
            string trxnProduct_ID = "Credit_Alerts";
            string Curr_Rec_ID    = "0";
            string SQL_Str        = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
            if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
            {
                DataTable DigitalIDSynchTbl   = new DataTable();
                DataTable UserAccountTable    = new DataTable();
                DataTable UserAccountTableNew = new DataTable();
                DataTable XML_Tbl             = new DataTable();
                License_Obj Licence_Obj_TZ    = new License_Obj();
                Licence_Obj_TZ.IntialiseResults();

                string InstNo_Main =  "";
  
                try
                {
                    LogStep(trxnProduct_ID, string.Format("{0} Main Entry", trxnProduct_ID));
                    DataTable Curr_Rec   = new DataTable();
                    DataTable SysRec     = new DataTable();

                    string Instance_Name   = "";
                    string Curr_License    = null;
                    string Svr_Lic_Date    = null;

                    bool   Econet_Integrated   = false;

                    bool   Alert_Mail_Use_SSL                             = false;
                    bool   Alert_Mail_DISABLE_ServerCertificateValidation = true;
                    string Alert_Mail_UserID   = "";
                    string Alert_Mail_Password = "";
                    string Alert_Mail_Port     = "";
                    string Alert_Mail_Host     = "";
                    string Alert_Sender_Domain = "";
                    string Alert_Sender_Domain_User     = "";
                    string Alert_Mail_SSL_Certitificate = "";

                    string receiverName        = "";
                    string emailAddr           = "";
                    string alertRetryNo        = "0";
                    string alertType           = "";
                    string alertMsg            = "";
                    bool RecieverAddressOk    = false;
                    bool SenderAddressOk      = false;
                    int  Failed_At            = 1;
                    string InsTracker          = "";

                    string CurrDate                   = "";

                    string SQLStr                     = "";
                    string RevBatchID                 = "";
                    string Credit_Alert_BATCH_size    = "";

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime, CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,108) AS CurrDate, NEWID() AS RevBatchID FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                RevBatchID                = Sys_Row["RevBatchID"].ToString().Trim();
                                Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                Econet_Integrated         = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                CurrDate                  = Sys_Row["CurrDate"].ToString();
                            }
                        }

                        SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('Credit_Alert_BATCH_size','Alert_Mail_UserID','Alert_Mail_Password','Alert_Mail_Port','Alert_Mail_Host','Alert_Sender_Domain','Alert_Sender_Domain_User','Alert_Mail_Use_SSL','Alert_Mail_SSL_Certitificate','Alert_Mail_DISABLE_ServerCertificateValidation') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_Use_SSL".ToUpper())                             Alert_Mail_Use_SSL                             = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_DISABLE_ServerCertificateValidation".ToUpper()) Alert_Mail_DISABLE_ServerCertificateValidation = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                            
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Credit_Alert_BATCH_size".ToUpper())      Credit_Alert_BATCH_size      = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_UserID".ToUpper())            Alert_Mail_UserID            = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_Password".ToUpper())          Alert_Mail_Password          = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_Port".ToUpper())              Alert_Mail_Port              = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_Host".ToUpper())              Alert_Mail_Host              = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Sender_Domain".ToUpper())          Alert_Sender_Domain          = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Sender_Domain_User".ToUpper())     Alert_Sender_Domain_User     = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "Alert_Mail_SSL_Certitificate".ToUpper()) Alert_Mail_SSL_Certitificate = param_Row["Parameter_Value"].ToString().Trim();
                        }

                        //Licence_Obj_TZ = fn_Check_License(72, "SBICZPY", ZEEPAY_LICENSE_KEY, CurrDate);
                        //if (Licence_Obj_TZ.Response_Code != 0)
                        {
                            SQLStr = string.Format("Update [tbl_CreditRegistryAlerts] set Processing_ID = '{0}', Processing_Time = CURRENT_TIMESTAMP, alertRetryNo = alertRetryNo+1 Where [id] in (SELECT TOP {1} [id] FROM [vw_CreditRegistryAlerts] Order by alertRetryNo ASC)", RevBatchID, Credit_Alert_BATCH_size);
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                            Curr_Rec = new DataTable();
                            SQLStr   =  string.Format("SELECT * FROM [tbl_CreditRegistryAlerts] Where Processing_ID = '{0}'", RevBatchID);
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                            if  (Curr_Rec.Rows.Count > 0)
                            {
                                foreach (DataRow revRow in Curr_Rec.Rows)
                                {
                                   
                                    InstNo_Main    = revRow["Id"].ToString().Trim();
                                    InsTracker     = revRow["InsTracker"].ToString().Trim();
                                    receiverName   = revRow["receiverName"].ToString().Trim();
                                    emailAddr      = revRow["emailAddr"].ToString().Trim();
                                    alertRetryNo   = revRow["alertRetryNo"].ToString().Trim();
                                    alertType      = revRow["alertType"].ToString().Trim();
                                    alertMsg       = revRow["conditions"].ToString().Trim();

                                    alertMsg       = alertMsg.Replace("#R#", Environment.NewLine);

                                    MailMessage msg = new MailMessage();

                                    try
                                    {
                                        Failed_At         = 1;
                                        msg.To.Add(new MailAddress(emailAddr, receiverName));
                                        RecieverAddressOk = true;

                                        Failed_At         = 2;
                                        msg.From          = new MailAddress(Alert_Mail_UserID, InsTracker);
                                        SenderAddressOk   = true;

                                        Failed_At         = 3;
                                    }
                                    catch
                                    {
                                        SQLStr = string.Format("Update [tbl_CreditRegistryAlerts] set alertRetryNo = 7, alertResponse = 'Invalid {1} mail address'  Where [Id] = '{0}'", InstNo_Main, (Failed_At == 1)? "Reciever" : "Sender");
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                                    }

                                    if (SenderAddressOk && RecieverAddressOk)
                                    { 
                                        msg.Subject     = string.Format("Credit Alert.  Reference : ({0})", alertType) ;
                                        msg.Body        = alertMsg;
                                        msg.IsBodyHtml  = true;
                                       
                                        SmtpClient client = new SmtpClient();
                                        client.UseDefaultCredentials = false;
                                     
                                        //client.ClientCertificates.ADD

                                        client.Credentials           = new System.Net.NetworkCredential(string.Format("{0}{1}", Alert_Sender_Domain, Alert_Sender_Domain_User), Alert_Mail_Password);

                                        if (Alert_Mail_DISABLE_ServerCertificateValidation)
                                        {
                                            System.Net.ServicePointManager.ServerCertificateValidationCallback = ((sender, certificate, chain, sslPolicyErrors) => true);
                                        }

                                        client.Port                  =  Convert.ToInt16(Alert_Mail_Port); // You can use Port 25 if 587 is blocked (mine is!)
                                        client.Host                  = Alert_Mail_Host;
                                        client.DeliveryMethod        = SmtpDeliveryMethod.Network;

                                        if (Alert_Mail_Use_SSL)
                                        {
                                            client.EnableSsl = true;
                                        }

                                        try
                                        {
                                            client.Send(msg);
                                            SQLStr = string.Format("Update [tbl_CreditRegistryAlerts] set alertSent = 1 Where [Id] = '{0}'", InstNo_Main);
                                        }
                                        catch (Exception exSenMailMain)
                                        {
                                            string error_Desc_text = System.Text.RegularExpressions.Regex.Replace(exSenMailMain.Message, @"\s{2,}", " ").Replace(@"\n", "");
                                            error_Desc_text = System.Text.RegularExpressions.Regex.Replace(error_Desc_text, @"\s{2,}", " ").Replace(@"\n", "");
                                            error_Desc_text = error_Desc_text.Replace("!", " ").Replace("&", " And ").Replace("<", "").Replace(">", "").Replace("'", "").Replace(",", " ");
                                            SQLStr = string.Format("Update [tbl_CreditRegistryAlerts] set alertRetryNo = COALESCE(alertRetryNo,0) + 1, alertResponse = '{1}' Where [Id] = '{0}'", InstNo_Main, error_Desc_text);
                                        }
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                                    }
                                }
                            }
                        }
                       SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                       SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                       LogStep(trxnProduct_ID, "Credit_Alerts  Main Exit");
                    }
                }
                catch (Exception Credit_Alerts_ex)
                {
                    string retErr = LogError(Credit_Alerts_ex.GetHashCode().ToString(), trxnProduct_ID, Credit_Alerts_ex, InstNo_Main);
                }
                finally
                {

                }
            }
            return "done";
        }


        public e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail fn_Get_FinacleResponse_Detail(string InXMLStr, string Param_RequestUUID)
        {
            e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail locaDetail = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();
            //locaDetail.Initialise_Details();
            try
            {
                locaDetail.HostTransaction_Status  = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS7:Status>"           , "</NS7:Status>"           , true,1);
                locaDetail.Off_UsRefNum            = Utilities.Get_TagValueWithEnd(InXMLStr, "<OffUsRefNum>"          , "</OffUsRefNum>"          , true,1);
                locaDetail.Parm_ChannelRefNum_Resp = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS10:ChannelRefNum>"   , "</NS10:ChannelRefNum>"   , true,1);
                locaDetail.Resp_Code               = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS10:RespCode>"        , "</NS10:RespCode>"        , true,1);
                locaDetail.Resp_Remarks            = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS10:RespRemarks>"     , "</NS10:RespRemarks>"     , true,1);
                locaDetail.SuccessOrFailure        = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS10:SuccessOrFailure>", "</NS10:SuccessOrFailure>", true,1);
                locaDetail.Error_Code              = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS10:ErrorCode>"       , "</NS10:ErrorCode>"       , true,1);
                locaDetail.Error_Description       = Utilities.Get_TagValueWithEnd(InXMLStr, "<NS10:ErrorDesc>"       , "</NS10:ErrorDesc>"       , true,1);
                return locaDetail; 
            }
            catch (Exception Posting_ex)
            {
                string retErr = LogError(Posting_ex.GetHashCode().ToString(), "GetBakingResponseDet", Posting_ex, Param_RequestUUID);
                // Fin_Response_1.Header.ResponseHeader.HostTransaction.Status = "FAILURE";
                //Fin_Response_1.Body.executeFinacleScriptResponse.executeFinacleScript_CustomData.Tran_RES.RespRemarks = Posting_ex.StackTrace.ToString();
                locaDetail.HostTransaction_Status = "FAILURE";
                locaDetail.Resp_Remarks           = string.Format("{0} - {1}", Posting_ex.Message, Posting_ex.StackTrace.ToString());
                return locaDetail;
            }
        }

        public string ReverseZeePayIncoming()
        {
            string trxnProduct_ID = "ReverseZeePayIncoming";
            string Curr_Rec_ID    = "0";
            string SQL_Str        = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
            if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
            {
                DataTable DigitalIDSynchTbl   = new DataTable();
                DataTable UserAccountTable    = new DataTable();
                DataTable UserAccountTableNew = new DataTable();
                DataTable XML_Tbl             = new DataTable();
                License_Obj Licence_Obj_TZ    = new License_Obj();
                Licence_Obj_TZ.IntialiseResults();

                string InstNo_Main =  "";
  
                try
                {
                    LogStep(trxnProduct_ID, string.Format("{0} Main Entry", trxnProduct_ID));
                    DataTable Curr_Rec   = new DataTable();
                    DataTable SysRec     = new DataTable();

                    string Instance_Name   = "";
                    bool   CreateTestXML   = false;
                    string Curr_License    = null;
                    string Svr_Lic_Date    = null;

                    bool   Econet_Integrated          = false;
                    string FinWebUserID               = "";
                    string FinWebUserPassword         = "";
                    bool   Fin_PseudoResponse_Use     = false;
                    bool   Finacle_Live               = false;

                    string TrnDateTime                = "";
                    string CurrDate                   = "";
                    int    Processing_Retry_Max       = 0;
                    int    Processing_Retry_Interval  = 0;
                    string Rev_TrnRemarks             = "";
                    string Rev_Retry_No               = "";
                    string Parm1_DrAcctNo             = "";

                    string Rev_ReqInst                = "0";
                    string SQLStr                     = "";
                    string ChannelRef_Num             = "";
                    string RevBatchID                 = "";
                    string ZEEPAY_REVERSAL_BATCH_size = "";
                    string ZEEPAY_LICENSE_KEY         = "";
                    XMLObject_cls Rev_ReqXMLObj       = new XMLObject_cls();
                    string        Rev_ReqXMLStr       = "";
                    e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient Fin_Bridge   = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_BridgeSoapClient();
                    e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail  Fin_Response = new e_Verify_BACK_OFFICE_Service_Interface.Finacle_Bridge.Finacle_Response_Detail();

                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        SQLStr = "SELECT *, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,21) AS Svr_Lic_Date, CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) as TrnDateTime, CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,25) + ' ' + CONVERT(VARCHAR(10), CURRENT_TIMESTAMP,108) AS CurrDate, NEWID() AS RevBatchID FROM tbl_SysParam WITH (NOLOCK) WHERE ParamID = 'CTL'";
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        if (SysRec.Rows.Count > 0)
                        {
                            foreach (DataRow Sys_Row in SysRec.Rows)
                            {
                                RevBatchID                = Sys_Row["RevBatchID"].ToString().Trim();
                                Instance_Name             = Sys_Row["Instance_Name_C"].ToString().Trim();
                                Econet_Integrated         = Convert.ToBoolean(Sys_Row["EcoCash_Interface_YN_B"].ToString());
                                CreateTestXML             = Convert.ToBoolean(Sys_Row["Create_TestXML_YN_B"].ToString());
                                Curr_License              = Sys_Row["License_Code_C"].ToString().Trim();
                                Svr_Lic_Date              = Sys_Row["Svr_Lic_Date"].ToString().Trim();
                                TrnDateTime               = Sys_Row["TrnDateTime"].ToString();
                                CurrDate                  = Sys_Row["CurrDate"].ToString();
                                FinWebUserID              = Sys_Row["FinWebUserID"].ToString();
                                Finacle_Live              = Convert.ToBoolean(Sys_Row["Finacle_Live"].ToString());
                                FinWebUserPassword        = Sys_Row["FinWebUserPassword"].ToString();
                                Fin_PseudoResponse_Use    = Convert.ToBoolean(Sys_Row["UseFinaclePseudoResponse_B"].ToString());
                                Processing_Retry_Max      = Convert.ToInt32(Sys_Row["Processing_Retry_Max"].ToString());
                                Processing_Retry_Interval = Convert.ToInt32(Sys_Row["Processing_Retry_Interval"].ToString());
                            }
                        }  

                        SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('ZEEPAY_REVERSAL_BATCH_size','ZEEPAY_LICENSE_KEY') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            //if (param_Row["Parameter_ID"].ToString().ToUpper() == "KEEP_STP_TEMP_BATCHES".ToUpper()) KEEP_STP_TEMP_BATCHES = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAY_REVERSAL_BATCH_size".ToUpper()) ZEEPAY_REVERSAL_BATCH_size = param_Row["Parameter_Value"].ToString().Trim();
                            if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAY_LICENSE_KEY".ToUpper())         ZEEPAY_LICENSE_KEY         = param_Row["Parameter_Value"].ToString().Trim();
                        }

                        Licence_Obj_TZ = fn_Check_License(72, "SBICZPY", ZEEPAY_LICENSE_KEY, CurrDate);
                        if (Licence_Obj_TZ.Response_Code != 0)
                        {
                            SQLStr = string.Format("Update tbl_ZeePayIncoming set Processing_ID = '{0}', Processing_Time = CURRENT_TIMESTAMP, Rev_Retry_No = Rev_Retry_No+1 Where Param_InstNo in (SELECT TOP {1} Param_InstNo FROM vw_ZeePayReversalRecords Order by Rev_Retry_No ASC)", RevBatchID, ZEEPAY_REVERSAL_BATCH_size);
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                            Curr_Rec = new DataTable();
                            SQLStr   =  string.Format("SELECT * FROM vw_ZeePayReversalRecords_Marked Where Processing_ID = '{0}'", RevBatchID);
                            Curr_Rec = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);
                            if  (Curr_Rec.Rows.Count > 0)
                            {
                                foreach (DataRow revRow in Curr_Rec.Rows)
                                {
                                    //FinWebUserID       = revRow["UsrID"].ToString().Trim();
                                    //FinWebUserPassword = revRow["Usr_Pass"].ToString().Trim();

                                    InstNo_Main    = revRow["Param_InstNo"].ToString().Trim();
                                    Rev_ReqInst    = revRow["Rev_ReqInst"].ToString().Trim();
                                    Rev_TrnRemarks = revRow["Rev_TrnRemarks"].ToString().Trim(); 
                                    Rev_Retry_No   = revRow["Rev_Retry_No"].ToString().Trim();
                                    ChannelRef_Num = revRow["Parm1_ChannelRefNum"].ToString().Trim();
                                    Rev_ReqXMLStr  =  revRow["XML_String_C_Request"].ToString().Trim();
                                    Parm1_DrAcctNo = revRow["Parm1_DrAcctNo"].ToString().Trim();

                                    Rev_ReqXMLObj  = fn_CreateZeePayInwardRevXML(Rev_ReqXMLStr, InstNo_Main, Rev_TrnRemarks, Rev_Retry_No, ChannelRef_Num, Parm1_DrAcctNo);

                                    Fin_Response   =  Fin_Bridge.ReverseZeePayTransaction_local("ZeePayUser", "ZeeP@33w0rd", "ZEEPAY" ,Rev_ReqXMLObj.XML_ChannelRef, Rev_ReqXMLObj.XML_Ref, Rev_ReqXMLObj.XML_Str);
                                    if (Fin_Response.SuccessOrFailure == "Y")
                                    {
                                       SQLStr = string.Format("Update tbl_ZeePayIncoming_RevRequest set Rev_Posted = 1 Where Rev_ReqInst = '{0}'", Rev_ReqInst);
                                       SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                                    }
                                    //else
                                    //{
                                    //   SQLStr = string.Format("UPDATE Payment_Instruction SET Fin_Retry_No = Fin_Retry_No + 1, Fin_Response_Det_C = '{1} #R# {2}' WHERE Inst_No_N = '{0}'", Curr_Rec_ID, EcoResp.responseMsg, "");
                                    //}
                                    //SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                                }
                            }
                        }
                       SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                       SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                       LogStep(trxnProduct_ID, string.Format("{0} Main Exit", trxnProduct_ID));
                    }
                }
                catch (Exception ReverseZeePayIncoming_ex)
                {
                    string retErr = LogError(ReverseZeePayIncoming_ex.GetHashCode().ToString(), trxnProduct_ID, ReverseZeePayIncoming_ex, InstNo_Main);
                }
                finally
                {

                }
            }
            return "done";
        }

        private void Post_Zeepay_OutGoing_Transactions()
        {
            //SR_Class.fn_Save_UserLogging_Detail("Post_Zeepay_Transactions", "0", "13574", "No Session");
            string    sqlStr   = "";
            DataTable NBOL_TPP = new DataTable();
            DataTable SysRec   = new DataTable();
            DateTime Curr_Time = DateTime.Now;
            DateTime StartTime = DateTime.Now;
            DateTime EndTime   = DateTime.Now.AddDays(-1);
            Hashtable m_hashtable      = new Hashtable();
            Hashtable m_whereHashTable = new Hashtable();

            string    Error_Time = "";
            Hashtable tmpHash    = new Hashtable();
            Error_Time           = string.Format("{0:yyyy-MM-dd} {1}", DateTime.Today.Date, DateTime.Now.ToString("HH:mm:ss"));
            tmpHash.Add("STEP_DESCR"  , "Rabbit Send");
            tmpHash.Add("LOGGER_DESCR", "Rabbit Send");
            tmpHash.Add("DATE_LOGGED" , Error_Time);
            SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "Service_Logger", tmpHash);
            string Msg_ID = "";
            DateTime CreDtTm;
            string NbOfTxs = "";
            string CtrlSum = "";
            string CtrlSumHeader = "";
            decimal CtrlSumHeader_ = 0;
            string Nm = "";
            string OrgId = "";
            string AnyBIC = "";
            string BICFI = "";
            string PmtInfId = "";
            string PmtMtd = "";
            string InstrPrty = "";
            string Dt = "";
            string PoolgAdjstmntDt = "";
            string Id = "";
            string Ccy = "";
            string ChrgBr = "";
            string InstrId = "";
            string InstdAmt = "";
            string EndToEndId = "";
            string InstrForDbtrAgt = "";
            string Prtry = "";
            string BANKB = "";
            string CdtrName = "";
            string CdtrId = "";
            string InstrForCdtrAgt = "";
            bool BtchBookg = false;
            string PmtInf_CtrlSum = "";
            string PmtTpInf_InstrPrty = "";
            string BICFI_BankB = "";
            string CdtrAcct_ID = "";
            string Cdtr_UltmtCdtr = "";
            string DbtrAcctID = "";
            string NBOL_TPP_Inst_No = "";
            string Batch_Num_C = "";
            string Act_Adrr_C = "";
            string RmtInf_Ustrd = "";
            string Act_Pst_Code_C = "";
            string BICFI_Name = "";
            string CdtrAgtBICFI = "";
            string CdtrAgtBICFINM = "";
            string DbtrAgtBICFI = "";
            string DbtrAgtBICFI_Name = "";
            decimal CtrlSum_ = 0;
            string trxnProduct_ID = "Post_Zeepay_OutGoing_Transactions";
            DataTable Sys_Tbl = new DataTable();
            string QueueName = "";
            string QueueUserName = "";
            string QueuePassword = "";
            string QueueHostName = "";
            string QueuePort = "0";
            string QueueBatchSize = "1";
            string Ustrd = "";
            string Processing_ID = "";
            string LocalhostQueue = "";
            string XML_Response = "";
            string ZEEPAYPath = "";
            string ZEEPAYXSD = "";
            bool Batch_ZeePay_Outgoing = false;
            string Trn_XML = "";
            zeepayPain                                              PainDoc                 = new zeepayPain();
            zeepayPain.Document                                     rootDoc                 = new zeepayPain.Document();
            zeepayPain.CustomerCreditTransferInitiationV08          crdtInt                 = new zeepayPain.CustomerCreditTransferInitiationV08();
            zeepayPain.GroupHeader48                                GrpHeader               = new zeepayPain.GroupHeader48();
            zeepayPain.PaymentInstruction22                         PmtInf                  = new zeepayPain.PaymentInstruction22();
            zeepayPain.PaymentInstruction22[]                       PmtInfBatch;//          = new zeepayPain.PaymentInstruction22();
            zeepayPain.PartyIdentification43                        InitgPty                = new zeepayPain.PartyIdentification43();
            zeepayPain.Party11Choice                                nmId                    = new zeepayPain.Party11Choice();
            zeepayPain.OrganisationIdentification8                  anyBICFieldtag          = new zeepayPain.OrganisationIdentification8();
            zeepayPain.BranchAndFinancialInstitutionIdentification5 FwdgAgttag              = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
            zeepayPain.FinancialInstitutionIdentification8          finInstnIdtag           = new zeepayPain.FinancialInstitutionIdentification8();
            zeepayPain.PaymentTypeInformation19                     PmtTpInftag             = new zeepayPain.PaymentTypeInformation19();
            zeepayPain.Priority2Code                                Priority2Code_enum      = new zeepayPain.Priority2Code();
            zeepayPain.PaymentMethod3Code                           PmtMtdtag               = new zeepayPain.PaymentMethod3Code();
            zeepayPain.DateAndDateTimeChoice                        dateAndDateTimeChoice   = new zeepayPain.DateAndDateTimeChoice();
            zeepayPain.TaxInformation4                              dbtrtag             = new zeepayPain.TaxInformation4();
            zeepayPain.CashAccount24                                DbtrAccttag         = new zeepayPain.CashAccount24();
            zeepayPain.BranchAndFinancialInstitutionIdentification5 DbtrAgttag          = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
            zeepayPain.CreditTransferTransaction26                  CdtTrfTxInftag      = new zeepayPain.CreditTransferTransaction26();
            zeepayPain.CreditTransferTransaction26                  Amnttag             = new zeepayPain.CreditTransferTransaction26();
            zeepayPain.AmountType4Choice                            amountType4Choice   = new zeepayPain.AmountType4Choice();
            zeepayPain.ExchangeRate1                                xchgRateInfField    = new zeepayPain.ExchangeRate1();
            zeepayPain.CashAccount24                                CdtrAgttag          = new zeepayPain.CashAccount24();
            zeepayPain.CashAccount24                                CdtrAgtttag         = new zeepayPain.CashAccount24();
            zeepayPain.BranchAndFinancialInstitutionIdentification5 CdtrAccttag         = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
            zeepayPain.PartyIdentification43                        UltmtCdtr_id_tag    = new zeepayPain.PartyIdentification43();
            zeepayPain.InstructionForCreditorAgent1                 InstrForCdtrAgttag  = new zeepayPain.InstructionForCreditorAgent1();
            zeepayPain.Purpose2Choice                               Purpose2Choice      = new zeepayPain.Purpose2Choice();
            zeepayPain.RemittanceInformation11                      RmtInftag           = new zeepayPain.RemittanceInformation11();
            zeepayPain.FinancialInstitutionIdentification8          FinInstnIdtag       = new zeepayPain.FinancialInstitutionIdentification8();
            zeepayPain.PaymentIdentification1                       PmtIdtag            = new zeepayPain.PaymentIdentification1();
            zeepayPain.BranchAndFinancialInstitutionIdentification5 CdtrAgttag_         = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
            zeepayPain.PartyIdentification43                        Cdtrtag             = new zeepayPain.PartyIdentification43();
            zeepayPain.AccountIdentification4Choice                 idtag               = new zeepayPain.AccountIdentification4Choice();
            zeepayPain.PartyIdentification43                        UltmtCdtrtag        = new zeepayPain.PartyIdentification43();
            zeepayPain.GenericAccountIdentification1                Othrtag             = new zeepayPain.GenericAccountIdentification1();
            zeepayPain.PartyIdentification43                        Dbtrtag             = new zeepayPain.PartyIdentification43();
            zeepayPain.AmountType4Choice                            Amttag              = new zeepayPain.AmountType4Choice();
            zeepayPain.Purpose2Choice                               purptag             = new zeepayPain.Purpose2Choice();

            //SR_Class.fn_Save_UserLogging_Detail("14309", "0", "14309", "No Session");
            try
            {
                //Check if this Node is allowed to Run 
                sqlStr  = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], sqlStr).Rows[0][0].ToString()) > 0)
                {
                    // SR_Class.fn_Save_UserLogging_Detail("Check Threading", "0", "14316", "No Session");
                    // Check Threading
                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    //SR_Class.fn_Save_UserLogging_Detail(ForcedTiming, "0", "14320", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    //SR_Class.fn_Save_UserLogging_Detail("Thread_Busy", "0", "14320", Thread_Busy);
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        sqlStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), sqlStr);
                        sqlStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('QueueName','LocalhostQueue','QueueUserName','ZEEPAYXSD','ZEEPAYPath','QueuePassword','QueueHostName','QueuePort','QueueBatchSize','Batch_ZeePay_Outgoing') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                        Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                        if (Sys_Tbl.Rows.Count > 0)
                        {
                            foreach (DataRow param_Row in Sys_Tbl.Rows)
                            {
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueName".ToUpper())                QueueName               = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueUserName".ToUpper())            QueueUserName           = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueuePassword".ToUpper())            QueuePassword           = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueHostName".ToUpper())            QueueHostName           = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueuePort".ToUpper())                QueuePort               = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAYPath".ToUpper())               ZEEPAYPath              = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueBatchSize".ToUpper())           QueueBatchSize          = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "LocalhostQueue".ToUpper())           LocalhostQueue          = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "ZEEPAYXSD".ToUpper())                ZEEPAYXSD               = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "Batch_ZeePay_Outgoing".ToUpper())    Batch_ZeePay_Outgoing   = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                            }
                        }
                        // Mark the Batch
                        // SR_Class.fn_Save_UserLogging_Detail("14343", "0", "14343", "Mark the Batch");
                        Processing_ID = System.Guid.NewGuid().ToString();
                        sqlStr        = string.Format("[dbo].[ustp_MarkZeePay_OurGoingBatch_Fix] @Processing_ID = '{0}'", Processing_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);

                        //SR_Class.fn_Save_UserLogging_Detail("14348", "0", "14348", "AFTER Mark the Batch");
                        sqlStr   = string.Format("SELECT *, (SELECT sum(Trn_Amnt_N) as CtrlSumHeader  FROM tbl_NBOL_TPP where Processing_ID = '{0}') CtrlSumHeader  FROM tbl_NBOL_TPP WHERE Processing_ID = '{0}'", Processing_ID);
                        //sqlStr = string.Format("SELECT * FROM tbl_NBOL_TPP WHERE TransactionStatus=0");
                        NBOL_TPP = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                        //SR_Class.fn_Save_UserLogging_Detail("14348", "0", "14348", Processing_ID);
                        int rowCount = 0;
                        rowCount = NBOL_TPP.Rows.Count;
                        //SR_Class.fn_Save_UserLogging_Detail("14405", "0", "14405", rowCount.ToString());
                        if (NBOL_TPP.Rows.Count > 0)
                        {
                            NbOfTxs = NBOL_TPP.Rows.Count.ToString();
                            //SR_Class.fn_Save_UserLogging_Detail("14409", "0", "creating factory", "14409");
                            var factory = new ConnectionFactory();
                            if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                            {
                                //SR_Class.fn_Save_UserLogging_Detail("14355", "0", LocalhostQueue, "14355");
                                factory = new ConnectionFactory { HostName = "localhost" };
                            }
                            else
                            {
                                //SR_Class.fn_Save_UserLogging_Detail("14418", "0", "remote qeue", "14418");
                                factory = new ConnectionFactory { UserName = QueueUserName, Password = QueuePassword, HostName = QueueHostName, Port = Convert.ToInt32(QueuePort) };
                            }
                            //SR_Class.fn_Save_UserLogging_Detail("14420", "0", "factory", "14420");
                            using (var connection = factory.CreateConnection())
                            {
                                using (var channel = connection.CreateModel())
                                {
                                    // Guaranteed delivery: durable: true
                                    //SR_Class.fn_Save_UserLogging_Detail("14426", "0", "factory", "14426");
                                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                                    {
                                        channel.QueueDeclare(queue: e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.LocalhostQueue, durable: true, exclusive: false, autoDelete: false, arguments: null);
                                    }
                                    else
                                    {
                                        channel.QueueDeclare(queue: QueueName, durable: true, exclusive: false, autoDelete: false, arguments: null);
                                    }

                                    var properties = channel.CreateBasicProperties();

                                    //Set the message to persist in the event of a broker shutdown
                                    var messageProperties = channel.CreateBasicProperties();
                                    messageProperties.SetPersistent(true);
                                    channel.ConfirmSelect();
                                    OrgId          = "BICCZWHX";
                                    AnyBIC         = "BICCZWHX";
                                    DbtrAgtBICFI   = "SBICZWH0";
                                    CtrlSumHeader_ = Convert.ToDecimal(NBOL_TPP.Rows[0]["CtrlSumHeader"]);
                                    CtrlSumHeader  = String.Format("{0:0.##}", CtrlSumHeader_);
                                    Act_Pst_Code_C = Utilities.RemoveSpecialCharacters(NBOL_TPP.Rows[0]["Act_Pst_Code_C"].ToString());
                                    Msg_ID         = getMsgID(NBOL_TPP_Inst_No, NBOL_TPP.Rows[0]["Value_Date_D"].ToString());
                                    DbtrAgtBICFI_Name = getBICFI_Name(DbtrAgtBICFI);
                                    if (Convert.ToString(NBOL_TPP.Rows[0]["File_Name_C"]).Contains("_ZWL_"))
                                    {
                                        Ccy = "ZWL";
                                    }
                                    else
                                    {
                                        Ccy = "USD";
                                    }

                                    //GrpHeader
                                    GrpHeader.MsgId = Msg_ID;
                                    GrpHeader.CreDtTm = Convert.ToDateTime(NBOL_TPP.Rows[0]["Import_Date_D"].ToString());
                                    GrpHeader.NbOfTxs = NbOfTxs;
                                    GrpHeader.CtrlSumSpecified = true;
                                    GrpHeader.CtrlSum = Convert.ToDecimal(CtrlSumHeader);
                                    anyBICFieldtag.AnyBIC = OrgId;
                                    finInstnIdtag.BICFI = DbtrAgtBICFI;
                                    finInstnIdtag.Nm = "STANBIC BANK ZIMBABWE LTD";
                                    FwdgAgttag.FinInstnId = finInstnIdtag;
                                    GrpHeader.InitgPty = InitgPty;
                                    GrpHeader.FwdgAgt = FwdgAgttag;
                                    //GrpHeader 
                                    //PmtInf
                                    PmtInf.PmtInfId = Msg_ID;
                                    PmtInf.PmtMtd = zeepayPain.PaymentMethod3Code.TRF;
                                    PmtInf.BtchBookgSpecified = true;
                                    if (Convert.ToInt32(NbOfTxs) > 1)
                                    {
                                        BtchBookg = true;
                                    }
                                    PmtInf.BtchBookg = BtchBookg;
                                    PmtInf.NbOfTxs = NbOfTxs;
                                    PmtInf.CtrlSumSpecified = true;
                                    PmtInf.CtrlSum = Convert.ToDecimal(CtrlSumHeader);
                                    Priority2Code_enum = zeepayPain.Priority2Code.NORM;
                                    PmtTpInftag.InstrPrtySpecified = true;
                                    PmtTpInftag.InstrPrty = Priority2Code_enum;
                                    PmtInf.PmtTpInf = PmtTpInftag;
                                    dateAndDateTimeChoice.Item = Convert.ToDateTime(NBOL_TPP.Rows[0]["Import_Date_D"].ToString());
                                    PmtInf.ReqdExctnDt = dateAndDateTimeChoice;
                                    PmtInf.PoolgAdjstmntDtSpecified = true;
                                    PmtInf.PoolgAdjstmntDt = Convert.ToDateTime(NBOL_TPP.Rows[0]["Import_Date_D"].ToString());
                                    PmtInf.Dbtr = Dbtrtag;
                                    PmtInf.DbtrAcct = DbtrAccttag;
                                    FinInstnIdtag.BICFI = DbtrAgtBICFI;
                                    FinInstnIdtag.Nm = "STANBIC BANK ZIMBABWE LTD";
                                    PmtInf.DbtrAgt = DbtrAgttag;
                                    PmtInf.ChrgBrSpecified = true;
                                    PmtInf.ChrgBr = zeepayPain.ChargeBearerType1Code.DEBT;

                                    crdtInt.GrpHdr = GrpHeader;
                                    crdtInt.PmtInf = new zeepayPain.PaymentInstruction22[1] { PmtInf };
                                    rootDoc.CstmrCdtTrfInitn = crdtInt;

                                    //Trn_XML = Utilities.SerializeToXML(rootDoc);
                                    Trn_XML = Utilities.SerializeToXML_No_xlmns(rootDoc);
                                    string Trn_XML_Dbtr_Insert = "";
                                    Trn_XML_Dbtr_Insert += string.Format("            <Dbtr>                                                  ");
                                    Trn_XML_Dbtr_Insert += string.Format("                <Nm>{0}</Nm>                                        ", "STANBIC BANK ZIMBABWE LTD");
                                    //Trn_XML_Dbtr_Insert += string.Format("                <Nm>{0}</Nm>                                        ", fn_RemoveInvalidXmlChars(Act_Pst_Code_C));
                                    Trn_XML_Dbtr_Insert += string.Format("                <Id>                                                ");
                                    Trn_XML_Dbtr_Insert += string.Format("                    <OrgId>                                         ");
                                    Trn_XML_Dbtr_Insert += string.Format("                        <AnyBIC>{0}</AnyBIC>                        ", AnyBIC);
                                    Trn_XML_Dbtr_Insert += string.Format("                    </OrgId>                                        ");
                                    Trn_XML_Dbtr_Insert += string.Format("                </Id>                                               ");
                                    Trn_XML_Dbtr_Insert += string.Format("            </Dbtr>                                                 ");
                                    if (Trn_XML.Contains("<Dbtr />"))
                                    {
                                        Trn_XML = Trn_XML.Replace("<Dbtr />", Trn_XML_Dbtr_Insert);
                                    }
                                    string Trn_XML_DbtrAcct_Insert = "";
                                    Trn_XML_DbtrAcct_Insert += string.Format("            <DbtrAcct>                                              ");
                                    Trn_XML_DbtrAcct_Insert += string.Format("                <Id>                                                ");
                                    Trn_XML_DbtrAcct_Insert += string.Format("                    <Othr>                                          ");
                                    Trn_XML_DbtrAcct_Insert += string.Format("                        <Id>{0}</Id>                                ", "8142819000000");
                                    Trn_XML_DbtrAcct_Insert += string.Format("                    </Othr>                                         ");
                                    Trn_XML_DbtrAcct_Insert += string.Format("                </Id>                                               ");
                                    Trn_XML_DbtrAcct_Insert += string.Format("                <Ccy>{0}</Ccy>                                      ", Ccy);
                                    Trn_XML_DbtrAcct_Insert += string.Format("                <Nm>{0}</Nm>                                        ", "STANBIC BANK ZIMBABWE LTD");
                                    //Trn_XML_DbtrAcct_Insert += string.Format("                <Nm>{0}</Nm>                                        ", fn_RemoveInvalidXmlChars(Act_Pst_Code_C));
                                    Trn_XML_DbtrAcct_Insert += string.Format("            </DbtrAcct>                                             ");
                                    if (Trn_XML.Contains("<DbtrAcct />"))
                                    {
                                        Trn_XML = Trn_XML.Replace("<DbtrAcct />", Trn_XML_DbtrAcct_Insert);
                                    }
                                    string Trn_XML_InitgPty_Insert = "";
                                    Trn_XML_InitgPty_Insert += string.Format("                <InitgPty>							              ");
                                    Trn_XML_InitgPty_Insert += string.Format("                 <Nm>{0}</Nm>                                       ", "STANBIC BANK ZIMBABWE LTD");
                                    Trn_XML_InitgPty_Insert += string.Format("                     <Id>							                  ");
                                    Trn_XML_InitgPty_Insert += string.Format("                 <OrgId>");
                                    Trn_XML_InitgPty_Insert += string.Format("                 <AnyBIC>{0}</AnyBIC>", OrgId);
                                    Trn_XML_InitgPty_Insert += string.Format("                 </OrgId>                                       ");
                                    Trn_XML_InitgPty_Insert += string.Format("                     </Id>							                  ");
                                    Trn_XML_InitgPty_Insert += string.Format("            </InitgPty>                                             ");
                                    if (Trn_XML.Contains("<InitgPty />"))
                                    {
                                        Trn_XML = Trn_XML.Replace("<InitgPty />", Trn_XML_InitgPty_Insert);
                                    }
                                    foreach (DataRow NbolRow in NBOL_TPP.Rows)
                                    {
                                        NbOfTxs = "1";
                                        NBOL_TPP_Inst_No = NbolRow["NBOL_TPP_Inst_No"].ToString();
                                        Msg_ID = getMsgID(NBOL_TPP_Inst_No, NbolRow["Value_Date_D"].ToString());
                                        CreDtTm = Convert.ToDateTime(NbolRow["Import_Date_D"].ToString());
                                        string dte = Convert.ToDateTime(NbolRow["Import_Date_D"]).ToString("yyyy-MM-ddTHH:mm:ss.fffffffK");
                                        string msgIDDate = CreDtTm.ToString("yyyyMMdd");
                                        Batch_Num_C = NbolRow["Batch_Num_C"].ToString();
                                        CtrlSum_ = Convert.ToDecimal(NbolRow["Trn_Amnt_N"]);
                                        CtrlSum = String.Format("{0:0.##}", CtrlSum_);
                                        Nm = NbolRow["Act_Name_C"].ToString();
                                        DbtrAcctID = NbolRow["Acct_Num_DR_C"].ToString();
                                        BICFI = NbolRow["Benef_SWIFT_Code_C"].ToString();
                                        BICFI_Name = getBICFI_Name(BICFI);
                                        PmtInfId = Msg_ID;
                                        PmtMtd = "TRF";
                                        BtchBookg = false;
                                        PmtInf_CtrlSum = String.Format("{0:0.00}", NbolRow["Trn_Amnt_N"].ToString());
                                        InstrPrty = "HIGH";
                                        Dt = DateTime.Now.ToString("yyyy-MM-dd");
                                        Dt = Dt + "+02:00";
                                        PoolgAdjstmntDt = Dt;
                                        Id = NbolRow["Acct_Num_DR_C"].ToString();
                                        ChrgBr = "DEBT";
                                        InstrId = Msg_ID;
                                        EndToEndId = Msg_ID;
                                        PmtTpInf_InstrPrty = "NORM";
                                        InstdAmt = CtrlSum;
                                        BICFI_BankB = NbolRow["Benef_Bank_C"].ToString();
                                        CdtrName = NbolRow["Act_Name_DR_C"].ToString(); ;
                                        CdtrAcct_ID = "1324234314";
                                        InstrForDbtrAgt = "PBEN";
                                        InstrForCdtrAgt = "HOLD";
                                        Prtry = "21";
                                        BANKB = NbolRow["Benef_Bank_C"].ToString();
                                        CdtrId = NbolRow["Acct_Num_C"].ToString();
                                        Act_Adrr_C = NbolRow["Act_Adrr_C"].ToString();
                                        RmtInf_Ustrd = NbolRow["Trn_Desc_C"].ToString();
                                        Ustrd = NbolRow["Act_Pst_Code_C"].ToString();
                                        Ustrd = fn_RemoveInvalidXmlChars(Ustrd);
                                        //now update record to posted
                                        //get banckcode from  batchnumber
                                        CdtrAgtBICFI = getBICFI_ByCode(Batch_Num_C.Substring(0, 5));
                                        CdtrAgtBICFINM = getBICFI_Name_ByCode(Batch_Num_C.Substring(0, 5));
                                        //SR_Class.fn_Save_UserLogging_Detail("before XML_Response", "0", "14208", "No Session");

                                        try
                                        {

                                            //SR_Class.fn_Save_UserLogging_Detail("14478", "0", "14478", "before validating");
                                            try
                                            {
                                                XML_Response += fn_Create_Zeepay_Payment_Request_Batch(Msg_ID, dte, NbOfTxs, CtrlSum, Nm, OrgId, AnyBIC, DbtrAcctID, BICFI, PmtInfId, PmtMtd, Dt, PoolgAdjstmntDt, Id, Ccy, ChrgBr, InstrId, EndToEndId, InstrPrty, InstdAmt, InstrForDbtrAgt, Prtry, BANKB, CdtrName, CdtrId, InstrForCdtrAgt, BtchBookg, Act_Adrr_C, RmtInf_Ustrd, Act_Pst_Code_C, BICFI_Name, CdtrAgtBICFI, CdtrAgtBICFINM, DbtrAgtBICFI, DbtrAgtBICFI_Name, true, Ustrd);
                                                sqlStr = string.Format("UPDATE  tbl_NBOL_TPP SET MsgId='{0}',endToEndID='{0}', TransactionStatus=1 WHERE NBOL_TPP_Inst_No = '{1}'", Msg_ID, NBOL_TPP_Inst_No);
                                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                                            }
                                            catch (Exception ex)
                                            {
                                                //SR_Class.fn_Save_UserLogging_Detail("14605", "0", "14605", "update error");
                                            }
                                        }
                                        catch (Exception ex)
                                        {
                                            sqlStr = string.Format("UPDATE  tbl_NBOL_TPP SET Posted_YN_B=0,TransactionStatus=4,MsgId='{0}' WHERE NBOL_TPP_Inst_No = '{1}'", Msg_ID, NBOL_TPP_Inst_No);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);

                                            // We are done.  If the XML IS BROKEDN THEN THE RECORD WILL NOT BE SENT AND JUST THAT RECORD. u NEED TO uPDATE ITS STATUS TO SOMETHING ELSE AND INVESTIGATE
                                            string Err_String = string.Format("{0} Failed to Parse XML File : {1}", NBOL_TPP_Inst_No, XML_Response);

                                            Utilities.LogToFile(Err_String, true);
                                            if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                            string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", "", Err_String.Replace("'", "`"), trxnProduct_ID, Err_Date2));
                                        }
                                    }

                                    if (Trn_XML.Contains("<ChrgBr>DEBT</ChrgBr>"))
                                    {
                                        Trn_XML = Trn_XML.Replace("<ChrgBr>DEBT</ChrgBr>", XML_Response);
                                    }
                                    string Trn_XML_DbtrAgt_Insert = "";
                                    Trn_XML_DbtrAgt_Insert += string.Format("            <DbtrAgt>                                               ");
                                    Trn_XML_DbtrAgt_Insert += string.Format("                <FinInstnId>                                        ");
                                    Trn_XML_DbtrAgt_Insert += string.Format("                    <BICFI>{0}</BICFI>                              ", DbtrAgtBICFI);
                                    Trn_XML_DbtrAgt_Insert += string.Format("                    <Nm>{0}</Nm>                                    ", "STANBIC BANK ZIMBABWE LTD");
                                    Trn_XML_DbtrAgt_Insert += string.Format("                </FinInstnId>                                       ");
                                    Trn_XML_DbtrAgt_Insert += string.Format("            </DbtrAgt>                                              ");
                                    Trn_XML_DbtrAgt_Insert += string.Format("            <ChrgBr>{0}</ChrgBr>                                    ", zeepayPain.ChargeBearerType1Code.DEBT);
                                    if (Trn_XML.Contains("<DbtrAgt />"))
                                    {
                                        Trn_XML = Trn_XML.Replace("<DbtrAgt />", Trn_XML_DbtrAgt_Insert);
                                    }
                                    string header = "<?xml version=\"1.0\" encoding=\"us-ascii\" standalone=\"yes\" ?>";

                                    string document = "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.08\" >";
                                    string Trn_XML_Header = "";
                                    Trn_XML_Header += string.Format("{0}										                          ", header);
                                    Trn_XML_Header += string.Format("{0}                                                                   ", document);
                                    if (Trn_XML.Contains("<Document>"))
                                    {
                                        Trn_XML = Trn_XML.Replace("<Document>", Trn_XML_Header);
                                    }
                                    SendWork(Trn_XML, channel, properties, NBOL_TPP_Inst_No, Batch_Num_C, Processing_ID, QueueName, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue, ZEEPAYPath);
                                    if (channel.IsOpen) channel.Close();
                                }
                                if (connection.IsOpen) connection.Close();
                            }
                        }
                        sqlStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], sqlStr);
                    }
                }
            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("error", "0", "14519", "No Session");
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), trxnProduct_ID, Err_Date2));

                sqlStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], sqlStr);
            }
        }

        public static string fn_Create_Zeepay_Payment_Request_Batch
        (
            string Msg_ID,
            string CreDtTm,
            string NbOfTxs,
            string CtrlSum,
            string Nm,
            string OrgId,
            string AnyBIC,
            string DbtrAcctID,
            string BICFI,
            string PmtInfId,
            string PmtMtd,
            string Dt,
            string PoolgAdjstmntDt,
            string Id,
            string Ccy,
            string ChrgBr,
            string InstrId,
            string EndToEndId,
            string InstrPrty,
            string InstdAmt,
            string InstrForDbtrAgt,
            string Prtry,
            string BANKB,
            string CdtrName,
            string CdtrId,
            string InstrForCdtrAgt,
            bool BtchBookg,
            string Act_Adrr_C,
            string RmtInf_Ustrd,
            string Act_Pst_Code_C,
            string BICFI_Name,
            string CdtrAgtBICFI,
            string CdtrAgtBICFINM,
            string DbtrAgtBICFI,
            string DbtrAgtBICFI_Name,
            bool useZeepPayClass,
            string Ustrd
        )
        //<?xml version="1.0" encoding="us-ascii" standalone="yes"?>
        //<Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.09">
        {
            string Trn_XML = "";
            if (useZeepPayClass)
            {
                zeepayPain                                              PainDoc               = new zeepayPain();
                zeepayPain.Document                                     rootDoc               = new zeepayPain.Document();
                zeepayPain.CustomerCreditTransferInitiationV08          crdtInt               = new zeepayPain.CustomerCreditTransferInitiationV08();
                zeepayPain.GroupHeader48                                GrpHeader             = new zeepayPain.GroupHeader48();
                zeepayPain.PaymentInstruction22                         PmtInf                = new zeepayPain.PaymentInstruction22();
                zeepayPain.PaymentInstruction22[]                       PmtInfBatch;// = new zeepayPain.PaymentInstruction22();
                zeepayPain.PartyIdentification43                        InitgPty              = new zeepayPain.PartyIdentification43();
                zeepayPain.Party11Choice                                nmId                  = new zeepayPain.Party11Choice();
                zeepayPain.OrganisationIdentification8                  anyBICFieldtag        = new zeepayPain.OrganisationIdentification8();
                zeepayPain.BranchAndFinancialInstitutionIdentification5 FwdgAgttag            = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
                zeepayPain.FinancialInstitutionIdentification8          finInstnIdtag         = new zeepayPain.FinancialInstitutionIdentification8();
                zeepayPain.PaymentTypeInformation19                     PmtTpInftag           = new zeepayPain.PaymentTypeInformation19();
                zeepayPain.Priority2Code                                Priority2Code_enum    = new zeepayPain.Priority2Code();
                zeepayPain.PaymentMethod3Code                           PmtMtdtag             = new zeepayPain.PaymentMethod3Code();
                zeepayPain.DateAndDateTimeChoice                        dateAndDateTimeChoice = new zeepayPain.DateAndDateTimeChoice();
                zeepayPain.TaxInformation4                              dbtrtag               = new zeepayPain.TaxInformation4();
                zeepayPain.CashAccount24                                DbtrAccttag           = new zeepayPain.CashAccount24();
                zeepayPain.BranchAndFinancialInstitutionIdentification5 DbtrAgttag            = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
                zeepayPain.CreditTransferTransaction26                  CdtTrfTxInftag        = new zeepayPain.CreditTransferTransaction26();
                zeepayPain.CreditTransferTransaction26                  Amnttag               = new zeepayPain.CreditTransferTransaction26();
                zeepayPain.AmountType4Choice                            amountType4Choice     = new zeepayPain.AmountType4Choice();
                zeepayPain.ExchangeRate1                                xchgRateInfField      = new zeepayPain.ExchangeRate1();
                zeepayPain.CashAccount24                                CdtrAgttag            = new zeepayPain.CashAccount24();
                zeepayPain.CashAccount24                                CdtrAgtttag           = new zeepayPain.CashAccount24();
                zeepayPain.BranchAndFinancialInstitutionIdentification5 CdtrAccttag           = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
                zeepayPain.PartyIdentification43                        UltmtCdtr_id_tag      = new zeepayPain.PartyIdentification43();
                zeepayPain.InstructionForCreditorAgent1                 InstrForCdtrAgttag = new zeepayPain.InstructionForCreditorAgent1();
                zeepayPain.Purpose2Choice Purpose2Choice = new zeepayPain.Purpose2Choice();
                zeepayPain.RemittanceInformation11 RmtInftag = new zeepayPain.RemittanceInformation11();
                zeepayPain.FinancialInstitutionIdentification8 FinInstnIdtag = new zeepayPain.FinancialInstitutionIdentification8();
                zeepayPain.PaymentIdentification1 PmtIdtag = new zeepayPain.PaymentIdentification1();
                zeepayPain.BranchAndFinancialInstitutionIdentification5 CdtrAgttag_ = new zeepayPain.BranchAndFinancialInstitutionIdentification5();
                zeepayPain.PartyIdentification43 Cdtrtag = new zeepayPain.PartyIdentification43();
                zeepayPain.AccountIdentification4Choice idtag = new zeepayPain.AccountIdentification4Choice();
                zeepayPain.PartyIdentification43 UltmtCdtrtag = new zeepayPain.PartyIdentification43();
                zeepayPain.GenericAccountIdentification1 Othrtag = new zeepayPain.GenericAccountIdentification1();
                zeepayPain.PartyIdentification43 Dbtrtag = new zeepayPain.PartyIdentification43();
                zeepayPain.AmountType4Choice Amttag = new zeepayPain.AmountType4Choice();
                zeepayPain.Purpose2Choice purptag = new zeepayPain.Purpose2Choice();

                PmtIdtag.InstrId = Msg_ID;
                PmtIdtag.EndToEndId = Msg_ID;
                CdtTrfTxInftag.PmtId = PmtIdtag;
                PmtTpInftag.InstrPrty = zeepayPain.Priority2Code.HIGH;
                CdtTrfTxInftag.PmtTpInf = PmtTpInftag;
                CdtTrfTxInftag.XchgRateInf = xchgRateInfField;
                CdtTrfTxInftag.ChrgBrSpecified = true;
                CdtTrfTxInftag.ChrgBr = zeepayPain.ChargeBearerType1Code.DEBT;
                FinInstnIdtag.BICFI = CdtrAgtBICFI;
                FinInstnIdtag.Nm = fn_RemoveInvalidXmlChars(CdtrAgtBICFINM);
                CdtrAgttag_.FinInstnId = FinInstnIdtag;
                CdtTrfTxInftag.CdtrAgt = CdtrAgttag_;
                CdtTrfTxInftag.Cdtr = Cdtrtag;
                InstrForCdtrAgttag.Cd = zeepayPain.Instruction3Code.HOLD;
                CdtTrfTxInftag.InstrForCdtrAgt = new zeepayPain.InstructionForCreditorAgent1[1] { InstrForCdtrAgttag };
                //string[] checkUstrd                     = { fn_RemoveInvalidXmlChars(Act_Pst_Code_C) };
                //RmtInftag.Ustrd                         = checkUstrd;
                //CdtTrfTxInftag.RmtInf                   = RmtInftag;
                PmtInf.CdtTrfTxInf = new zeepayPain.CreditTransferTransaction26[1] { CdtTrfTxInftag };
                crdtInt.GrpHdr = GrpHeader;
                crdtInt.PmtInf = new zeepayPain.PaymentInstruction22[1] { PmtInf };
                rootDoc.CstmrCdtTrfInitn = crdtInt;

                Trn_XML = Utilities.SerializeToXML_No_xlmns(CdtTrfTxInftag);
                if (Trn_XML.Contains("CreditTransferTransaction26"))
                {
                    Trn_XML = Trn_XML.Replace("CreditTransferTransaction26", "CdtTrfTxInf");
                }
                string Trn_XML_Insert = "";
                Trn_XML_Insert += string.Format("                <InstrForCdtrAgt>                                   ");
                Trn_XML_Insert += string.Format("                    <Cd>{0}</Cd>                                    ", InstrForCdtrAgt);
                Trn_XML_Insert += string.Format("                </InstrForCdtrAgt>                                  ");
                Trn_XML_Insert += string.Format("                <InstrForDbtrAgt>{0}</InstrForDbtrAgt>              ", InstrForDbtrAgt);
                Trn_XML_Insert += string.Format("                <Purp>                                              ");
                Trn_XML_Insert += string.Format("                    <Prtry>{0}</Prtry>                              ", Prtry);
                Trn_XML_Insert += string.Format("                </Purp>                                             ");
                Trn_XML_Insert += string.Format("                <RmtInf>                                              ");
                Trn_XML_Insert += string.Format("                    <Ustrd>{0}</Ustrd>                              ", Ustrd);
                Trn_XML_Insert += string.Format("                </RmtInf>                                             ");
                if (Trn_XML.Contains("<InstrForCdtrAgt />"))
                {
                    Trn_XML = Trn_XML.Replace("<InstrForCdtrAgt />", Trn_XML_Insert);
                }
                string Trn_XML_InitgPty_Insert = "";
                Trn_XML_InitgPty_Insert += string.Format("                <InitgPty>							              ");
                Trn_XML_InitgPty_Insert += string.Format("                 <Nm>{0}</Nm>                                       ", "STANBIC BANK ZIMBABWE LTD");
                Trn_XML_InitgPty_Insert += string.Format("                     <Id>							                  ");
                Trn_XML_InitgPty_Insert += string.Format("                 <OrgId>");
                Trn_XML_InitgPty_Insert += string.Format("                 <AnyBIC>{0}</AnyBIC>", OrgId);
                Trn_XML_InitgPty_Insert += string.Format("                 </OrgId>                                       ");
                Trn_XML_InitgPty_Insert += string.Format("                     </Id>							                  ");
                Trn_XML_InitgPty_Insert += string.Format("            </InitgPty>                                             ");
                if (Trn_XML.Contains("<InitgPty />"))
                {
                    Trn_XML = Trn_XML.Replace("<InitgPty />", Trn_XML_InitgPty_Insert);
                }


                string Ccy_Formatted = string.Format("\"{0}\"", Ccy);
                string Trn_XML_XchgRateInf_Insert = "";
                Trn_XML_XchgRateInf_Insert += string.Format("                <Amt>                                               ");
                Trn_XML_XchgRateInf_Insert += string.Format("                    <InstdAmt Ccy={0}>{1}</InstdAmt>                ", Ccy_Formatted, InstdAmt);
                Trn_XML_XchgRateInf_Insert += string.Format("                </Amt>                                              ");
                Trn_XML_XchgRateInf_Insert += string.Format("                <XchgRateInf/>                                      ");
                if (Trn_XML.Contains("<XchgRateInf />"))
                {
                    Trn_XML = Trn_XML.Replace("<XchgRateInf />", Trn_XML_XchgRateInf_Insert);
                }
                string Trn_XML_Cdtr_Insert = "";
                Trn_XML_Cdtr_Insert += string.Format("                <Cdtr>                                              ");
                Trn_XML_Cdtr_Insert += string.Format("                    <Nm>{0}</Nm>                                    ", fn_RemoveInvalidXmlChars(Act_Adrr_C));
                Trn_XML_Cdtr_Insert += string.Format("                <Id>                                                ");
                Trn_XML_Cdtr_Insert += string.Format("                    <OrgId>                                         ");
                Trn_XML_Cdtr_Insert += string.Format("                        <AnyBIC>{0}</AnyBIC>                        ", AnyBIC);
                Trn_XML_Cdtr_Insert += string.Format("                    </OrgId>                                        ");
                Trn_XML_Cdtr_Insert += string.Format("                </Id>                                               ");
                Trn_XML_Cdtr_Insert += string.Format("                </Cdtr>                                             ");
                Trn_XML_Cdtr_Insert += string.Format("                <CdtrAcct>                                          ");
                Trn_XML_Cdtr_Insert += string.Format("                    <Id>                                            ");
                Trn_XML_Cdtr_Insert += string.Format("                        <Othr>                                      ");
                Trn_XML_Cdtr_Insert += string.Format("                            <Id>{0}</Id>                            ", CdtrId);
                Trn_XML_Cdtr_Insert += string.Format("                        </Othr>                                     ");
                Trn_XML_Cdtr_Insert += string.Format("                    </Id>                                           ");
                Trn_XML_Cdtr_Insert += string.Format("                    <Ccy>{0}</Ccy>                                  ", Ccy);
                Trn_XML_Cdtr_Insert += string.Format("                    <Nm>{0}</Nm>                                    ", fn_RemoveInvalidXmlChars(Act_Adrr_C));
                Trn_XML_Cdtr_Insert += string.Format("                </CdtrAcct>                                         ");
                Trn_XML_Cdtr_Insert += string.Format("                <UltmtCdtr>                                         ");
                Trn_XML_Cdtr_Insert += string.Format("                    <Nm>{0}</Nm>                                    ", fn_RemoveInvalidXmlChars(Act_Adrr_C));
                Trn_XML_Cdtr_Insert += string.Format("                <Id>                                                ");
                Trn_XML_Cdtr_Insert += string.Format("                    <OrgId>                                         ");
                Trn_XML_Cdtr_Insert += string.Format("                        <AnyBIC>{0}</AnyBIC>                        ", AnyBIC);
                Trn_XML_Cdtr_Insert += string.Format("                    </OrgId>                                        ");
                Trn_XML_Cdtr_Insert += string.Format("                </Id>                                               ");
                Trn_XML_Cdtr_Insert += string.Format("                </UltmtCdtr>                                        ");
                if (Trn_XML.Contains("<Cdtr />"))
                {
                    Trn_XML = Trn_XML.Replace("<Cdtr />", Trn_XML_Cdtr_Insert);
                }
            }

            return Trn_XML;
        }
        static string fn_RemoveInvalidXmlChars(string text)
        {
            string TempStr       = "";
            var    validXmlChars = text.Where(ch => XmlConvert.IsXmlChar(ch)).ToArray();
            TempStr              = new string(validXmlChars);
            TempStr              = TempStr.Replace("&", " &amp;").Replace("<", "&lt;").Replace(">", "&gt;").Replace("'", "&apos;").Replace("\"", "&quot;") ;
            return TempStr;
        }
        
        string getMsgID(string NBOL_TPP_Inst_No, string valuedate)
        {
            string result = "";
            try
            {
                DataTable dt     = new DataTable();
                string    sqlStr = string.Format("EXEC ustp_tbl_ZeepaySequenceNo @NBOL_TPP_Inst_No= '{0}',@PostingDate= '{1}'", NBOL_TPP_Inst_No, valuedate);
                dt               = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["SequenceNum"].ToString();
                }

            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("error in getMsgID", "0", "13837", "No Session");
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_ZEEPAY_RABBIT", Err_Date2));
            }
            return result;
        }
        private void Post_Zeepay_OutGoing_Transactions_LK()
        {
            //SR_Class.fn_Save_UserLogging_Detail("Post_Zeepay_Transactions", "0", "13574", "No Session");
            string    trxnProduct_ID   = "Post_Zeepay_OutGoing_Transactions";
            string    sqlStr           = "";
            DataTable NBOL_TPP         = new DataTable();
            DataTable SysRec           = new DataTable();
            DateTime  Curr_Time        = DateTime.Now;
            DateTime  StartTime        = DateTime.Now;
            DateTime  EndTime          = DateTime.Now.AddDays(-1);
            Hashtable m_hashtable      = new Hashtable();
            Hashtable m_whereHashTable = new Hashtable();

            string Error_Time = "";
            Hashtable tmpHash = new Hashtable();
            Error_Time        = string.Format("{0:yyyy-MM-dd HH:mm:ss}",  DateTime.Now);
            tmpHash.Add("STEP_DESCR"  , "Main Entry");
            tmpHash.Add("LOGGER_DESCR", trxnProduct_ID);
            tmpHash.Add("DATE_LOGGED" , Error_Time);
            SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), "Service_Logger", tmpHash);
            string   Msg_ID = "";
            DateTime CreDtTm;
            string   NbOfTxs = "";
            string   CtrlSum = "";
            string   Nm      = "";
            string OrgId     = "";
            string AnyBIC    = "";
            string BICFI     = "";
            string PmtInfId  = "";
            string PmtMtd    = "";
            string InstrPrty = "";
            string Dt        = "";
            string PoolgAdjstmntDt = "";
            string Id = "";
            string Ccy = "";
            string ChrgBr = "";
            string InstrId = "";
            string InstdAmt = "";
            string EndToEndId = "";
            string InstrForDbtrAgt = "";
            string Prtry = "";
            string BANKB = "";
            string CdtrName = "";
            string CdtrId = "";
            string InstrForCdtrAgt = "";
            string BtchBookg = "";
            string PmtInf_CtrlSum = "";
            string PmtTpInf_InstrPrty = "";
            string BICFI_BankB = "";
            string CdtrAcct_ID = "";
            string Cdtr_UltmtCdtr = "";
            string DbtrAcctID = "";
            string NBOL_TPP_Inst_No = "";
            string Batch_Num_C = "";
            string Act_Adrr_C = "";
            string RmtInf_Ustrd = "";
            string Act_Pst_Code_C = "";
            string BICFI_Name = "";
            string recCount = "";
            string CdtrAgtBICFI = "";
            string CdtrAgtBICFINM = "";
            string DbtrAgtBICFI = "";
            string DbtrAgtBICFI_Name = "";
            decimal CtrlSum_      = 0;
    
            DataTable Sys_Tbl     = new DataTable();
            string QueueName      = "";
            string QueueUserName  = "";
            string QueuePassword  = "";
            string QueueHostName  = "";
            string QueuePort      = "0";
            string QueueBatchSize = "1";
            string Processing_ID  = "";
            try
            {
                //Check if this Node is allowed to Run 
                sqlStr = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], sqlStr).Rows[0][0].ToString()) > 0)
                {
                    // Check Threading
                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        sqlStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), sqlStr);

                        sqlStr  = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('QueueName','QueueUserName','QueuePassword','QueueHostName','QueuePort','QueueBatchSize') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                        Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                        if (Sys_Tbl.Rows.Count > 0)
                        {
                            foreach (DataRow param_Row in Sys_Tbl.Rows)
                            {
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueName".ToUpper())      QueueName      = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueUserName".ToUpper())  QueueUserName  = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueuePassword".ToUpper())  QueuePassword  = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueHostName".ToUpper())  QueueHostName  = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueuePort".ToUpper())      QueuePort      = param_Row["Parameter_Value"].ToString();
                                if (param_Row["Parameter_ID"].ToString().ToUpper() == "QueueBatchSize".ToUpper()) QueueBatchSize = param_Row["Parameter_Value"].ToString();
                            }
                        }

                        // Mark the Batch
                        Processing_ID = System.Guid.NewGuid().ToString();
                        sqlStr        = string.Format("[dbo].[ustp_MarkZeePay_OurGoingBatch] @Processing_ID = '{0}'", Processing_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);

                        sqlStr   = string.Format("SELECT * FROM tbl_NBOL_TPP WHERE Processing_ID = '{0}'", Processing_ID);
                        NBOL_TPP = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);

                        int rowCount = 0;
                        rowCount     = NBOL_TPP.Rows.Count;
                        if (NBOL_TPP.Rows.Count > 0)  
                        {
                            var factory = new ConnectionFactory();
                            if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                            {
                                factory = new ConnectionFactory { HostName = "localhost" };
                            }
                            else
                            {
                                factory = new ConnectionFactory { UserName = QueueUserName, Password = QueuePassword, HostName = QueueHostName, Port = Convert.ToInt32(QueuePort) };
                            }

                            using (var connection = factory.CreateConnection())
                            {
                                using (var channel = connection.CreateModel())
                                {
                                    // Guaranteed delivery: durable: true
                                    if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                                    {
                                        channel.QueueDeclare(queue: e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.LocalhostQueue, durable: true, exclusive: false, autoDelete: false, arguments: null);
                                    }
                                    else
                                    {
                                        channel.QueueDeclare(queue: QueueName, durable: true, exclusive: false, autoDelete: false, arguments: null);
                                    }

                                    var properties = channel.CreateBasicProperties();

                                    //Set the message to persist in the event of a broker shutdown
                                    var messageProperties = channel.CreateBasicProperties();
                                    messageProperties.SetPersistent(true);

                                    //Send an acknowledgement that the message was persisted to disk
                                    //channel.BasicAcks += (sender, ea) =>
                                    //{
                                    //    // code when message is confirmed
                                    //};
                                    channel.ConfirmSelect();

                                    for (int n = 1; n <= rowCount; n++)
                                    {
                                        //SR_Class.fn_Save_UserLogging_Detail("after selecting record", "0", "13654", "No Session");
                                        //FORMAT MESSAGE ID
                                        int i = 0;
                                        CreDtTm          = Convert.ToDateTime(NBOL_TPP.Rows[i]["Import_Date_D"]);
                                        string dte       = Convert.ToDateTime(NBOL_TPP.Rows[i]["Import_Date_D"]).ToString("yyyy-MM-ddTHH:mm:ss.fffffffK");
                                        string msgIDDate = CreDtTm.ToString("yyyyMMdd"); //date
                                                                                         //now get company code
                                                                                         //SR_Class.fn_Save_UserLogging_Detail("14139", "0", "14139", "14139");
                                                                                         //increament record count
                                        Batch_Num_C     = NBOL_TPP.Rows[i]["Batch_Num_C"].ToString();
                                        string countsql = string.Format("SELECT MAX(FORMAT(CONVERT(INT, RECORD_COUNT + 1), 'D7')) COUNT FROM tbl_NBOL_TPP");
                                        DataTable dt    = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), countsql);
                                        if (dt.Rows.Count > 0)
                                        {
                                            recCount = dt.Rows[0]["COUNT"].ToString();
                                        }
                                        Msg_ID   = msgIDDate + "/031000/" + recCount;

                                        NbOfTxs  = "1";
                                        CtrlSum_ = Convert.ToDecimal(NBOL_TPP.Rows[i]["Trn_Amnt_N"]);
                                        CtrlSum  = String.Format("{0:0.##}", CtrlSum_);
                                        Nm       = NBOL_TPP.Rows[i]["Act_Name_C"].ToString();
                                        OrgId    = "BICCZWHX";
                                        AnyBIC   = "BICCZWHX";
                                        DbtrAcctID = NBOL_TPP.Rows[i]["Acct_Num_DR_C"].ToString();
                                        BICFI      = NBOL_TPP.Rows[i]["Benef_SWIFT_Code_C"].ToString();
                                        BICFI_Name = getBICFI_Name(BICFI);
                                        PmtInfId   = Msg_ID;
                                        PmtMtd     = "TRF";
                                        BtchBookg  = "true";
                                        PmtInf_CtrlSum = String.Format("{0:0.00}", NBOL_TPP.Rows[i]["Trn_Amnt_N"].ToString());
                                        InstrPrty = "HIGH";

                                        var isoDateTimeFormat = CultureInfo.InvariantCulture.DateTimeFormat;

                                        // "2013-10-10T22:10:00"
                                        //Dt = DateTime.Now.ToString(isoDateTimeFormat.SortableDateTimePattern);
                                        Dt = DateTime.Now.ToString("yyyy-MM-dd");
                                        Dt = Dt + "+02:00";
                                        PoolgAdjstmntDt = Dt;
                                        Id = NBOL_TPP.Rows[i]["Acct_Num_DR_C"].ToString();
                                        if (Convert.ToString(NBOL_TPP.Rows[i]["File_Name_C"]).Contains("_ZWL_"))
                                        {
                                            Ccy = "ZWL";
                                        }
                                        else
                                        {
                                            Ccy = "USD";
                                        }
                                        ChrgBr             = "DEBT";
                                        InstrId            = Msg_ID;
                                        EndToEndId         = Msg_ID;
                                        PmtTpInf_InstrPrty = "NORM";
                                        InstdAmt           = CtrlSum;
                                        BICFI_BankB        = NBOL_TPP.Rows[i]["Benef_Bank_C"].ToString();
                                        CdtrName           = NBOL_TPP.Rows[i]["Act_Name_DR_C"].ToString(); ;
                                        CdtrAcct_ID        = "1324234314";
                                        InstrForDbtrAgt    = "PBEN";
                                        InstrForCdtrAgt    = "HOLD";
                                        Prtry              = "21";
                                        BANKB            = NBOL_TPP.Rows[i]["Benef_Bank_C"].ToString();
                                        CdtrId           = NBOL_TPP.Rows[i]["Acct_Num_C"].ToString();
                                        NBOL_TPP_Inst_No = NBOL_TPP.Rows[i]["NBOL_TPP_Inst_No"].ToString();
                                        Act_Adrr_C       = NBOL_TPP.Rows[i]["Act_Adrr_C"].ToString();
                                        RmtInf_Ustrd     = NBOL_TPP.Rows[i]["Trn_Desc_C"].ToString();
                                        Act_Pst_Code_C   = NBOL_TPP.Rows[i]["Act_Pst_Code_C"].ToString();

                                        DbtrAgtBICFI      = "SBICZWH0";
                                        DbtrAgtBICFI_Name = getBICFI_Name(DbtrAgtBICFI);
                                        //now update record to posted

                                        //get banckcode from  batchnumber

                                        CdtrAgtBICFI   = getBICFI_ByCode(Batch_Num_C.Substring(0, 5));
                                        CdtrAgtBICFINM = getBICFI_Name_ByCode(Batch_Num_C.Substring(0, 5));
                                        //SR_Class.fn_Save_UserLogging_Detail("before XML_Response", "0", "14208", "No Session");
                                        string XML_Response = fn_Create_Zeepay_Payment_Request(Msg_ID, dte, NbOfTxs, CtrlSum, Nm, OrgId, AnyBIC, DbtrAcctID, BICFI, PmtInfId, PmtMtd, Dt, PoolgAdjstmntDt, Id, Ccy, ChrgBr, InstrId, EndToEndId, InstrPrty, InstdAmt, InstrForDbtrAgt, Prtry, BANKB, CdtrName, CdtrId, InstrForCdtrAgt, BtchBookg, Act_Adrr_C, RmtInf_Ustrd, Act_Pst_Code_C, BICFI_Name, CdtrAgtBICFI, CdtrAgtBICFINM, DbtrAgtBICFI, DbtrAgtBICFI_Name);
                                        //SR_Class.fn_Save_UserLogging_Detail("after  XML_Response", "0", "14210", "No Session");
                                        //validate xml

                                        XmlDocument TmpXLDoc = new XmlDocument();
                                        try
                                        {
                                            TmpXLDoc.LoadXml(XML_Response);
                                            try
                                            {
                                                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                                                {
                                                    SendWork(XML_Response, channel, properties, NBOL_TPP_Inst_No, Batch_Num_C, Msg_ID, "", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true,"");
                                                }
                                                else
                                                {
                                                    SendWork(XML_Response, channel, properties, NBOL_TPP_Inst_No, Batch_Num_C, Msg_ID, QueueName, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true,"");
                                                }

                                                // Guaranteed delivery
                                                // Marking messages as persistent doesn't fully guarantee that a message won't be lost. 
                                                // Although it tells RabbitMQ to save the message to disk, there is still a short time window when RabbitMQ 
                                                // has accepted a message and hasn't saved it yet. 
                                                // Also, RabbitMQ doesn't do fsync(2) for every message -- it may be just saved to cache and not really written to the disk. 
                                                // The persistence guarantees aren't strong, but it's more than enough for our simple task queue. 
                                                // If you need a stronger guarantee then you can use publisher confirms.
                                                // https://www.rabbitmq.com/confirms.html
                                                //properties.Persistent = true;
                                            }
                                            catch (Exception ex)
                                            {
                                                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                                                Utilities.LogToFile(Err_String, true);
                                                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), trxnProduct_ID, Err_Date2));
                                            }
                                        }
                                        catch
                                        {
                                            string Err_String = string.Format("{0} Failed XML Validation : {1}", NBOL_TPP_Inst_No, XML_Response );
                                            Utilities.LogToFile(Err_String, true);
                                            if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                            string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D","19197441", Err_String.Replace("'", "`"), trxnProduct_ID, Err_Date2));
                                        }
                                    }
                                    if (channel.IsOpen) channel.Close();
                                }
                                if (connection.IsOpen) connection.Close();
                            }
                        }
                        sqlStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], sqlStr);
                    }
                }
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), trxnProduct_ID, Err_Date2));

                sqlStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], sqlStr);
            }
        }


        public static string fn_Create_Zeepay_Payment_Request
        (
            string Msg_ID,
            string CreDtTm,
            string NbOfTxs,
            string CtrlSum,
            string Nm,
            string OrgId,
            string AnyBIC,
            string DbtrAcctID,
            string BICFI,
            string PmtInfId,
            string PmtMtd,
            string Dt,
            string PoolgAdjstmntDt,
            string Id,
            string Ccy,
            string ChrgBr,
            string InstrId,
            string EndToEndId,
            string InstrPrty,
            string InstdAmt,
            string InstrForDbtrAgt,
            string Prtry,
            string BANKB,
            string CdtrName,
            string CdtrId,
            string InstrForCdtrAgt,
            string BtchBookg,
            string Act_Adrr_C,
            string RmtInf_Ustrd,
            string Act_Pst_Code_C,
            string BICFI_Name,
            string CdtrAgtBICFI,
             string CdtrAgtBICFINM,
             string DbtrAgtBICFI,
            string DbtrAgtBICFI_Name
              )
        //<?xml version="1.0" encoding="us-ascii" standalone="yes"?>
        //<Document xmlns="urn:iso:std:iso:20022:tech:xsd:pain.001.001.09">
        {
            //ConfigurationManager.AppSettings["EPayments_DB"].ToString()
            //string Trn_XML = SqlHelper.GetTable(ConfigurationManager.ConnectionStrings["MobileTransaction_ZipIT.Properties.Settings.SQL"].ConnectionString, "SELECT TOP 1  REPLACE(REPLACE(Zipit_Header, '&lt;', '<'), '&gt;', '>') AS Fin_XML_Header FROM dbo.tbl_SysParam WITH (NOLOCK)").Rows[0][0].ToString();
            string Ccy_Formatted = string.Format("\"{0}\"", Ccy);
            string header = "<?xml version=\"1.0\" encoding=\"us-ascii\" standalone=\"yes\" ?>";

            string document = "<Document xmlns=\"urn:iso:std:iso:20022:tech:xsd:pain.001.001.08\" >";
            string Trn_XML = "";
            Trn_XML += string.Format("{0}										                          ", header);
            Trn_XML += string.Format("{0}                                                               ", document);
            Trn_XML += string.Format("         <CstmrCdtTrfInitn>						                  ");
            Trn_XML += string.Format("           <GrpHdr>									              ");
            Trn_XML += string.Format("              <MsgId>{0}</MsgId>				                      ", Msg_ID);
            Trn_XML += string.Format("              <CreDtTm>{0}</CreDtTm>                                ", CreDtTm);
            Trn_XML += string.Format("              <NbOfTxs>{0}</NbOfTxs>						          ", NbOfTxs);
            Trn_XML += string.Format("              <CtrlSum>{0}</CtrlSum>						          ", CtrlSum);
            Trn_XML += string.Format("                <InitgPty>							              ");
            Trn_XML += string.Format("                 <Nm>{0}</Nm>                                       ", "STANBIC BANK ZIMBABWE LTD");
            Trn_XML += string.Format("                     <Id>							                  ");
            Trn_XML += string.Format("                 <OrgId>");
            Trn_XML += string.Format("                 <AnyBIC>{0}</AnyBIC>", OrgId);
            Trn_XML += string.Format("                 </OrgId>                                       ");
            Trn_XML += string.Format("                     </Id>							                  ");
            Trn_XML += string.Format("            </InitgPty>                                             ");
            Trn_XML += string.Format("            <FwdgAgt>                                               ");
            Trn_XML += string.Format("                <FinInstnId>                                        ");
            Trn_XML += string.Format("                    <BICFI>{0}</BICFI>                              ", DbtrAgtBICFI);
            Trn_XML += string.Format("                    <Nm>{0}</Nm>                                    ", "STANBIC BANK ZIMBABWE LTD");
            Trn_XML += string.Format("                </FinInstnId>                                       ");
            Trn_XML += string.Format("            </FwdgAgt>                                              ");
            Trn_XML += string.Format("        </GrpHdr>                                                   ");
            Trn_XML += string.Format("        <PmtInf>                                                    ");
            Trn_XML += string.Format("            <PmtInfId>{0}</PmtInfId>                                ", PmtInfId);
            Trn_XML += string.Format("            <PmtMtd>{0}</PmtMtd>                                    ", PmtMtd);
            Trn_XML += string.Format("            <BtchBookg>{0}</BtchBookg>                              ", BtchBookg);
            Trn_XML += string.Format("            <NbOfTxs>{0}</NbOfTxs>                                  ", NbOfTxs);
            Trn_XML += string.Format("            <CtrlSum>{0}</CtrlSum>                                  ", CtrlSum);
            Trn_XML += string.Format("            <PmtTpInf>                                              ");
            Trn_XML += string.Format("                <InstrPrty>{0}</InstrPrty>                          ", InstrPrty);
            Trn_XML += string.Format("            </PmtTpInf>                                             ");
            Trn_XML += string.Format("            <ReqdExctnDt>                                           ");
            Trn_XML += string.Format("                <Dt>{0}</Dt>                                        ", Dt);
            Trn_XML += string.Format("            </ReqdExctnDt>                                          ");
            Trn_XML += string.Format("            <PoolgAdjstmntDt>{0}</PoolgAdjstmntDt>                  ", PoolgAdjstmntDt);
            Trn_XML += string.Format("            <Dbtr>                                                  ");
            Trn_XML += string.Format("                <Nm>{0}</Nm>                                        ", Utilities.RemoveSpecialCharacters(Regex.Replace(Act_Pst_Code_C, "&", "")));
            Trn_XML += string.Format("                <Id>                                                ");
            Trn_XML += string.Format("                    <OrgId>                                         ");
            Trn_XML += string.Format("                        <AnyBIC>{0}</AnyBIC>                        ", AnyBIC);
            Trn_XML += string.Format("                    </OrgId>                                        ");
            Trn_XML += string.Format("                </Id>                                               ");
            Trn_XML += string.Format("            </Dbtr>                                                 ");
            Trn_XML += string.Format("            <DbtrAcct>                                              ");
            Trn_XML += string.Format("                <Id>                                                ");
            Trn_XML += string.Format("                    <Othr>                                          ");
            //Trn_XML += string.Format("                        <Id>{0}</Id>                                ", Id);
            Trn_XML += string.Format("                        <Id>{0}</Id>                                ", "8142819000000");
            Trn_XML += string.Format("                    </Othr>                                         ");
            Trn_XML += string.Format("                </Id>                                               ");
            Trn_XML += string.Format("                <Ccy>{0}</Ccy>                                      ", Ccy);
            //Trn_XML += string.Format("                <Ccy>{0}</Ccy>                                      ", "ZWL");
            Trn_XML += string.Format("                <Nm>{0}</Nm>                                        ", Utilities.RemoveSpecialCharacters(Regex.Replace(Act_Pst_Code_C, "&", "")));
            Trn_XML += string.Format("            </DbtrAcct>                                             ");
            Trn_XML += string.Format("            <DbtrAgt>                                               ");
            Trn_XML += string.Format("                <FinInstnId>                                        ");
            Trn_XML += string.Format("                    <BICFI>{0}</BICFI>                              ", DbtrAgtBICFI);
            Trn_XML += string.Format("                    <Nm>{0}</Nm>                                    ", "STANBIC BANK ZIMBABWE LTD");
            Trn_XML += string.Format("                </FinInstnId>                                       ");
            Trn_XML += string.Format("            </DbtrAgt>                                              ");
            Trn_XML += string.Format("            <ChrgBr>{0}</ChrgBr>                                    ", ChrgBr);
            Trn_XML += string.Format("            <CdtTrfTxInf>                                           ");
            Trn_XML += string.Format("                <PmtId>                                             ");
            Trn_XML += string.Format("                    <InstrId>{0}</InstrId>                          ", InstrId);
            Trn_XML += string.Format("                    <EndToEndId>{0}</EndToEndId>                    ", EndToEndId);
            Trn_XML += string.Format("                </PmtId>                                            ");
            Trn_XML += string.Format("                <PmtTpInf>                                          ");
            Trn_XML += string.Format("                    <InstrPrty>{0}</InstrPrty>                      ", InstrPrty);
            Trn_XML += string.Format("                </PmtTpInf>                                         ");
            Trn_XML += string.Format("                <Amt>                                               ");
            Trn_XML += string.Format("                    <InstdAmt Ccy={0}>{1}</InstdAmt>                ", Ccy_Formatted, InstdAmt);
            Trn_XML += string.Format("                </Amt>                                              ");
            Trn_XML += string.Format("                <XchgRateInf/>                                      ");
            Trn_XML += string.Format("                <ChrgBr>{0}</ChrgBr>                                ", ChrgBr);
            Trn_XML += string.Format("                <CdtrAgt>                                           ");
            Trn_XML += string.Format("                    <FinInstnId>                                    ");
            Trn_XML += string.Format("                        <BICFI>{0}</BICFI>                          ", CdtrAgtBICFI);
            //Trn_XML += string.Format("                        <BICFI>{0}</BICFI>                          ", "SBICZWH0");
            Trn_XML += string.Format("                        <Nm>{0}</Nm>                                ", CdtrAgtBICFINM);
            //Trn_XML += string.Format("                        <Nm>{0}</Nm>                                ", "STANBIC BANK ZIMBABWE LTD");
            Trn_XML += string.Format("                    </FinInstnId>                                   ");
            Trn_XML += string.Format("                </CdtrAgt>                                          ");
            Trn_XML += string.Format("                <Cdtr>                                              ");
            Trn_XML += string.Format("                    <Nm>{0}</Nm>                                    ", Utilities.RemoveSpecialCharacters(Act_Adrr_C));
            Trn_XML += string.Format("                <Id>                                                ");
            Trn_XML += string.Format("                    <OrgId>                                         ");
            Trn_XML += string.Format("                        <AnyBIC>{0}</AnyBIC>                        ", AnyBIC);
            Trn_XML += string.Format("                    </OrgId>                                        ");
            Trn_XML += string.Format("                </Id>                                               ");
            Trn_XML += string.Format("                </Cdtr>                                             ");
            Trn_XML += string.Format("                <CdtrAcct>                                          ");
            Trn_XML += string.Format("                    <Id>                                            ");
            Trn_XML += string.Format("                        <Othr>                                      ");
            Trn_XML += string.Format("                            <Id>{0}</Id>                            ", CdtrId);
            //Trn_XML += string.Format("                            <Id>{0}</Id>                            ", "9140000219745");
            Trn_XML += string.Format("                        </Othr>                                     ");
            Trn_XML += string.Format("                    </Id>                                           ");
            Trn_XML += string.Format("                    <Ccy>{0}</Ccy>                                  ", Ccy);
            Trn_XML += string.Format("                    <Nm>{0}</Nm>                                    ", Utilities.RemoveSpecialCharacters(Regex.Replace(Act_Adrr_C, "&", "")));
            Trn_XML += string.Format("                </CdtrAcct>                                         ");
            Trn_XML += string.Format("                <UltmtCdtr>                                         ");
            Trn_XML += string.Format("                    <Nm>{0}</Nm>                                    ", Utilities.RemoveSpecialCharacters(Regex.Replace(Act_Adrr_C, "&", "")));
            Trn_XML += string.Format("                <Id>                                                ");
            Trn_XML += string.Format("                    <OrgId>                                         ");
            Trn_XML += string.Format("                        <AnyBIC>{0}</AnyBIC>                        ", AnyBIC);
            Trn_XML += string.Format("                    </OrgId>                                        ");
            Trn_XML += string.Format("                </Id>                                               ");
            Trn_XML += string.Format("                </UltmtCdtr>                                        ");
            Trn_XML += string.Format("                <InstrForCdtrAgt>                                   ");
            Trn_XML += string.Format("                    <Cd>{0}</Cd>                                    ", InstrForCdtrAgt);
            Trn_XML += string.Format("                </InstrForCdtrAgt>                                  ");
            Trn_XML += string.Format("                <InstrForDbtrAgt>{0}</InstrForDbtrAgt>              ", InstrForDbtrAgt);
            Trn_XML += string.Format("                <Purp>                                              ");
            Trn_XML += string.Format("                    <Prtry>{0}</Prtry>                              ", Prtry);
            Trn_XML += string.Format("                </Purp>                                             ");
            Trn_XML += string.Format("                <Tax/>                                              ");
            Trn_XML += string.Format("                <RmtInf>                                              ");
            Trn_XML += string.Format("                    <Ustrd>{0}</Ustrd>                              ", RmtInf_Ustrd);
            Trn_XML += string.Format("                </RmtInf>                                             ");
            Trn_XML += string.Format("            </CdtTrfTxInf>                                          ");
            Trn_XML += string.Format("        </PmtInf>                                                   ");
            Trn_XML += string.Format("    </CstmrCdtTrfInitn>                                             ");
            Trn_XML += string.Format("</Document>");
            return Trn_XML;
        }

        private void Get_Zeepay_OutGoing_Transactions_Response()
        {
            //SR_Class.fn_Save_UserLogging_Detail("Get_Zeepay_Transactions_Response", "0", "14332", "No Session");
            string SQLStr = "";
            string RespQueuePort ="0";
            string RespQueueHostName = "";
            DataTable Sys_Tbl = new DataTable();
            string RespQueuePassword = "";
            string RespQueueUserName = "";
            string RespQueueName = "";
            string trxnProduct_ID = "Get_Zeepay_OutGoing_Transactions_Response";

            try
            {
                string SQL_Str = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
                {
                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        var factory = new ConnectionFactory();
                        if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                        {
                            factory = new ConnectionFactory
                            {
                                UserName = "guest",
                                Password = "guest",
                                HostName = "localhost"
                            };
                            using (var connection = factory.CreateConnection())
                            {
                                using (var channel = connection.CreateModel())
                                {
                                    // Guaranteed delivery: durable: true
                                    channel.QueueDeclare(queue: e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.LocalhostQueue,
                                        durable: true,
                                        exclusive: false,
                                        autoDelete: false,
                                        arguments: null);
                                    // Guaranteed delivery
                                    // Marking messages as persistent doesn't fully guarantee that a message won't be lost. 
                                    // Although it tells RabbitMQ to save the message to disk, there is still a short time window when RabbitMQ 
                                    // has accepted a message and hasn't saved it yet. 
                                    // Also, RabbitMQ doesn't do fsync(2) for every message -- it may be just saved to cache and not really written to the disk. 
                                    // The persistence guarantees aren't strong, but it's more than enough for our simple task queue. 
                                    // If you need a stronger guarantee then you can use publisher confirms.
                                    // https://www.rabbitmq.com/confirms.html
                                    var properties = channel.CreateBasicProperties();
                                    //properties.Persistent = true;
                                    ReceiveWork(channel, properties, "");
                                }
                            }
                        }
                        else
                        {
                            SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RespQueueName','RespQueueUserName','RespQueuePassword','RespQueueHostName','RespQueuePort') AND Bank_ID = '{0}' AND [Parameter_Authorised_YN] = 1", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                            Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SQLStr);

                            if (Sys_Tbl.Rows.Count > 0)
                            {
                                foreach (DataRow param_Row in Sys_Tbl.Rows)
                                {
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RespQueueName".ToUpper())     RespQueueName     = param_Row["Parameter_Value"].ToString();
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RespQueueUserName".ToUpper()) RespQueueUserName = param_Row["Parameter_Value"].ToString();
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RespQueuePassword".ToUpper()) RespQueuePassword = param_Row["Parameter_Value"].ToString();
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RespQueueHostName".ToUpper()) RespQueueHostName = param_Row["Parameter_Value"].ToString();
                                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RespQueuePort".ToUpper())     RespQueuePort     = param_Row["Parameter_Value"].ToString();
                                }
                            }

                            factory = new ConnectionFactory
                            {
                                UserName = RespQueueUserName,
                                Password = RespQueuePassword,
                                HostName = RespQueueHostName,
                                Port     = Convert.ToInt32(RespQueuePort)
                            };

                            using (var connection = factory.CreateConnection())
                            {
                                using (var channel = connection.CreateModel())
                                {
                                    // Guaranteed delivery: durable: true
                                    channel.QueueDeclare(queue: RespQueueName,
                                        durable: true,
                                        exclusive: false,
                                        autoDelete: false,
                                        arguments: null);
                                    // Guaranteed delivery
                                    // Marking messages as persistent doesn't fully guarantee that a message won't be lost. 
                                    // Although it tells RabbitMQ to save the message to disk, there is still a short time window when RabbitMQ 
                                    // has accepted a message and hasn't saved it yet. 
                                    // Also, RabbitMQ doesn't do fsync(2) for every message -- it may be just saved to cache and not really written to the disk. 
                                    // The persistence guarantees aren't strong, but it's more than enough for our simple task queue. 
                                    // If you need a stronger guarantee then you can use publisher confirms.
                                    // https://www.rabbitmq.com/confirms.html
                                    var properties = channel.CreateBasicProperties();
                                    //properties.Persistent = true;
                                    ReceiveWork(channel, properties, RespQueueName);
                                }
                            }
                        }
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                    }
                }
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                //Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                //SR_Class.fn_Save_UserLogging_Detail("error2 in getresponse", "0", "14024", "No Session");
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_ZEEPAY_RABBIT", Err_Date2));
                //SR_Class.fn_Save_UserLogging_Detail("inside getzeepaytranresponse", "0", "14460", "No Session");

                SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
            }
        }

        string getBICFI_Name(string BICFI)
        {
            string result = "";
            try
            {
                DataTable dt = new DataTable();
                string sqlStr = string.Format("SELECT top 1 Bank_Name_C from  tbl_Agent_Banks WHERE Bank_Swift_Code_C= '{0}'", BICFI);
                dt = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["Bank_Name_C"].ToString();
                }

            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("error in bicfiname", "0", "13837", "No Session");
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_ZEEPAY_RABBIT", Err_Date2));
            }
            return result;
        }
        string getBICFI_ByCode(string code)
        {
            string result = "";
            try
            {
                DataTable dt  = new DataTable();
                string sqlStr = string.Format("SELECT top 1 Bank_Swift_Code_C from  tbl_Agent_Banks WHERE Default_Bank_Code_C= '{0}'", code);
                dt = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["Bank_Swift_Code_C"].ToString();
                }

            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("error in bicfiname", "0", "13837", "No Session");
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_ZEEPAY_RABBIT", Err_Date2));
            }
            return result;
        }

        string getBICFI_Name_ByCode(string code)
        {
            string result = "";
            try
            {
                DataTable dt = new DataTable();
                string sqlStr = string.Format("SELECT top 1 Bank_Name_C from  tbl_Agent_Banks WHERE Default_Bank_Code_C= '{0}'", code);
                dt = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                if (dt.Rows.Count > 0)
                {
                    result = dt.Rows[0]["Bank_Name_C"].ToString();
                }

            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("error in bicfiname", "0", "13837", "No Session");
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_ZEEPAY_RABBIT", Err_Date2));
            }
            return result;
        }

        public void Parse_and_Import_SFI_File()
        {
            string SQLStr         = "";
            string Dest_Table     = "";
            string trxnProduct_ID = "Parse_and_Import_SFI_File";
            try
            {
                string Batch_Num      = "";
                string Instruction_ID = "";
                string Transfer_Type  = "";
                string Pymnt_Type     = "";
                string Value_Date     = "";
                string Post_Date      = "";
                string Trn_Curr       = "";
                string Trn_Amnt_TMP   = "";
                double Trn_Amnt       = 0.0;
                string Trn_ID         = "";
                string Trn_Desc       = "'";
                string Trn_Type       = "";
                string Act_Name       = "";
                string Act_Adrr       = "";
                string Act_Str        = "";
                string Act_Pst_Code   = "";
                string Act_Town       = "";
                string Act_Dvsn       = "";
                string Act_Cntry      = "";
                string Acct_Num       = "";
                string Acct_Branch    = "";
                int    Trn_ID_Len     = 1;
                string Benef_Swift_Code_C = "";
                string Acct_Num_DR_C      = "";
                string DR_CR          = "";
                string Batch1         = "";
                string Batch2         = "";
                string Batch3         = "";
                string Curr_File      = "";
                string Benef_Bank_C   = "";
                string Benef_Bank_Name   = "";
                bool   Benf_Bank_Status  = true;
                string Ref1 = "";
                string Ref2 = "";
                string Ref3 = "";
                string File_Extension = "";
                string sGuid          = "";
                string Trn_Amnt1      = "";
                string sub_acc        = "";
                string sub_acc_1      = "";
                string sub_acc_2      = "";
                string Interim_acc    = "";
                string Interim_acc_1  = "";
                string Interim_acc_2  = "";
                string random_num     = "";
                string Interim_Ref    = "";
                string sub_ref1       = "";
                string sub_ref2       = "";
                string Source         = "";
                string BancAbc_Branch   = "";
                string Benef_Bank_Code  = "";
                double BFIS_Threshold   = 0;
                string barclays_acc_sep = "";
                string Bank_Prefix      = "";

                // Check if this Node is allowed to Import the SFI File. Node Configuration is Part of eVerify Suit
                string SQL_Str = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, trxnProduct_ID);
                if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
                {
                    // Now Check if the Tread is free for this Function to avoid duplications.
                    string ForcedTiming = string.Format("[dbo].[usp_CheckThreadStatus] @Thread_ID = '{0}', @ForceThreadTime = '{1}' ", trxnProduct_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Forced_ThreadMinutes_MobilePosting.ToString());
                    string Thread_Busy  = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), ForcedTiming).Rows[0]["Thread_Response"].ToString().Trim();
                    if (Thread_Busy == "OK FOR POSTING")
                    {
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 1, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"].ToString(), SQLStr);

                        string ImportTime = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), "SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25) + ' ' +  CONVERT(VARCHAR(8),CURRENT_TIMESTAMP,108) as PostTime").Rows[0][0].ToString();
                        Random random     = new Random();

                        string RTGS_Ref         = "";
                        string sErrorString     = ""; // Passed back
                        string Bck_Up_File      = "";
                        string Bck_Up_File_Name = "";
                        double DLL_Status       = 0;
                        string File_extension   = "";

                        int PosSep;
                        //SR_Class.fn_Save_UserLogging_Detail("inside import file", "0", "13008", "No Session");
                        string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.SFI_InDirectory;
                        if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                        {
                            In_Path += System.IO.Path.DirectorySeparatorChar;
                        }
                        string Out_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.SFI_OutDirectory;
                        if (!Out_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                        {
                            Out_Path += System.IO.Path.DirectorySeparatorChar;
                        }
                        string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.SFI_BackupDirectory;
                        if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                        {
                            Back_Path += System.IO.Path.DirectorySeparatorChar;
                        }

                        string[] FileList = Directory.GetFiles(In_Path);

                        int File_Number = 0;
                        foreach (var FileName in FileList)
                        {
                            //int PosSep;
                            PosSep    = FileName.LastIndexOf(@"\");
                            Curr_File = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

                            Bck_Up_File_Name = Curr_File;
                            Bck_Up_File      = Back_Path + Bck_Up_File_Name;

                            // Check if Same File Name Exists in Backup Directory
                            if (System.IO.File.Exists(Bck_Up_File) == true)
                            {
                                //PosSep = FileName.LastIndexOf(".");
                                Bck_Up_File_Name = string.Format("{0}{1:ddMMyyyy.HHmmmss}{2}", Curr_File, DateTime.Now, File_Number.ToString());
                                Bck_Up_File      = Back_Path + Bck_Up_File_Name;
                            }
                            //int PosSep;
                            //PosSep = FileName.LastIndexOf(@"\");
                            //Curr_File = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

                            File_Extension = Curr_File.Substring(Curr_File.Length - 3, 3);

                            if (File_Extension == "sfi")
                            {

                                Batch1 = Curr_File.Substring(0, 5).Trim();   // bank sortcode portion

                                // If Batch1 = "_ZWL_" Then
                                // Batch1 = "32100"
                                // End If

                                //Batch1 = Regex.Replace(Batch1, @"\s+", " ");
                                Batch2      = Curr_File.Substring(10, 14).Trim(); // date and time portion

                                Bank_Prefix = Batch1.Substring(0, 2);

                                Batch_Num   = Batch1 + Batch2;

                                //System.Data.DataTable Sys_Tbl = new System.Data.DataTable();

                                System.Data.DataTable Curr_Rec = new System.Data.DataTable();
                                //System.Data.DataTable ChkRec = new System.Data.DataTable();
                            }

                            // Check for Duplicates and Save in Duplicates File
                            Dest_Table = "tbl_NBOL_TPP";

                            //if (m_databaseClass.getDataSet("SELECT top 1 File_Name_C FROM tbl_NBOL_TPP WITH (NOLOCK) Where File_Name_C = '" + In_File_Nm + "'").Tables(0).Rows.Count > 0)
                            //   Dest_Table = "tbl_NBOL_TPP_Duplicates";
                            ////if (m_databaseClass.getDataSet("SELECT top 1 File_Name_C FROM tbl_NBOL_TPP_Hist WITH (NOLOCK) Where File_Name_C = '" + In_File_Nm + "'").Tables(0).Rows.Count > 0)
                            //    Dest_Table = "tbl_NBOL_TPP_Duplicates";

                            string TextLine         = "";
                            string TextLine_Indexed = "";
                            Hashtable insertHash = new Hashtable();
                            {
                                var withBlock = insertHash;
                                System.IO.StreamReader objReader = new System.IO.StreamReader(FileName);
                                while (objReader.Peek() != -1)
                                {
                                    TextLine = objReader.ReadLine() + Environment.NewLine;

                                    if (TextLine.Trim() != "")
                                    {
                                        //TextLine_Indexed = TextLine.Replace(Chr(28), "~|#").Trim();
                                        Trn_Desc = "";
                                        Trn_Amnt_TMP = "";
                                        Trn_Amnt = 0;
                                        Trn_Curr = "";
                                        Act_Name = "";
                                        Act_Cntry = "";
                                        Act_Adrr = "";
                                        Act_Str = "";
                                        Act_Pst_Code = "";
                                        BancAbc_Branch = "";
                                        Act_Town = "";
                                        Act_Dvsn = "";
                                        Act_Cntry = "";
                                        Acct_Num = "";
                                        Acct_Branch = "";
                                        Source = "";
                                        Benef_Swift_Code_C = "";
                                        DR_CR = "";
                                        Ref1 = "";
                                        Ref2 = "";
                                        Ref3 = "";
                                        sGuid = "";
                                        Trn_Amnt1 = "";
                                        sub_acc = "";
                                        sub_acc_1 = "";
                                        Interim_acc = "";
                                        Interim_acc_1 = "";
                                        Interim_Ref = "";
                                        sub_ref1 = "";
                                        sub_ref2 = "";
                                        barclays_acc_sep = "";
                                        Pymnt_Type = "";

                                        double fieldLen = TextLine.Length;
                                        if (1 == 1)
                                        {
                                            Trn_Type = TextLine.Substring(0, 3);
                                            if (Trn_Type == "UHL")
                                            {
                                                Trn_ID = "0";
                                                Post_Date = (TextLine.Substring(3, 8).Trim());
                                            }

                                            if (Trn_Type == "PAY")
                                            {
                                                Instruction_ID = Batch_Num;

                                                // Trn_ID = TextLine.Substring(2, 3).Trim.Replace(Chr(28), "")  ' Define trn_id as integer and increment until end of file
                                                // Trn_ID_Len = Trn_ID.Trim.Length
                                                Trn_Desc = TextLine.Substring(117, 15).Trim();
                                                //Trn_Desc = Regex.Replace(Trn_Desc, @"\s+", " ");
                                                Trn_Amnt_TMP = TextLine.Substring(162, 24).Trim();
                                                Trn_Amnt_TMP = string.Format("{0}.{1}", Trn_Amnt_TMP.Substring(0, 22), Trn_Amnt_TMP.Substring(22, 2));
                                                Trn_Amnt = double.Parse(Trn_Amnt_TMP);
                                                Benef_Swift_Code_C = "BFIS";

                                                Act_Name = TextLine.Substring(150, 30).Trim();
                                                //Act_Name = Regex.Replace(Act_Name, @"\s+", " ");
                                                //random_num = random.Next(100000, 99999999);
                                                sGuid = System.Guid.NewGuid().ToString();
                                                DR_CR = "C";

                                                Acct_Branch = TextLine.Substring(3, 7).Trim();
                                                // BancAbc_Branch = TextLine.Substring(7, 3).Trim.Replace(Chr(28), "")
                                                Acct_Num_DR_C = TextLine.Substring(68, 20).Trim();
                                                Acct_Num_DR_C = Acct_Num_DR_C.TrimStart('0');

                                                barclays_acc_sep = TextLine.Substring(19, 1).Trim();


                                                Ref1 = TextLine.Substring(132, 30).Trim();

                                                Interim_Ref = TextLine.Substring(202, 30);
                                                sub_ref1 = Interim_Ref.Substring(0, 6);
                                                sub_ref2 = Interim_Ref.Substring(0, 17);
                                                Ref2 = Interim_Ref.Substring(0, 8);

                                                if (sub_ref1 == "PAYEX-")
                                                    Ref2 = Interim_Ref.Substring(6, 8);

                                                if (sub_ref2 == "PAYEX Payments - ")
                                                    Ref2 = Interim_Ref.Substring(17, 8);
                                                // PAYEX -36367065023711    PAYEX-
                                                // PAYEX Payments - 3633400101925

                                                Ref3 = TextLine.Substring(262, 30).Trim();

                                                // Manage Account Numbers Pano, by Bank. its gonna be long code, but lets do it the old fashioned way, then create an object to handle this later on.
                                                if (Bank_Prefix == "02")
                                                {
                                                    Acct_Num = TextLine.Substring(19, 11);
                                                    // sub_acc = Acct_Num.Substring(13, 7)

                                                    if (Acct_Num.Length < 11)
                                                        Acct_Num = "tich";
                                                }
                                                if (Bank_Prefix == "04")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(7, 13);
                                                }
                                                if (Bank_Prefix == "05")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(7, 13);
                                                }
                                                if (Bank_Prefix == "06")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Interim_acc = Acct_Num.Substring(4, 16);    // 16 digit acc number
                                                    Interim_acc_1 = Acct_Num.Substring(8, 12); // 12 digit acc number
                                                    Interim_acc_2 = Acct_Num.Substring(6, 14); // 14 digit acc number
                                                    sub_acc = Interim_acc.Substring(0, 6);
                                                    sub_acc_1 = Interim_acc_1.Substring(0, 3);

                                                    Acct_Num = Acct_Num.Substring(6, 14);
                                                    if (sub_acc == "585997")
                                                        Acct_Num = Interim_acc;
                                                    if (sub_acc_1 == "263")
                                                        Acct_Num = Interim_acc_1;

                                                    // If sub_acc_1 = "970" Then
                                                    // Acct_Num = Interim_acc_1
                                                    // End If

                                                    if (Acct_Num.Length == 16)
                                                    {
                                                        Pymnt_Type = "BFIS";
                                                        Benef_Swift_Code_C = "BFIS";
                                                    }
                                                }

                                                if (Bank_Prefix == "08")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Interim_acc = Acct_Num.Substring(7, 13);
                                                    Interim_acc_1 = Acct_Num.Substring(4, 16);
                                                    sub_acc = Interim_acc_1.Substring(0, 6);
                                                    Acct_Num = Interim_acc;
                                                    if (sub_acc == "601704")
                                                        Acct_Num = Interim_acc_1;
                                                }

                                                if (Bank_Prefix == "09")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(7, 13);
                                                }

                                                if (Bank_Prefix == "10")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Interim_acc = Acct_Num.Substring(8, 12);
                                                    Interim_acc_1 = Acct_Num.Substring(4, 16);
                                                    sub_acc = Interim_acc_1.Substring(0, 6);
                                                    Acct_Num = Interim_acc;
                                                    if (sub_acc == "504875")
                                                        Acct_Num = Interim_acc_1;
                                                }

                                                if (Bank_Prefix == "11")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(7, 13);
                                                }

                                                if (Bank_Prefix == "18")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.TrimStart('0');
                                                }

                                                if (Bank_Prefix == "20")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(10, 10);
                                                }

                                                if (Bank_Prefix == "21")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(6, 14);
                                                }

                                                if (Bank_Prefix == "23")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(4, 16);
                                                }


                                                if (Bank_Prefix == "24")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Interim_acc = Acct_Num.Substring(10, 10);
                                                    Interim_acc_1 = Acct_Num.Substring(4, 16);
                                                    sub_acc = Interim_acc_1.Substring(0, 6);
                                                    Acct_Num = Interim_acc;
                                                    if (sub_acc == "588892")
                                                        Acct_Num = Interim_acc_1;
                                                }

                                                if (Bank_Prefix == "25")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Interim_acc = Acct_Num.Substring(8, 12);
                                                    Interim_acc_1 = Acct_Num.Substring(4, 16);
                                                    sub_acc = Interim_acc_1.Substring(0, 6);
                                                    Acct_Num = Interim_acc;
                                                    if (sub_acc == "605872")
                                                        Acct_Num = Interim_acc_1;
                                                    if (sub_acc == "604845")
                                                        Acct_Num = Interim_acc_1;
                                                }

                                                if (Bank_Prefix == "26")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(4, 16);
                                                }

                                                if (Bank_Prefix == "31")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(6, 14);
                                                }

                                                if (Bank_Prefix == "32")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(7, 13);
                                                }

                                                if (Bank_Prefix == "33")
                                                {
                                                    Acct_Num = TextLine.Substring(10, 20).Trim();
                                                    Acct_Num = Acct_Num.Substring(5, 15);
                                                }
                                            }



                                            // Create entries for the suspense and settlement accounts muno umu
                                            // Find out what is required for posting to Finacle and populate for UHL
                                            if (Trn_Type == "UTL")
                                            {
                                                Trn_Amnt_TMP  = TextLine.Substring(30, 24).Trim();
                                                Trn_Amnt_TMP  = string.Format("{0}.{1}", Trn_Amnt_TMP.Substring(0, 22), Trn_Amnt_TMP.Substring(22, 2));
                                                Trn_Amnt      = double.Parse(Trn_Amnt_TMP);
                                                DR_CR         = "D";
                                                Act_Name      = "Settlement Account";
                                                Trn_Desc      = string.Format(" Settlement for file '{0}'", Curr_File);
                                                Acct_Num_DR_C = "8142819000000";
                                                Acct_Num      = "8145108061000";
                                                Pymnt_Type    = "FINACLE";
                                                //random_num = random.Next(10000, 9999999);
                                                sGuid = System.Guid.NewGuid().ToString();
                                            }

                                            withBlock.Clear();
                                            withBlock.Add("File_Name_C", FileName);
                                            withBlock.Add("Batch_Num_C", Batch_Num);
                                            withBlock.Add("Instr_ID_C", sGuid);
                                            withBlock.Add("Transfer_Type_C", Transfer_Type);
                                            withBlock.Add("Pymnt_Type_C", Pymnt_Type);
                                            withBlock.Add("Value_Date_D", Post_Date);
                                            withBlock.Add("Post_Date_D", Post_Date);
                                            withBlock.Add("File_Date_D", Post_Date);
                                            ImportTime = string.Format("{0:yyyy/MM/dd HH:mmm:ss}", DateTime.Now);
                                            withBlock.Add("Import_Date_D", ImportTime);
                                            withBlock.Add("Trn_Curr_C", Trn_Curr);
                                            withBlock.Add("Trn_Amnt_N", Trn_Amnt);
                                            withBlock.Add("Trn_ID_C", Trn_ID);
                                            withBlock.Add("Trn_Type_C", DR_CR);
                                            withBlock.Add("Trn_Desc_C", Trn_Desc);
                                            withBlock.Add("Act_Name_C", Act_Name);
                                            withBlock.Add("Act_Adrr_C", Ref1);
                                            withBlock.Add("Act_Str_C", Ref2);
                                            withBlock.Add("Act_Pst_Code_C", Ref3);
                                            withBlock.Add("Act_Town_C", Act_Town);
                                            withBlock.Add("Act_Dvsn_C", Act_Dvsn);
                                            withBlock.Add("Act_Cntry_C", sGuid);
                                            withBlock.Add("Acct_Num_C", Acct_Num);
                                            withBlock.Add("Acct_Num_DR_C", Acct_Num_DR_C);
                                            withBlock.Add("Acct_Branch_C", Acct_Branch);
                                            withBlock.Add("Trn_Posting_Type_C", "4");
                                            withBlock.Add("Benef_Bank_C", Benef_Bank_C);
                                            withBlock.Add("Acct_Branch_IsNum_YN_B", 1);
                                            withBlock.Add("Posted_YN_B", "0");
                                            withBlock.Add("Batch_Approved_YN_B", "0");
                                            withBlock.Add("Run_No_N", "0");
                                            withBlock.Add("ZETTS_SerNum_N", "0");
                                            withBlock.Add("Charges_Amnt_N", "0");
                                            withBlock.Add("Gvt_Levy_Amnt_N", "0");
                                            withBlock.Add("Benef_Swift_Code_C", Benef_Swift_Code_C);
                                            withBlock.Add("Response_Sent_YN_B", "0");
                                            withBlock.Add("Source_C", "SFI");
                                            withBlock.Add("RTGS_InwardRef_C", Benef_Bank_Name);
                                            if ((Trn_Type == "PAY") | (Trn_Type == "UTL"))
                                            SqlHelper.insertSQL(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), Dest_Table, insertHash);
                                        }
                                    }
                                }

                                //End If

                                //File_Number = File_Number + 1
                                //SQLStr = string.Format("Update tbl_nbol_tpp set Trn_Amnt_N =  (SELECT sum(Trn_Amnt_N) FROM tbl_NBOL_TPP WHERE Pymnt_Type_C = 'SFI' AND File_Name_C ='{0}') where Pymnt_Type_C = 'FINACLE' AND File_Name_C = '{1}'", FileName, FileName);
                                // m_databaseClass.exec(SQLStr);
                                objReader.Close();
                                objReader.Dispose();
                                // Now Copy the File to the Backup Directory and then Delete it
                                System.IO.File.Copy(FileName, Bck_Up_File, overwrite: true);
                                System.IO.File.Delete(FileName);
                                //System.IO.File.Move(FileName, Bck_Up_File);
                            }
                        }
                        SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                    }
                }
            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("inside import file", "0", "13420", "No Session");

                SQLStr = string.Format("UPDATE tbl_ThreadManagement SET ThreadInUse_YN = 0, ThreadTime = CURRENT_TIMESTAMP WHERE Thread_ID_C = '{0}'", trxnProduct_ID);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
            }
        }
        //const string QueueName = "test5";
        private static void SendWork(string work, IModel channel, IBasicProperties properties, string NBOL_TPP_Inst_No, string Batch_Num_C, string Processing_ID, string QueueName, bool IsLocalQueue, string ZEEPAYPath)
        {
            //SR_Class.fn_Save_UserLogging_Detail("send work", "0", "13427", "");
            try
            {
                var body = Encoding.UTF8.GetBytes(work);
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                {
                    //SR_Class.fn_Save_UserLogging_Detail("SendWork", "0", "13433", QueueName);
                    channel.BasicPublish(exchange: "",
                                    routingKey: QueueName,
                                    basicProperties: properties,
                                    body: body);
                }
                else
                {
                    //SR_Class.fn_Save_UserLogging_Detail("SendWork", "0", "13441", QueueName);
                    channel.BasicPublish(exchange: "",
                                    routingKey: QueueName,
                                    basicProperties: properties,
                                    body: body);

                }

                string name = "ZeepayRequest" + "_" + Processing_ID + ".xml";
                ZEEPAYPath += Path.DirectorySeparatorChar.ToString();
                ZEEPAYPath = ZEEPAYPath + Processing_ID + ".xml";
                File.WriteAllText(ZEEPAYPath, work);

                //SR_Class.fn_Save_UserLogging_Detail("SendWork after", "0", "13441", QueueName);
                Hashtable m_hashtable = new Hashtable();
                m_hashtable.Add("XML_Date_D", string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                m_hashtable.Add("XML_String_C", ZEEPAYPath);
                m_hashtable.Add("XML_Ref_C", NBOL_TPP_Inst_No);
                m_hashtable.Add("XML_Type_C", "Zeepay_Request");
                m_hashtable.Add("Source_ID_C", Batch_Num_C);
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), "tbl_XML_Log", m_hashtable);

                string sqlStr = string.Format("UPDATE  tbl_NBOL_TPP SET Posted_YN_B=1,TransactionStatus=1 where Processing_ID='{0}'", Processing_ID);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                //sqlStr = string.Format("UPDATE tbl_NBOL_TPP SET RECORD_COUNT = RECORD_COUNT + 1  WHERE Batch_Num_C='{0}'", Batch_Num_C);
                //SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), sqlStr);
                //SR_Class.fn_Save_UserLogging_Detail("after update record", "0", "13569", NBOL_TPP_Inst_No);

            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "SendWork", Err_Date2));
            }

        }


        private static void ReceiveWork(IModel channel, IBasicProperties properties,string RespQueueName)
        {
            string OrgnlMsgId = "";
            string MsgId = "";
            string GrpSts = "";
            string OrgnlMsgNmId = "";
            string OrgnlNbOfTxs = "";
            string OrgnlCtrlSum = "";
            string SqlStr = "";
            string xmlStr = "";
            string XML_Inst_No = "";
            string Prtry = "";
            string responseString = "";
            string endToEndID = "";
            DataTable Data_Table = new DataTable();
            DataTable xmlResp = new DataTable();
            try
            {
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.IsLocalQueue == true)
                {
                    //QueueingBasicConsumer consumer = new QueueingBasicConsumer(channel);
                    //String consumerTag = channel.BasicConsume(e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.LocalhostQueue, false, consumer);
                    try
                    {
                        SqlStr = "SELECT top 1 XML_String_C,XML_Inst_No FROM  tbl_XML_log WHERE zeepayRespStep=0 and XML_Type_C='Zeepay_Response' order by  1 desc";
                        xmlResp = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SqlStr);
                        if (xmlResp.Rows.Count > 0)
                        {
                            xmlStr = xmlResp.Rows[0]["XML_String_C"].ToString();
                            XML_Inst_No = xmlResp.Rows[0]["XML_Inst_No"].ToString();
                            MsgId = xmlResp.Rows[0]["msgID"].ToString();
                            try
                            {
                                responseString = Regex.Replace(xmlStr, @"\t|\n|\r|(\\n)", "");
                                var serializer = new XmlSerializer(typeof(Document));
                                Document result;

                                using (TextReader reader = new StringReader(responseString))
                                {
                                    result = (Document)serializer.Deserialize(reader);
                                    var transfer = result.CstmrPmtStsRpt;

                                    var checkOrgnlGrpInfAndSts = transfer.OrgnlGrpInfAndSts;
                                    OrgnlMsgId = checkOrgnlGrpInfAndSts.OrgnlMsgId.ToString();
                                    OrgnlMsgNmId = checkOrgnlGrpInfAndSts.OrgnlMsgNmId.ToString();
                                    OrgnlNbOfTxs = checkOrgnlGrpInfAndSts.OrgnlNbOfTxs.ToString();
                                    OrgnlCtrlSum = checkOrgnlGrpInfAndSts.OrgnlCtrlSum.ToString();
                                    GrpSts = checkOrgnlGrpInfAndSts.GrpSts.ToString();
                                    endToEndID = transfer.OrgnlPmtInfAndSts.TxInfAndSts.AcctSvcrRef.ToString();
                                    if (GrpSts != "ACPT")
                                    {
                                        Prtry = transfer.OrgnlPmtInfAndSts.TxInfAndSts.StsRsnInf.Rsn.Prtry.ToString();
                                    }
                                }
                                if (GrpSts == "ACPT")
                                {
                                   // SR_Class.fn_Save_UserLogging_Detail("receivework", "0", "13699", OrgnlMsgId);
                                    SqlStr = string.Format("update tbl_NBOL_TPP set TransactionStatus=2,TransactionRespCode='{0}' where MsgId ='{1}'", GrpSts, OrgnlMsgId);
                                }
                                else
                                {
                                    //SR_Class.fn_Save_UserLogging_Detail("receivework", "0", "13704", "Fail");
                                    SqlStr = string.Format("update tbl_NBOL_TPP set TransactionStatus=3,TransactionRespCode='{0}',respMsg='{1}' where MsgId ='{2}'", GrpSts, Prtry, OrgnlMsgId);
                                }
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SqlStr);

                                //update xmllog
                                SqlStr = "";
                                SqlStr = string.Format("update  tbl_XML_log set  zeepayRespStep=1,msgID='{0}' where XML_Inst_No ='{1}'", OrgnlMsgId, XML_Inst_No);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SqlStr);

                            }
                            catch (Exception ex)
                            {
                                //SR_Class.fn_Save_UserLogging_Detail("receiveResp", "GrpSts", "13715", "ReadingRspError");
                                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                                Utilities.LogToFile(Err_String, true);
                                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "SendWork", Err_Date2));
                            }
                        } 
                    }
                    catch (Exception ex)
                    {
                        // The consumer was removed, either through
                        // channel or connection closure, or through the
                        // action of IModel.BasicCancel().
                        //break;
                    }
                }
                else
                {
                    QueueingBasicConsumer consumer = new QueueingBasicConsumer(channel);                    
                    String consumerTag = channel.BasicConsume(RespQueueName, false, consumer);
                    try
                    {
                        RabbitMQ.Client.Events.BasicDeliverEventArgs e = (RabbitMQ.Client.Events.BasicDeliverEventArgs)consumer.Queue.Dequeue();
                        IBasicProperties props = e.BasicProperties;
                        byte[] body = e.Body;
                        // ... process the message

                        XmlDocument doc = new XmlDocument();
                        string xml = Encoding.UTF8.GetString(body);
                        // when it has to be cancelled
                        channel.BasicAck(e.DeliveryTag, false);
                        //log response
                        Hashtable m_hashtable = new Hashtable();
                        m_hashtable.Add("XML_Date_D", string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                        m_hashtable.Add("XML_String_C", xml);
                        m_hashtable.Add("XML_Ref_C", "1");
                        m_hashtable.Add("XML_Type_C", "Zeepay_Response");
                        m_hashtable.Add("Source_ID_C", "0");
                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), "tbl_XML_Log", m_hashtable);
                        // this consumer tag identifies the subscription
                        //doc.LoadXml(xml);
                        // this consumer tag identifies the subscription
                        SqlStr = "SELECT top 1 XML_String_C,XML_Inst_No FROM  tbl_XML_log WHERE zeepayRespStep=0 and XML_Type_C='Zeepay_Response' order by 1 desc";
                        xmlResp = SqlHelper.GetTable(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SqlStr);
                        if (xmlResp.Rows.Count > 0)
                        {
                            xmlStr = xmlResp.Rows[0]["XML_String_C"].ToString();
                            XML_Inst_No = xmlResp.Rows[0]["XML_Inst_No"].ToString();
                            try
                            {
                               // SR_Class.fn_Save_UserLogging_Detail("receivework", "0", "13633", "");

                                responseString = Regex.Replace(xmlStr, @"\t|\n|\r|(\\n)", "");
                                var serializer = new XmlSerializer(typeof(Document));
                                Document result;

                                using (TextReader reader = new StringReader(responseString))
                                {
                                    result = (Document)serializer.Deserialize(reader);
                                    var transfer = result.CstmrPmtStsRpt;

                                    var checkOrgnlGrpInfAndSts = transfer.OrgnlGrpInfAndSts;
                                    OrgnlMsgId = checkOrgnlGrpInfAndSts.OrgnlMsgId.ToString();
                                    OrgnlMsgNmId = checkOrgnlGrpInfAndSts.OrgnlMsgNmId.ToString();
                                    OrgnlNbOfTxs = checkOrgnlGrpInfAndSts.OrgnlNbOfTxs.ToString();
                                    OrgnlCtrlSum = checkOrgnlGrpInfAndSts.OrgnlCtrlSum.ToString();
                                    GrpSts = checkOrgnlGrpInfAndSts.GrpSts.ToString();
                                    endToEndID = transfer.OrgnlPmtInfAndSts.TxInfAndSts.AcctSvcrRef.ToString();
                                    if (GrpSts != "ACPT")
                                    {
                                        Prtry = transfer.OrgnlPmtInfAndSts.TxInfAndSts.StsRsnInf.Rsn.Prtry.ToString();
                                    }
                                }

                                //SR_Class.fn_Save_UserLogging_Detail("receiveResp", "GrpSts", "13696", GrpSts);
                                if (GrpSts == "ACPT")
                                {
                                    //SR_Class.fn_Save_UserLogging_Detail("receivework", "0", "13699", OrgnlMsgId);
                                    SqlStr = string.Format("update tbl_NBOL_TPP set TransactionStatus=2,TransactionRespCode='{0}',endToEndID='{1}' where MsgId ='{2}'", GrpSts, endToEndID, OrgnlMsgId);
                                }
                                else
                                {
                                    //SR_Class.fn_Save_UserLogging_Detail("receivework", "0", "13704", "Fail");
                                    SqlStr = string.Format("update tbl_NBOL_TPP set TransactionStatus=3,TransactionRespCode='{0}',respMsg='{1}',endToEndID='{2}' where MsgId ='{3}'", GrpSts, Prtry, endToEndID, OrgnlMsgId);
                                }
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SqlStr);

                                //update xmllog
                                SqlStr = "";
                                SqlStr = string.Format("update  tbl_XML_log set  zeepayRespStep=1,msgID='{0}' where  XML_Inst_No ='{1}'", OrgnlMsgId, XML_Inst_No);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), SqlStr);

                            }
                            catch (Exception ex)
                            {
                                //SR_Class.fn_Save_UserLogging_Detail("receiveResp", "0", "13715", "ReadingRspError");
                                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                                Utilities.LogToFile(Err_String, true);
                                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "SendWork", Err_Date2));
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        //SR_Class.fn_Save_UserLogging_Detail("error inside receivework", "0", "13792", "No Session");
                        string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                        Utilities.LogToFile(Err_String, true);
                        if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                        string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "ReceiveWork", Err_Date2));

                    }
                }
            }
            catch (Exception ex)
            {
                //SR_Class.fn_Save_UserLogging_Detail("error inside receivework", "0", "13805", "No Session");
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["EPayments_DB"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "ReceiveWork", Err_Date2));
            }
        }

                     
        [XmlRoot(ElementName = "GrpHdr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class GrpHdr
        {
            [XmlElement(ElementName = "MsgId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string MsgId { get; set; }
            [XmlElement(ElementName = "CreDtTm", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string CreDtTm { get; set; }
        }

        [XmlRoot(ElementName = "Rsn", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Rsn
        {
            [XmlElement(ElementName = "Prtry", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string Prtry { get; set; }
            [XmlElement(ElementName = "Cd", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string Cd { get; set; }
        }

        [XmlRoot(ElementName = "StsRsnInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class StsRsnInf
        {
            [XmlElement(ElementName = "Rsn", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Rsn Rsn { get; set; }
        }

        [XmlRoot(ElementName = "OrgnlGrpInfAndSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class OrgnlGrpInfAndSts
        {
            [XmlElement(ElementName = "OrgnlMsgId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlMsgId { get; set; }

            [XmlElement(ElementName = "OrgnlMsgNmId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlMsgNmId { get; set; }
            [XmlElement(ElementName = "OrgnlNbOfTxs", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlNbOfTxs { get; set; }
            [XmlElement(ElementName = "OrgnlCtrlSum", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlCtrlSum { get; set; }
            [XmlElement(ElementName = "GrpSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string GrpSts { get; set; }
            [XmlElement(ElementName = "StsRsnInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]

            public StsRsnInf StsRsnInf { get; set; }
        }

        [XmlRoot(ElementName = "InstdAmt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class InstdAmt
        {
            [XmlAttribute(AttributeName = "Ccy")]
            public string Ccy { get; set; }
            [XmlText]
            public string Text { get; set; }
        }

        [XmlRoot(ElementName = "Amt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Amt
        {
            [XmlElement(ElementName = "InstdAmt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public InstdAmt InstdAmt { get; set; }
        }

        [XmlRoot(ElementName = "Othr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Othr
        {
            [XmlElement(ElementName = "Id", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string Id { get; set; }
        }

        [XmlRoot(ElementName = "PrvtId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class PrvtId
        {
            [XmlElement(ElementName = "Othr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Othr Othr { get; set; }
        }

        [XmlRoot(ElementName = "Id", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Id
        {
            [XmlElement(ElementName = "PrvtId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public PrvtId PrvtId { get; set; }
            [XmlElement(ElementName = "IBAN", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string IBAN { get; set; }
        }

        [XmlRoot(ElementName = "CdtrSchmeId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class CdtrSchmeId
        {
            [XmlElement(ElementName = "Id", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Id Id { get; set; }
        }

        [XmlRoot(ElementName = "PmtTpInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class PmtTpInf
        {
            [XmlElement(ElementName = "SeqTp", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string SeqTp { get; set; }
        }

        [XmlRoot(ElementName = "MndtRltdInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class MndtRltdInf
        {
            [XmlElement(ElementName = "MndtId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string MndtId { get; set; }
            [XmlElement(ElementName = "DtOfSgntr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string DtOfSgntr { get; set; }
            [XmlElement(ElementName = "AmdmntInd", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string AmdmntInd { get; set; }
        }

        [XmlRoot(ElementName = "Dbtr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Dbtr
        {
            [XmlElement(ElementName = "Nm", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string Nm { get; set; }
        }

        [XmlRoot(ElementName = "DbtrAcct", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class DbtrAcct
        {
            [XmlElement(ElementName = "Id", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Id Id { get; set; }
        }

        [XmlRoot(ElementName = "FinInstnId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class FinInstnId
        {
            [XmlElement(ElementName = "BIC", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string BIC { get; set; }
        }

        [XmlRoot(ElementName = "DbtrAgt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class DbtrAgt
        {
            [XmlElement(ElementName = "FinInstnId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public FinInstnId FinInstnId { get; set; }
        }

        [XmlRoot(ElementName = "CdtrAgt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class CdtrAgt
        {
            [XmlElement(ElementName = "FinInstnId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public FinInstnId FinInstnId { get; set; }
        }

        [XmlRoot(ElementName = "Cdtr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Cdtr
        {
            [XmlElement(ElementName = "Nm", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string Nm { get; set; }
        }

        [XmlRoot(ElementName = "CdtrAcct", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class CdtrAcct
        {
            [XmlElement(ElementName = "Id", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Id Id { get; set; }
        }

        [XmlRoot(ElementName = "OrgnlTxRef", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class OrgnlTxRef
        {
            [XmlElement(ElementName = "Amt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Amt Amt { get; set; }
            [XmlElement(ElementName = "ReqdColltnDt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string ReqdColltnDt { get; set; }
            [XmlElement(ElementName = "CdtrSchmeId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public CdtrSchmeId CdtrSchmeId { get; set; }
            [XmlElement(ElementName = "PmtTpInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public PmtTpInf PmtTpInf { get; set; }
            [XmlElement(ElementName = "PmtMtd", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string PmtMtd { get; set; }
            [XmlElement(ElementName = "MndtRltdInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public MndtRltdInf MndtRltdInf { get; set; }
            [XmlElement(ElementName = "Dbtr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Dbtr Dbtr { get; set; }
            [XmlElement(ElementName = "DbtrAcct", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public DbtrAcct DbtrAcct { get; set; }
            [XmlElement(ElementName = "DbtrAgt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public DbtrAgt DbtrAgt { get; set; }
            [XmlElement(ElementName = "CdtrAgt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public CdtrAgt CdtrAgt { get; set; }
            [XmlElement(ElementName = "Cdtr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public Cdtr Cdtr { get; set; }
            [XmlElement(ElementName = "CdtrAcct", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public CdtrAcct CdtrAcct { get; set; }
        }

        [XmlRoot(ElementName = "TxInfAndSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class TxInfAndSts
        {
            [XmlElement(ElementName = "StsId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string StsId { get; set; }
            [XmlElement(ElementName = "OrgnlEndToEndId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlEndToEndId { get; set; }
            [XmlElement(ElementName = "StsRsnInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public StsRsnInf StsRsnInf { get; set; }
            [XmlElement(ElementName = "AcctSvcrRef", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string AcctSvcrRef { get; set; }
            [XmlElement(ElementName = "OrgnlTxRef", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public OrgnlTxRef OrgnlTxRef { get; set; }
        }

        [XmlRoot(ElementName = "OrgnlPmtInfAndSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class OrgnlPmtInfAndSts
        {
            [XmlElement(ElementName = "OrgnlPmtInfId", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlPmtInfId { get; set; }
            [XmlElement(ElementName = "OrgnlNbOfTxs", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlNbOfTxs { get; set; }
            [XmlElement(ElementName = "OrgnlCtrlSum", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public string OrgnlCtrlSum { get; set; }
            [XmlElement(ElementName = "StsRsnInf", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public StsRsnInf StsRsnInf { get; set; }
            [XmlElement(ElementName = "TxInfAndSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public TxInfAndSts TxInfAndSts { get; set; }
        }

        [XmlRoot(ElementName = "CstmrPmtStsRpt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class CstmrPmtStsRpt
        {
            [XmlElement(ElementName = "GrpHdr", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public GrpHdr GrpHdr { get; set; }
            [XmlElement(ElementName = "OrgnlGrpInfAndSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public OrgnlGrpInfAndSts OrgnlGrpInfAndSts { get; set; }
            [XmlElement(ElementName = "OrgnlPmtInfAndSts", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public OrgnlPmtInfAndSts OrgnlPmtInfAndSts { get; set; }
        }

        [XmlRoot(ElementName = "Document", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
        public class Document
        {
            [XmlElement(ElementName = "CstmrPmtStsRpt", Namespace = "urn:iso:std:iso:20022:tech:xsd:pain.002.001.09")]
            public CstmrPmtStsRpt CstmrPmtStsRpt { get; set; }
            [XmlAttribute(AttributeName = "xsi", Namespace = "http://www.w3.org/2000/xmlns/")]
            public string Xsi { get; set; }
            [XmlAttribute(AttributeName = "xmlns")]
            public string Xmlns { get; set; }
        }


        string LogErrorXMLFile(string XML_Type_C, string XML_String_C, string XML_Ref_C, string Source_ID_C, string ChannelRefNum_C)
        {
            try
            {
                string storedProcedure = "usp_LogXML";
                List<SqlParameter> p   = new List<SqlParameter>();
                p.Add(new SqlParameter("@XML_Type_C"     , XML_Type_C));
                p.Add(new SqlParameter("@XML_String_C"   , XML_String_C));
                p.Add(new SqlParameter("@XML_Ref_C"      , XML_Ref_C));
                p.Add(new SqlParameter("@Source_ID_C"    , Source_ID_C));
                p.Add(new SqlParameter("@ChannelRefNum_C", ChannelRefNum_C));

                string result = SqlHelper.ExecuteScalar(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], storedProcedure, p.ToArray());
                if (string.IsNullOrEmpty(result)) return "-1";
                else return result;
            }
            catch (Exception exception)
            {
                // Handle database errors
                return "-1";
            }
            return "ERROR";
        }

        public XMLObject_cls fn_CreateZeePayInwardRevXML(string InXML, string InstNo, string RevReason, string RetryNo, string ChannelRef_Num, string DrAcctNo_New)
        {
            XMLObject_cls xMLObject  = new XMLObject_cls();
            string   NewXML          = InXML;
            string   MessageDateTime = Utilities.Get_TagValueWithEnd(NewXML, "<cre1:MessageDateTime>", "</cre1:MessageDateTime>",true);
            string   DrAcctNo        = Utilities.Get_TagValueWithEnd(NewXML, "<DrAcctNo>","</DrAcctNo>", true);
            string   CrAcctNo        = Utilities.Get_TagValueWithEnd(NewXML, "<CrAcctNo>","</CrAcctNo>", true);
            string   DrValueDate     = Utilities.Get_TagValueWithEnd(NewXML, "<DrValueDate>","</DrValueDate>", true);
            string   CrValueDate     = Utilities.Get_TagValueWithEnd(NewXML, "<CrValueDate>","</CrValueDate>", true);
            string   messageId       = Utilities.Get_TagValueWithEnd(NewXML, "<head:messageId>","</head:messageId>", true);
            string   messageIdNew    = messageId;
            int      JulDate         = DateTime.Now.Year * 1000 + DateTime.Now.DayOfYear;
            string   JulDateStr      = string.Format("{0}{1}", JulDate, RetryNo);
            DateTime TmpDate         = DateTime.Now;

            try
            {
                if (string.IsNullOrEmpty(messageId))
                {
                    messageId    = string.Format("{0:yyyyMMddHHmmssffffff}", DateTime.Now);
                    messageIdNew = messageId;
                }
                else
                {
                    if (messageId.Length > 6)
                    {
                        TmpDate  =  Convert.ToDateTime(string.Format("20{0}-{1}-{2}", messageId.Substring(0, 2), messageId.Substring(2, 2), messageId.Substring(4,2)));
                    }
                    JulDate      = TmpDate.Year * 1000 + TmpDate.DayOfYear;
                    JulDateStr   = string.Format("{0}{1}", JulDate, RetryNo);
                    messageIdNew = string.Format("{0}{1}", JulDateStr, messageId.Substring(6, 14));
                }

                NewXML = NewXML.Replace(string.Format("<head:messageId>{0}</head:messageId>", messageId), string.Format("<head:messageId>{0}</head:messageId>", messageIdNew));
                NewXML = NewXML.Replace(string.Format("<head:trackingId>{0}</head:trackingId>", messageId), string.Format("<head:trackingId>{0}</head:trackingId>", messageIdNew));
                NewXML = NewXML.Replace(string.Format("<cre1:MessageDateTime>{0}</cre1:MessageDateTime>", MessageDateTime), string.Format("<cre1:MessageDateTime>{0:yyyy-MM-ddTHH:mm:ss.fff}</cre1:MessageDateTime>", DateTime.Now));
                NewXML = NewXML.Replace(string.Format("<DrAcctNo>{0}</DrAcctNo>", DrAcctNo), string.Format("<DrAcctNo>{0}</DrAcctNo>", CrAcctNo));
                NewXML = NewXML.Replace(string.Format("<DrValueDate>{0}</DrValueDate>", DrValueDate), string.Format("<DrValueDate>{0:yyyy-MM-dd}</DrValueDate>", DateTime.Now));
                NewXML = NewXML.Replace(string.Format("<CrAcctNo>{0}</CrAcctNo>", CrAcctNo), string.Format("<CrAcctNo>{0}</CrAcctNo>", DrAcctNo_New));
                NewXML = NewXML.Replace(string.Format("<CrValueDate>{0}</CrValueDate>", CrValueDate), string.Format("<CrValueDate>{0:yyyy-MM-dd}</CrValueDate>", DateTime.Now));

                NewXML = NewXML.Replace("ZEEPY", "ZEEPR");
                NewXML = NewXML.Replace("ZEPY" , "ZEPR" );
            }
            catch (Exception fn_CreateZeePayInwardRevXML_ex)
            {
                string retErr = LogError(fn_CreateZeePayInwardRevXML_ex.GetHashCode().ToString(), "fn_CreateZeePayInwardRevXML", fn_CreateZeePayInwardRevXML_ex, InstNo);
            }
            finally
            {
            }
            xMLObject.XML_Str        = NewXML;
            xMLObject.XML_Ref        = messageId;
            xMLObject.XML_ChannelRef = ChannelRef_Num;

            return xMLObject;
        }


        public static double ToJulianDate(DateTime date)
        { 
            return date.ToOADate() + 2415018.5;
        }

        public string UpdateDigitalID_ASYNCH()
        {
            string SQL_Str = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, "UpdateDigitalID_ASYNCH");
            if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
            {
                DataTable DigitalIDSynchTbl   = new DataTable();
                DataTable UserAccountTable    = new DataTable();
                DataTable UserAccountTableNew = new DataTable();
                DataTable XML_Tbl             = new DataTable();

                string CustomerId       = "";
                string AccountNo        = "";
                string TelephoneNo      = "";
                string DateInserted     = "";
                string DigitalID_Msg    = "";
                string RecordXML        = "";
                string encryptKey       = "";
                string UserDigitalID    = "";
                string DigitalID_InstNo = "0";

                try
                {
                    SQL_Str           = "EXEC [dbo].[ustp_Retrieve_DigitalID_Instructions]";
                    DigitalIDSynchTbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);
                    if (DigitalIDSynchTbl != null && DigitalIDSynchTbl.Rows.Count > 0)
                    {
                        foreach (DataRow DataSynchRow in DigitalIDSynchTbl.Rows)
                        {
                            DigitalID_InstNo = DataSynchRow["DigitalID_InstNo"].ToString();
                            DigitalID_Msg    = DataSynchRow["DigitalID_Msg"].ToString();
                            DigitalID_Msg    = Utilities.DecryptStringAES(DigitalID_Msg, "SELECT#R#!");

                            CustomerId   = Utilities.Get_TagValueWithEnd(DigitalID_Msg, "<CustomerId>"  , "</CustomerId>"  , true).Trim();
                            AccountNo    = Utilities.Get_TagValueWithEnd(DigitalID_Msg, "<AccountNo>"   , "</AccountNo>"   , true).Trim();
                            TelephoneNo  = Utilities.Get_TagValueWithEnd(DigitalID_Msg, "<TelephoneNo>" , "</TelephoneNo>" , true).Trim();
                            DateInserted = Utilities.Get_TagValueWithEnd(DigitalID_Msg, "<DateInserted>", "</DateInserted>", true).Trim();

                            if (AccountNo == "")
                            {
                                SQL_Str = string.Format("UPDATE [tbl_DigitalID_Instruction] SET DigitalID_RetryNo = DigitalID_RetryNo + 1, DigitalID_Retry_Note = 'Digital Instrution Account Number NULL',  DigitalID_RetryTime = CURRENT_TIMESTAMP WHERE DigitalID_InstNo = '{0}'", DigitalID_InstNo);
                                SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);
                            }
                            else
                            {
                                if (CustomerId != "")
                                     SQL_Str = string.Format("SELECT * FROM UserAccount WITH (NOLOCK) WHERE (CustomerId  = '{0}')"  , CustomerId);
                                else
                                     SQL_Str = string.Format("SELECT * FROM UserAccount WITH (NOLOCK) WHERE (TelephoneNo = '{0}' AND AccountNo = '{1}' AND CONVERT(VARCHAR(10),Approval_Date,25) = '{2}')", TelephoneNo, AccountNo, DateInserted);
                               
                                UserAccountTableNew = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);
                                if (UserAccountTableNew != null && UserAccountTableNew.Rows.Count > 0)
                                {
                                    foreach (DataRow UserAccountRow in UserAccountTableNew.Rows)
                                    {
                                        CustomerId = UserAccountRow["CustomerId"].ToString();
                                        SQL_Str    = string.Format("[dbo].[ustp_getCusomerXML_without_ID] @CustomerID =  {0}", CustomerId.Trim());
                                        XML_Tbl    = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);

                                        foreach (DataRow XML_Row in XML_Tbl.Rows)
                                        {
                                            RecordXML     = XML_Row[0].ToString();
                                            encryptKey    = string.Format("{0}#R#{1}#R#{2}", CustomerId, TelephoneNo, AccountNo);
                                            UserDigitalID = Utilities.EncryptStringAES(RecordXML, encryptKey);
                                            SQL_Str       = string.Format("[dbo].[ustp_UpdateDigital_ID] @CustomerID = {0}, @AccountDigitalID = '{1}'", CustomerId, UserDigitalID);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);

                                            SQL_Str       = string.Format("UPDATE [tbl_DigitalID_Instruction] SET DigitalID_Posted = 1, DigitalID_Retry_Note = 'Digital ID applied successfully at {1:yyyy-MM-dd HH:mm:ss}' WHERE DigitalID_InstNo = '{0}'", DigitalID_InstNo, DateTime.Now);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);
                                        }
                                    }
                                }
                                else
                                {
                                    SQL_Str = string.Format("UPDATE [tbl_DigitalID_Instruction] SET DigitalID_RetryNo = DigitalID_RetryNo + 1, DigitalID_Retry_Note = 'Digital Instrution Record not Found on Main {1} {2} {3} {4}', DigitalID_RetryTime = CURRENT_TIMESTAMP WHERE DigitalID_InstNo = '{0}'", DigitalID_InstNo, CustomerId,TelephoneNo, AccountNo, DateInserted);
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);
                                }
                            }
                        }
                    }
                }
                catch (Exception UpdateDigitalID_ASYNCH_ex)
                {
                    string retErr = LogError(UpdateDigitalID_ASYNCH_ex.GetHashCode().ToString(), "UpdateDigitalID_ASYNCH", UpdateDigitalID_ASYNCH_ex, CustomerId);
                }
                finally
                {
                }
            }
            return "done";
        }

        public string UpdateUserAccountKYCDetails()
        {
            string SQL_Str = string.Format("EXEC dbo.ustp_Check_NodeConfiguration @Conf_InstitutionID = '{0}', @Conf_NodeID = '{1}', @Conf_ProcessName = '{2}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID, e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Node_ID, "UpdateUserAccountKYCDetails");
            if (Convert.ToInt16(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQL_Str).Rows[0][0].ToString()) > 0)
            {
                DataTable UserDefTable = new DataTable();
                DataTable RemitterTbl  = new DataTable();
                string RemitterStr = "SELECT TOP 50 * FROM vw_KYC_UpdateRecords ORDER BY CustomerId DESC";
                string AccountNo   = "";
                string UserBranch  = "";
                string CustomerId  = "";
                string CleanIDNum  = "";
                SQL_Str            = "";

                e_Verify_BACK_OFFICE_Service_Interface.eCoCash.registration_Response       tmp_registration_Response = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.registration_Response();
                e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient EcoSvc                    = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
                e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail             Customer_Detl             = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();


                UserDefTable = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], RemitterStr);
                if (UserDefTable != null && UserDefTable.Rows.Count > 0)
                {
                    foreach (DataRow UserDefRow in UserDefTable.Rows)
                    {
                        //Remmitter = Utilities.RemoveSpecialCharacters_SWIFT(RemitterRow["AC_DESC"].ToString());
                        CustomerId  = UserDefRow["CustomerId"].ToString();
                        AccountNo   = UserDefRow["AccountNo"].ToString();
                        UserBranch  = "";

                        if (AccountNo.Length == 17)
                        {
                            UserBranch  = AccountNo.Substring(0, 3);
                            AccountNo   = AccountNo.Substring(3, AccountNo.Length - 3);
                        }

                        Customer_Detl = EcoSvc.FCUBS_AccountEnquiry(AccountNo, false, "FCUBS");
                        CleanIDNum    = Customer_Detl.Cust_NatID.Replace(" ", "").Replace("-", "").Replace(@"\", "").Replace(@"/", "");

                        if (CleanIDNum.Length == 0)
                        {
                            SQL_Str = string.Format("UPDATE UserAccount SET KYC_Retry = COALESCE(KYC_Retry,0) + 1,KYC_Retry_Time = CURRENT_TIMESTAMP WHERE CustomerId = '{0}'" ,CustomerId);
                        }
                        else
                        {
                            SQL_Str = string.Format("UPDATE UserAccount SET KYC_Retry = COALESCE(KYC_Retry,0) + 1,KYC_Retry_Time = CURRENT_TIMESTAMP, KYC_IDNumber_C = '{1}',  KYC_Acc_Name = '{2}', KYC_IDType_IP = 'I', KYC_IDType_LF = 'L', AccType_IM = COALESCE(AccType_IM,'I'),Product_C = 'ECOCASH', Source_System_C = 'FCUBS',ServiceProvider_C = 'ECONET',chargeType_C = 'B2W_ECOCASH' WHERE CustomerId = '{0}'", CustomerId, CleanIDNum, Customer_Detl.Cust_Name);
                        }
                        SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQL_Str);
                    }
                }
            }
            return "done";
        }

        public string UpdateRemitterName()
        {
            DataTable UserDefTable   = new DataTable();
            DataTable RemitterTbl    = new DataTable();
            string    RemitterStr    = "SELECT * FROM tbl_RTGS_Outward_Trxn_Staging WHERE ValueDate_C =  REPLACE(CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25),'-','') AND DebitName_C IS NULL AND TrnSource != 'RETURNED' AND Posted_YN_B = 0";
            string    Remmitter      = "";
            string    SQL_Str        = "";
            string    UserAccount    = "";
            string    UserBranch     = "";

            UserDefTable = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], RemitterStr); 
            if (UserDefTable != null && UserDefTable.Rows.Count > 0)
            {
                foreach (DataRow UserDefRow in UserDefTable.Rows)
                {
                    UserAccount = UserDefRow["DebitAcc_C"].ToString();
                    UserBranch  = UserDefRow["User_Branch_C"].ToString();

                    if (UserAccount.Length == 17)
                    {
                        UserBranch  = UserAccount.Substring(0, 3);
                        UserAccount = UserAccount.Substring(3, UserAccount.Length - 3);
                    }

                    RemitterStr = string.Format("SELECT AC_DESC FROM zwfcc11.sttm_cust_account WHERE cust_ac_no = '{0}' AND BRANCH_CODE = '{1}'",UserAccount, UserBranch);
                    RemitterTbl = new DataTable();
                    RemitterTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], RemitterStr);
                    if (RemitterTbl != null && RemitterTbl.Rows.Count > 0)
                    {
                        foreach (DataRow RemitterRow in RemitterTbl.Rows)
                        {
                            Remmitter = Utilities.RemoveSpecialCharacters_SWIFT(RemitterRow["AC_DESC"].ToString());
                            SQL_Str   = string.Format("Update tbl_RTGS_Outward_Trxn_Staging SET  DebitName_C = '{0}' , User_Branch_C = '{1}'  Where  RTGS_OutStage_Inst_N = '{2}'", Remmitter,UserBranch, UserDefRow["RTGS_OutStage_Inst_N"].ToString());
                           SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                        }
                    }
                }
            }
            return "done";
        }


        public string Acquire_RTGS_Outwards_from_History_ZIPP()
        {
            string    Source_Ref     = "";
            string    Source_RefNew  = "";
            ////bool      TxtFound       = false;
            DataTable UserDefTable   = new DataTable();
            DataTable RemitterTbl    = new DataTable();
            DataTable DailyOracleTbl = new DataTable();
            DataTable benefTable     = new DataTable();
            DataTable DupRecs        = new DataTable();
            DataTable MQ_Rec         = new DataTable();
            string    SQL_Str        = "";
            string    OraclStr       = "";
            string    RemitterStr    = "";
            string    Str_to_display = "";
            string    benefSQLStr    = "";
            DataTable FileTable      = new DataTable();
            Hashtable m_hashtable    = new Hashtable();
            string    FileName_C     = "";
            DataTable SysRec = new DataTable();
            string    STP_Currencies = "";
            string    Trxn_Curr      = "";

            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient EcoSvc     = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail             CustDetail = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();
            
            try
            {
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward;
                if (FCUBS_DataAquisition)
                {

                    SQL_Str = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                    SysRec  = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQL_Str);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                    }

                    SQL_Str   = "SELECT DISTINCT FH.* FROM dbo.tbl_FileHistory FH WITH (NOLOCK) INNER JOIN [tbl_RTGS_Outward_Trxn_Staging_Manual] ManTrxn ON ManTrxn.File_Name_C = FH.File_Name_C  WHERE UPPER(FH.File_Source_C) = UPPER('OutwardRecovery') AND  FH.importStage_C = '1' AND FH.Approved_YN = '1' AND ManTrxn.Reference_C LIKE '%ZIPP%' AND ManTrxn.Synched = 0";
                    FileTable = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                    if (FileTable != null && FileTable.Rows.Count > 0)
                    {
                        foreach (DataRow File_Row in FileTable.Rows)
                        {
                            FileName_C = File_Row["File_Name_C"].ToString();
                            SQL_Str    = string.Format("exec dbo.ustp_GetMissed_Transactions @File_Name_C = '{0}'", FileName_C);
                            OraclStr   = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str).Rows[0]["FCUBSRef_Set"].ToString();

                            SQL_Str = " SELECT * FROM zwfcc11.ACTB_HISTORY LogTbl WHERE "; 
                            SQL_Str += "     LogTbl.MODULE     = 'RT'  ";
                            SQL_Str += " AND LogTbl.AMOUNT_TAG = 'TXN_AMT'  ";
                            SQL_Str += " AND LogTbl.PRODUCT    = 'ZIPP'  ";
                            SQL_Str += " AND LogTbl.DRCR_IND   = 'D'   ";
                            SQL_Str += " AND LogTbl.CUST_GL    = 'A'   ";
                            //SQL_Str += " AND LogTbl.AC_CCY     = 'USD'  ";
                            //SQL_Str += " AND LogTbl.EVENT      != 'REVR'  ";
                            //SQL_Str += " AND LogTbl.TRN_REF_NO IN  ('108ZIPP200990001',	'108ZIPP200990003',	'110ZIPP200990001',	'110ZIPP200990002',	'110ZIPP200990003',	'117ZIPP200990001',	'120ZIPP200990002',	'120ZIPP200990003',	'120ZIPP200990004',	'120ZIPP200990001',	'120ZIPP200990005',	'120ZIPP200990006',	'120ZIPP200990007',	'120ZIPP200990008',	'120ZIPP200990009',	'125ZIPP200990001',	'125ZIPP200990002',	'510ZIPP200990001',	'ZW2ZIPP200990001',	'ZW2ZIPP200990002',	'ZW2ZIPP200990003',	'115ZIPP200990001',	'116ZIPP200990002',	'301ZIPP200990001',	'301ZIPP200990003',	'519ZIPP200990004',	'505ZIPP200990001',	'519ZIPP200990005',	'519ZIPP200990001',	'519ZIPP200990002',	'519ZIPP200990003',	'301ZIPP200990002',	'301ZIPP200990004',	'301ZIPP200990005',	'301ZIPP200990006',	'301ZIPP200990008',	'301ZIPP200990010',	'301ZIPP200990007',	'301ZIPP200990009')";
                            SQL_Str += string.Format(" AND LogTbl.AC_CCY IN ({0})", STP_Currencies);
                            SQL_Str += string.Format(" AND LogTbl.TRN_REF_NO IN  {0}",OraclStr);

                            DailyOracleTbl  = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], SQL_Str);
                            if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                            {
                                foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                                {
                                    Source_Ref    = DailyOracleRow["TRN_REF_NO"].ToString();
                                    Source_RefNew = Source_Ref.Replace("ZIPP", "RIPP");
                                    Trxn_Curr     = DailyOracleRow["AC_CCY"].ToString();

                                    // Check for Duplicates in Local Staging Table
                                    string Check_str = string.Format("SELECT Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) WHERE (Trxn_Ref_C = '{0}')", Source_RefNew);
                                    DupRecs          = new DataTable();
                                    DupRecs          = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], Check_str);
                                    if ((DupRecs.Rows.Count == 0) || (DupRecs == null))
                                    {
                                        OraclStr     = string.Format("SELECT CONTRACT_REF_NO, VERSION_NO, MODULE, PRODUCT_CODE, FIELD_VAL_1, FIELD_VAL_2, FIELD_VAL_3, FIELD_VAL_4, FIELD_VAL_5 FROM zwfcc11.CSTM_CONTRACT_USERDEF_FIELDS WHERE CONTRACT_REF_NO = '{0}'", Source_Ref);
                                        UserDefTable = new DataTable();
                                        UserDefTable = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                        if (UserDefTable != null && UserDefTable.Rows.Count > 0)
                                        {
                                            foreach (DataRow UserDefRow in UserDefTable.Rows)
                                            {
                                                CustDetail        = new  e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();
                                                CustDetail        = EcoSvc.FCUBS_AccountEnquiry(string.Format("{0}{1}", DailyOracleRow["AC_BRANCH"].ToString(), DailyOracleRow["AC_NO"].ToString()), false, "FCUBS");
                                                string Remmitter  = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Name);
                                                string DebitInfo1 = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Addr1);
                                                string DebitInfo2 = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Addr2);

                                                if (Remmitter == "")
                                                {
                                                    RemitterStr = string.Format("SELECT AC_DESC FROM zwfcc11.sttm_cust_account WHERE cust_ac_no = '{0}' AND BRANCH_CODE = '{1}'", DailyOracleRow["AC_NO"].ToString(), DailyOracleRow["AC_BRANCH"].ToString());
                                                    RemitterTbl = new DataTable();
                                                    RemitterTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                                    if (RemitterTbl != null && RemitterTbl.Rows.Count > 0)
                                                    {
                                                        foreach (DataRow RemitterRow in RemitterTbl.Rows)
                                                        {
                                                            Remmitter = Utilities.RemoveSpecialCharacters_SWIFT(RemitterRow["AC_DESC"].ToString());
                                                        }
                                                    }
                                                }

                                                string Trn_Amnt   = DailyOracleRow["LCY_AMOUNT"].ToString();
                                                string ValueDt    = string.Format("{0:yyyyMMdd}", Convert.ToDateTime(DailyOracleRow["TRN_DT"].ToString()));
                                                string Benef_Bank = UserDefRow["FIELD_VAL_4"].ToString();

                                                string Benef_Acc  = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_1"].ToString());
                                                string Benef_Name = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_2"].ToString());
                                                string Benef_Ref  = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_5"].ToString());
                                                string DebitAcc_C = DailyOracleRow["AC_NO"].ToString();

                                                // Now save the record
                                                m_hashtable = new Hashtable();
                                                m_hashtable.Add("UserID_C"     , "AUTO");
                                                m_hashtable.Add("Trxn_Ref_C"   , Source_RefNew);
                                                m_hashtable.Add("ORF_Val_C"    , Source_Ref);
                                                m_hashtable.Add("UserName_C"   , "AUTO ACQUIRED");
                                                m_hashtable.Add("User_Branch_C", DailyOracleRow["AC_BRANCH"].ToString());
                                                m_hashtable.Add("Benef_Bank_C" , Benef_Bank);
                                                m_hashtable.Add("Amnt_N"       , Trn_Amnt);
                                                m_hashtable.Add("ValueDate_C"  , ValueDt);
                                                m_hashtable.Add("DebitName_C"  , Remmitter);
                                                m_hashtable.Add("DebitAcc_C"   , DebitAcc_C);
                                                m_hashtable.Add("DebitInfo1"   , DebitInfo1);
                                                m_hashtable.Add("DebitInfo2"   , DebitInfo2);
                                                //m_hashtable.Add("DebitInfo3" , DebitInfo3);
                                                //m_hashtable.Add("DebitInfo4" , DebitInfo4);
                                                m_hashtable.Add("DebitRef_C"   , Benef_Ref);
                                                m_hashtable.Add("BenefAcc_C"   , Benef_Acc);
                                                m_hashtable.Add("BenefName_C"  , Benef_Name);
                                                m_hashtable.Add("Fld_50_C"     , Remmitter);
                                                m_hashtable.Add("RTGS_Out_ImportDate_D" , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                                m_hashtable.Add("RTGS_Out_ImportTime_C" , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                                m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                                m_hashtable.Add("Approved_YN_B"         , "0");
                                                m_hashtable.Add("Posted_YN_B"           , "0");
                                                m_hashtable.Add("Info_Sent_YN_B"        , "0");
                                                m_hashtable.Add("TrnSource"             , "ZIPPI");
                                                m_hashtable.Add("RTGS_Out_FileName_C"   , "ZIPPI");
                                                m_hashtable.Add("Trxn_Curr"             , Trxn_Curr);

                                                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"], "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                                //Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS.", DateTime.Now.ToString(), Source_Ref);
                                            }
                                        }

                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1 WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                    else
                                    {
                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1, Reason_Invalid_C = 'REPLAYED ALREADY' WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                }
                            }    
                        }
                    }    
                }
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display    = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2  =  SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"],("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime")).Rows[0][0].ToString();
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"],string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_RTGS_Outwards_ZIPP_InternetBanking", Err_Date2));

                return "2";
            }
            finally
            {

            }
            return "Done";
        }


        public string Acquire_Incoming_And_Confirmations()
        {
            Hashtable m_hashtable = new Hashtable();
            string    SQLStr      = "";
            DataTable SysRec      = new DataTable();
            try
            {
                bool MQ_Inward_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Inwards_MQ_DataAquisition;
                if (MQ_Inward_DataAquisition)
                {
                    DataTable CodeRec;
                    string Str_to_display    = "";
                    string textLine          = "";
                    int    Int_Records_Found = 0;
                    string lstContents       = "";
                    bool   TxtFound          = false;
                    string Amount_N          = "0.00";

                    string Our_Ref_C         = "";
                    string From_Bank_Desc    = "";
                    string From_Bank_Short_C = "";
                    string Reference_C       = "";
                    string Field32A          = "";
                    string MT205_Field21     = "";
                    string Value_Date_D      = "";
                    string Curr_Code_C       = "";
                    string Field50K          = "";
                    string Remitter_Acc_C    = "";
                    string Remitter_Detail   = "";
                    int    Remitter_Len      = 0;
                    int    Remitter_Start    = 0;
                    string Remitter_C        = "";

                    string Field59           = "";
                    string Benef_Acc_C       = "";
                    string Benef_Detail      = "";
                    int    Benef_Len         = 0;
                    int    Benef_Start       = 0;
                    string Benef_C           = "";
                    string Trn_PID_C         = "";
                    string Trn_OIR_C         = "";
                    string RTGS_Suspense_Acc = "";
                    int    Num_Retry_Config_N                    = 0;
                    string RTGS_Outwards_Temp_Directory          = "";
                    string RTGS_Inwards_FCUBS_Posting_Retry      = "";
                    string Processed_MQ_Manager                  = "";
                    string Processed_MQ_Queue                    = ""; ;
                    bool   RTGS_Intellimatch_Integration_Enabled = false;
                    bool   KEEP_STP_TEMP_BATCHES                 = false;
                    string STP_Currencies = "";
                    string Check_str      = "";
                    int    MT103_End  = 0;
                    string MT103Msg = "";
                    bool  CLOUD_STP_ENABLED = false;

                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RTGS_Outwards_Temp_Directory','RTGS_Inwards_FCUBS_Posting_Retry','Processed_MQ_Manager','Processed_MQ_Queue','RTGS_Intellimatch_Integration_Enabled','STP_Currencies','KEEP_STP_TEMP_BATCHES','CLOUD_STP_ENABLED') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Intellimatch_Integration_Enabled".ToUpper()) RTGS_Intellimatch_Integration_Enabled = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_STP_ENABLED".ToUpper())                     CLOUD_STP_ENABLED                     = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "KEEP_STP_TEMP_BATCHES".ToUpper())                 KEEP_STP_TEMP_BATCHES                 = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Inwards_FCUBS_Posting_Retry".ToUpper())      RTGS_Inwards_FCUBS_Posting_Retry      = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper())          RTGS_Outwards_Temp_Directory          = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "Processed_MQ_Queue".ToUpper())                    Processed_MQ_Queue                    = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "Processed_MQ_Manager".ToUpper())                  Processed_MQ_Manager                  = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "STP_Currencies".ToUpper())                        STP_Currencies                        = param_Row["Parameter_Value"].ToString().Trim();
                    }

                    if (CLOUD_STP_ENABLED)
                    {
                        return "Cloud Acquiring";
                    }

                    int.TryParse(RTGS_Inwards_FCUBS_Posting_Retry, out Num_Retry_Config_N);
                    Num_Retry_Config_N += 1;
                    if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) RTGS_Outwards_Temp_Directory = RTGS_Outwards_Temp_Directory + System.IO.Path.DirectorySeparatorChar.ToString();

                    // Create the Batch File to Acquire the Transactions
                    string Date_Var              = string.Format("{0}{1}{2:yyyy-MM-dd_HH_mm_ss_fff}", RTGS_Outwards_Temp_Directory, "Processed_",DateTime.Now);
                    string Tmp_File_name         = string.Format("{0}.txt", Date_Var);
                    string Tmp_BatchFile_name    = string.Format("{0}.bat", Date_Var);
                    string Tmp_ResponseFile_name = string.Format("{0}.rsp", Date_Var);
                    string BatString             = string.Format("C:\\RTGS_In\\Purchased_DLL\\amqsget_7_select {0} {1} > {2}{3}Exit", Processed_MQ_Queue, Processed_MQ_Manager, Tmp_ResponseFile_name, Environment.NewLine);
                    File.WriteAllText(Tmp_BatchFile_name, BatString);

                    string Curr_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);

                    do
                    {
                        //Just wait for the Batch file to be created.
                    }
                    while (System.IO.File.Exists(Tmp_BatchFile_name) == false);

                    bool FileInUse = true;
                    FileInUse = Utilities.IsFileInUse(Tmp_BatchFile_name);
                    do
                    {
                        FileInUse = Utilities.IsFileInUse(Tmp_BatchFile_name);
                    }
                    while (FileInUse == true);

                    // Execute the Batch File
                    ProcessStartInfo AcquireProcessInfo = new ProcessStartInfo(@Tmp_BatchFile_name);
                    AcquireProcessInfo.UseShellExecute  = false;
                    AcquireProcessInfo.CreateNoWindow   = true;
                    Process AcquirebatchProcess         = new Process();
                    AcquirebatchProcess.StartInfo       = AcquireProcessInfo;
                    AcquirebatchProcess.Start();
                    AcquirebatchProcess.WaitForExit();
                    AcquirebatchProcess.Dispose();

                    //Wait until reponse File has been genearated.

                    do
                    {
                        // Application.DoEvents();
                    }
                    while (System.IO.File.Exists(Tmp_ResponseFile_name) == false);

                    FileInUse = true;
                    FileInUse = Utilities.IsFileInUse(Tmp_ResponseFile_name);
                    do
                    {
                        FileInUse = Utilities.IsFileInUse(Tmp_ResponseFile_name);
                        // Nothing to Do but just wait for the file to be not in use
                    }
                    while (FileInUse == true);
                    // Check if there was no Error Code in proccesing
                    textLine = File.ReadAllText(Tmp_ResponseFile_name);

                    //textLine = File.ReadAllText("C:/RTGS_In/Data/RTGS_OutWards/Temp/Processed_2015_11_21_23_50_20_437_BABC.rsp");
                    //textLine = File.ReadAllText("C:/RTGS_In/Data/Intellimatch/Int_Balances_Input.txt");
                    //textLine = File.ReadAllText(@"C:\RTGS_In_BanABC\RTGS_Outwards\Data\All_Incoming_20151201_BABC.rsp");
                    //textLine = File.ReadAllText(@"C:\RTGS_In_BanABC\Issues\2016_09_02_Failures.txt");
                    //textLine = File.ReadAllText(@"C:\RTGS_In_BanABC\Data\STP\2016-08-31.txt");
                    //textLine = File.ReadAllText(@"C:\RTGS_In_BanABC\Issues\20160909.tx5");
                    //textLine = File.ReadAllText(@"C:\TEMP\Today\All_201906_17_18.txt5");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-06_11_27_04_079.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-07_11_35_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-08_14_47_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-12_12_50_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-13_17_58_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-14_09_45_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-14_13_29_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\Processed_2020-08-14_14_34_52_018.rsp");
                    //textLine = File.ReadAllText(@"C:\TEMP\20200814.tx5");

                    if (textLine != "")
                    {
                        File.AppendAllText(string.Format("{0}{1}.tx5", RTGS_Outwards_Temp_Directory, Curr_Date.Replace("-", "").Substring(0, 8)), textLine + (char)10);
                    }

                    textLine = Utilities.RemoveSpecialCharacters(textLine);
                    textLine = textLine.Replace("MDE", "").Replace("", "").Replace("", "").Replace("\0", "").Replace("", "").Replace("H3MQSTR   AMQ PZWMAX      UO&O", "");

                    string SaveResp = Save_ResponseData("Incoming", "Incoming", Date_Var, textLine);

                    if (textLine.LastIndexOf("ended with reason") != -1)
                    {
                        string Err_Code = textLine.Substring(textLine.LastIndexOf("ended with reason") + 22, 6);
                        Str_to_display  = string.Format("{0} has produced an Error on : {1}. Error Code :{2}", "Procesed Instruction Queue", DateTime.Now.ToString(), Err_Code);
                           // lbl_MQ_Connection.Text = string.Format("Error Code : {0}", Err_Code);
                    }
                    else
                    {
                        //lbl_MQ_Connection.Text = "Connected Successfully to Websphere MQ";

                        // Get Processing Date

                        textLine = textLine.Replace(Environment.NewLine, " ").Replace("\r\n", "#R#,").Replace(((char)10).ToString(), "#R# ").Replace(((char)13).ToString(), " #R#").Replace("Sample AMQSGET0 start message <", "").Replace("> no more messages Sample AMQSGET0 end", "").Replace("Sample AMQSGET0 start no more messages Sample AMQSGET0 end", "").Trim();
                        //Tag_Separator.SetValue("message <", 0);
                        Tag_Separator.SetValue("{1:F01FMBZ", 0);

                        string[] textLineParams = textLine.Split(Tag_Separator, StringSplitOptions.None);
                        double MTLines = textLineParams.Length;

                        for (int LoopNo = 0; LoopNo < MTLines; LoopNo++)
                        {
                            string Current_Line = textLineParams[LoopNo].ToString();
                            MT103_End = Current_Line.LastIndexOf("-}");
                            if (MT103_End != -1)
                            {
                                MT103Msg = Current_Line.Substring(0, MT103_End);
                            }
                            else
                            {
                                MT103Msg = "";
                            }

                            if (Current_Line.Length > 80)
                            {
                                string MQMsg_Type = "2:O";
                                {
                                    // MT205
                                    if (Current_Line.Contains("{2:O205") == true)
                                    {
                                        try
                                        {
                                            Our_Ref_C         = "";
                                            From_Bank_Desc    = "";
                                            From_Bank_Short_C = "";
                                            Reference_C       = "";
                                            Field32A          = "";
                                            Value_Date_D      = "";
                                            Curr_Code_C       = "";
                                            RTGS_Suspense_Acc = "";
                                            Field50K          = "";
                                            Remitter_Acc_C    = "";
                                            Remitter_Len      = 0;
                                            Remitter_Start    = 0;
                                            Remitter_C        = "";
                                            MT205_Field21     = "";

                                            Field59           = "";
                                            Benef_Acc_C       = "";
                                            Benef_Len         = 0;
                                            Benef_Start       = 0;
                                            Benef_C           = "";
                                            Trn_PID_C         = "";
                                            Trn_OIR_C         = "";

                                            From_Bank_Desc    = Current_Line.Substring(36, 8);
                                            From_Bank_Short_C = Current_Line.Substring(36, 3);
                                            Reference_C       = Utilities.Get_TagValueWithEnd(Current_Line, "{115:", "}", true);

                                            // Check for Duplicates
                                            Check_str   = string.Format("Select COUNT(Reference_C) AS Rec_Count From tbl_RTGSIn_Trxn WHERE Reference_C = '{0}'", Reference_C);
                                            int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                                            if (DupRecs == 0 )
                                            {
                                                if (Reference_C.Contains("REBZ") == true)
                                                {
                                                    if (Reference_C.Length > 16) Reference_C = Reference_C.Substring(0, 16);
                                                    Field32A  = Utilities.Get_TagValueWithEnd(Current_Line, ":32A:", ":", true).Replace("#R#", "");
                                                    if (Field32A.Length < 9)
                                                    {
                                                        // Do Nothing as this is incorrect
                                                    }
                                                    else
                                                    {
                                                        Value_Date_D = string.Format("{0:yyyy}-{1}-{2}", DateTime.Now, Field32A.Substring(2, 2), Field32A.Substring(4, 2));
                                                        Curr_Code_C  = Field32A.Substring(6, 3);

                                                        if ((STP_Currencies.Contains(Curr_Code_C)) && (Curr_Code_C != ""))
                                                        {
                                                            //Now get the Suspense account
                                                            SQLStr = string.Format("SELECT RTGS_Suspense_Acc_C FROM dbo.tbl_Currencies WITH (NOLOCK) WHERE Curr_Short_Name = '{0}'", Curr_Code_C);
                                                            SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                                            foreach (DataRow param_Row in SysRec.Rows)
                                                            {
                                                                RTGS_Suspense_Acc = param_Row["RTGS_Suspense_Acc_C"].ToString().Trim();
                                                            }

                                                            Amount_N       = Utilities.Get_TagValueWithEnd(Field32A, Curr_Code_C, ":", false).Replace(",", ".").Trim();
                                                            if (Amount_N.EndsWith(".")) Amount_N += "00";

                                                            Remitter_Acc_C  = "";
                                                            Remitter_Len    = Field50K.Length;
                                                            Remitter_C      = From_Bank_Desc;
                                                            Remitter_C      = Utilities.RemoveDuplicate_Words(Remitter_C, 100);
                                                            //if (Remitter_C.Length > 100) Remitter_C = Remitter_C.Substring(0, 100);

                                                            Benef_Acc_C    = RTGS_Suspense_Acc;
                                                            Benef_C        = "FMBZZWHX";
                                                            Benef_C        = Utilities.RemoveDuplicate_Words(Benef_C, 100);
                                                            MT205_Field21  = Utilities.Get_TagValueWithEnd(Current_Line, ":21:", ":", true).Trim();
                                                            Trn_PID_C      = MT205_Field21.Replace("#R#", "");
                                                            Trn_OIR_C      = Utilities.Get_TagValueWithEnd(Current_Line, ":20:", ":", true).Replace("#R#", "");

                                                            Trn_OIR_C      = Utilities.RemoveDuplicate_Words(Trn_OIR_C, 20);
                                                            Trn_PID_C      = Utilities.RemoveDuplicate_Words(Trn_PID_C, 100);

                                                            // Directly Populate Incoming Records
                                                            m_hashtable = new Hashtable();
                                                            m_hashtable.Add("From_Bank_Desc_C"     , From_Bank_Desc);
                                                            m_hashtable.Add("From_Bank_Short_C"    , From_Bank_Short_C);
                                                            m_hashtable.Add("Reference_C"          ,  Reference_C);
                                                            m_hashtable.Add("Value_Date_D"         , Value_Date_D);
                                                            m_hashtable.Add("Benef_C"              , Benef_C);

                                                            m_hashtable.Add("Benef_Names_Similar_B", "0");
                                                            m_hashtable.Add("Status_C"             , "0");
                                                            m_hashtable.Add("Amount_N"             , Amount_N);
                                                            m_hashtable.Add("Benef_Acc_C"          , Benef_Acc_C);
                                                            m_hashtable.Add("Curr_Code_C"          , Curr_Code_C);
                                                            m_hashtable.Add("Remitter_C"           , Remitter_C);
                                                            m_hashtable.Add("File_Name_C"          , "STP");
                                                            m_hashtable.Add("File_Acc_OK_B"        , "0");
                                                            m_hashtable.Add("Posted_B"             , "0");

                                                            m_hashtable.Add("File_Date_D"          , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                                            m_hashtable.Add("Import_Date_D"        , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                                                            m_hashtable.Add("Source_Acc_C"         , Remitter_Acc_C);
                                                            m_hashtable.Add("Import_Time_C"        , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                                            m_hashtable.Add("Remitter_Acc_C"       , Remitter_Acc_C);

                                                            m_hashtable.Add("Mitigated_YN_B"       , "0");
                                                            m_hashtable.Add("Mitigated_Approved_YN_B", "0");
                                                            m_hashtable.Add("Mitigated_Charge_YN_B"  , "0");
                                                            m_hashtable.Add("Mitigated_Charge_N"     , 0.00);
                                                            m_hashtable.Add("Mitigated_Exch_Rate_N"  , 0.00);
                                                            m_hashtable.Add("Mitigated_PreInstNo"    , "0");
                                                            m_hashtable.Add("Mitigated_Num_Retries"  , "0");

                                                            m_hashtable.Add("Trn_Source_C"           , "STP");
                                                            m_hashtable.Add("Trn_PID_C"              , Trn_PID_C);
                                                            m_hashtable.Add("Trn_OIR_C"              , Trn_OIR_C);
                                                            m_hashtable.Add("Trn_Date_D"             , Value_Date_D);
                                                            m_hashtable.Add("Trn_Rec_C"              , "CTP");
                                                            m_hashtable.Add("Num_Retry_N"            , Num_Retry_Config_N);
                                                            m_hashtable.Add("Status_Desc"            , "Message Type MT205");
                                                            m_hashtable.Add("Posted_to_Suspense_B"   , "0");
                                                            m_hashtable.Add("Num_Retries_Suspense_N" , "0");
                                                            m_hashtable.Add("MsgType_C"              , "205");
                                                            m_hashtable.Add("MT_Msg_C"               , MT103Msg);
                                                            m_hashtable.Add("Return_Retry_No"        , "0");
                                                            m_hashtable.Add("Return_Posted_YN"       , "0");

                                                            SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGSIn_Trxn", m_hashtable);
                                                            Str_to_display = string.Format("{0} Acquired Incoming Ref : {1}", DateTime.Now.ToString(), Reference_C);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        catch (Exception InwardException0205)
                                        {
                                            string Err_String = string.Format("{0}-{1}", InwardException0205.StackTrace.ToString(), InwardException0205.ToString());
                                            if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);

                                            Str_to_display = string.Format("Acquire Processed Outgoing - An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                                            string Err_Date2 = m_databaseClass.getDataSet("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime").Tables[0].Rows[0][0].ToString();
                                            SQLStr = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", InwardException0205.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing 0205", Err_Date2);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                        }
                                    }

                                    // MT103
                                    if (Current_Line.Contains("{2:O103") == true)
                                    {
                                        try
                                        {
                                            Our_Ref_C         = "";
                                            From_Bank_Desc    = "";
                                            From_Bank_Short_C = "";
                                            Reference_C       = "";
                                            Field32A          = "";
                                            Value_Date_D      = "";
                                            Curr_Code_C       = "";
                                            Field50K          = "";
                                            Remitter_Acc_C    = "";
                                            Remitter_Len      = 0;
                                            Remitter_Start    = 0;
                                            Remitter_C        = "";

                                            Field59           = "";
                                            Benef_Acc_C       = "";
                                            Benef_Len         = 0;
                                            Benef_Start       = 0;
                                            Benef_C           = "";
                                            Trn_PID_C         = "";
                                            Trn_OIR_C         = "";

                                            From_Bank_Desc    = Current_Line.Substring(36, 8);
                                            From_Bank_Short_C = Current_Line.Substring(36, 3);
                                            Reference_C       = Utilities.Get_TagValueWithEnd(Current_Line, "{115:", "}", true);

                                            // Check for Duplicates
                                            Check_str   = string.Format("Select COUNT(Reference_C) AS Rec_Count From tbl_RTGSIn_Trxn WHERE Reference_C = '{0}'", Reference_C);
                                            int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                                            if (DupRecs == 0 )
                                            {
                                                if (Reference_C.Length > 16) Reference_C = Reference_C.Substring(0, 16);
                                                Field32A          = Utilities.Get_TagValueWithEnd(Current_Line, ":32A:", ":", true).Replace("#R#", "");
                                                if (Field32A.Length < 9)
                                                {
                                                    // Do Nothing as this is incorrect. Cannot process a transaction without an Amount
                                                }
                                                else
                                                {
                                                    Value_Date_D = string.Format("{0:yyyy}-{1}-{2}", DateTime.Now, Field32A.Substring(2, 2), Field32A.Substring(4, 2));
                                                    Curr_Code_C  = Field32A.Substring(6, 3);

                                                    if ((STP_Currencies.Contains(Curr_Code_C)) && (Curr_Code_C != ""))
                                                    {
                                                        Amount_N     = Utilities.Get_TagValueWithEnd(Field32A, Curr_Code_C, ":", false).Replace(",", ".").Trim();
                                                        if (Amount_N.EndsWith(".")) Amount_N += "00";

                                                        Field50K       = Utilities.Get_TagValueWithEnd(Current_Line, ":50K:", ":", true);
                                                        Remitter_Acc_C = Utilities.Get_TagValueWithEnd(Field50K, "/", "#R#", true).Trim();
                                                        Remitter_Len   = Field50K.Length;
                                                        Remitter_Start = Field50K.IndexOf("#R#");
                                                        if (Remitter_Start != -1)
                                                        {
                                                            if (Field50K.IndexOf("/") == -1)
                                                            {
                                                                Remitter_C = Field50K.Replace("#R#", "");
                                                            }
                                                            else
                                                            {
                                                                Remitter_C = Field50K.Substring(Remitter_Start, Remitter_Len - Remitter_Start).Replace("#R#", "");
                                                            }
                                                            Remitter_C = System.Text.RegularExpressions.Regex.Replace(Remitter_C, @"\s{2,}", " ");
                                                        }

                                                        //if (Remitter_C.Length > 100) Remitter_C = Remitter_C.Substring(0, 100);
                                                        Remitter_C  = Utilities.RemoveDuplicate_Words(Remitter_C, 100);

                                                        // Old Field 59
                                                        Field59     = Utilities.Get_TagValueWithEnd(Current_Line, ":59:", ":", true);
                                                        Benef_Acc_C = Utilities.Get_TagValueWithEnd(Field59, "/", "#R#", true).Trim();
                                                        Benef_Len   = Field59.Length;
                                                        Benef_Start = Field59.IndexOf("#R#");
                                                        if (Benef_Start != -1)
                                                        {
                                                            if (Field59.IndexOf("/") == -1)
                                                            {
                                                                Benef_C = Field59.Replace("#R#", "");
                                                            }
                                                            else
                                                            {
                                                                Benef_C = Field59.Substring(Benef_Start, Benef_Len - Benef_Start).Replace("#R#", "");
                                                            }
                                                            Benef_C = System.Text.RegularExpressions.Regex.Replace(Benef_C, @"\s{2,}", " ");
                                                        }

                                                        // Cater for Stanbic Field 59A
                                                        if (Current_Line.Contains(":59A:") == true)
                                                        {
                                                            Field59     = Utilities.Get_TagValueWithEnd(Current_Line, ":59A:", ":", true);
                                                            Benef_Acc_C = Utilities.Get_TagValueWithEnd(Field59, "/", " ", true).Trim();
                                                            if (Benef_Acc_C == "")
                                                            {
                                                                Benef_Acc_C = Utilities.Get_TagValueWithEnd(Field59, "/", "#R#", true).Trim();
                                                            }
                                                            Benef_C = Utilities.Get_TagValueWithEnd(Current_Line, ":72:/REC/CTP/RRF/", "BRF", true).Trim().Replace("#R#", "").Replace("/", "");
                                                            Benef_C = System.Text.RegularExpressions.Regex.Replace(Benef_C, @"\s{2,}", " ");
                                                        }

                                                        Benef_C   = Utilities.RemoveDuplicate_Words(Benef_C, 100);

                                                        Trn_PID_C = Utilities.Get_TagValueWithEnd(Current_Line, ":70:", ":", true).Replace("#R#", "");
                                                        Trn_OIR_C = Utilities.Get_TagValueWithEnd(Current_Line, ":20:", ":", true).Replace("#R#", "");

                                                        Trn_OIR_C = Utilities.RemoveDuplicate_Words(Trn_OIR_C, 20);
                                                        Trn_PID_C = Utilities.RemoveDuplicate_Words(Trn_PID_C, 100);

                                                        // Directly Populate Incoming Records
                                                        m_hashtable = new Hashtable();
                                                        m_hashtable.Add("From_Bank_Desc_C"     , From_Bank_Desc);
                                                        m_hashtable.Add("From_Bank_Short_C"    , From_Bank_Short_C);
                                                        m_hashtable.Add("Reference_C"          , Reference_C);
                                                        m_hashtable.Add("Value_Date_D"         , Value_Date_D);
                                                        m_hashtable.Add("Benef_C"              , Benef_C);

                                                        m_hashtable.Add("Benef_Names_Similar_B", "0");
                                                        m_hashtable.Add("Status_C"             , "0");
                                                        m_hashtable.Add("Amount_N"             , Amount_N);
                                                        m_hashtable.Add("Benef_Acc_C"          , Benef_Acc_C);
                                                        m_hashtable.Add("Curr_Code_C"          , Curr_Code_C);
                                                        m_hashtable.Add("Remitter_C"           , Remitter_C);
                                                        m_hashtable.Add("File_Name_C"          , "STP");
                                                        m_hashtable.Add("File_Acc_OK_B"        , "0");
                                                        m_hashtable.Add("Posted_B"             , "0");

                                                        m_hashtable.Add("File_Date_D"          , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                                        m_hashtable.Add("Import_Date_D"        , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                                                        m_hashtable.Add("Source_Acc_C"         , Remitter_Acc_C);
                                                        m_hashtable.Add("Import_Time_C"        , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                                        m_hashtable.Add("Remitter_Acc_C"       , Remitter_Acc_C);

                                                        m_hashtable.Add("Mitigated_YN_B"         , "0");
                                                        m_hashtable.Add("Mitigated_Approved_YN_B", "0");
                                                        m_hashtable.Add("Mitigated_Charge_YN_B"  , "0");
                                                        m_hashtable.Add("Mitigated_Charge_N"     , 0.00);
                                                        m_hashtable.Add("Mitigated_Exch_Rate_N"  , 0.00);
                                                        m_hashtable.Add("Mitigated_PreInstNo"    , "0");
                                                        m_hashtable.Add("Mitigated_Num_Retries"  , "0");

                                                        m_hashtable.Add("Trn_Source_C"           , "STP");
                                                        m_hashtable.Add("Trn_PID_C"              , Trn_PID_C);
                                                        m_hashtable.Add("Trn_OIR_C"              , Trn_OIR_C);
                                                        m_hashtable.Add("Trn_Date_D"             , Value_Date_D);
                                                        m_hashtable.Add("Trn_Rec_C"              , "CTP");
                                                        m_hashtable.Add("Num_Retry_N"            , "0");
                                                        m_hashtable.Add("Posted_to_Suspense_B"   , "0");
                                                        m_hashtable.Add("Num_Retries_Suspense_N" , "0");
                                                        m_hashtable.Add("MsgType_C"              , "103");
                                                        m_hashtable.Add("MT_Msg_C"               , MT103Msg);
                                                        m_hashtable.Add("Return_Retry_No"        , "0");
                                                        m_hashtable.Add("Return_Posted_YN"       , "0");

                                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGSIn_Trxn", m_hashtable);

                                                        Str_to_display = string.Format("{0} Acquired Incoming Ref : {1}", DateTime.Now.ToString(), Reference_C);
                                                    } 
                                                }
                                            }
                                        }

                                        catch (Exception InwardExceptionMT103)
                                        {
                                            string Err_String = string.Format("{0}-{1}", InwardExceptionMT103.StackTrace.ToString(), InwardExceptionMT103.ToString());
                                            if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                            Str_to_display    = string.Format("Acquire Processed Outgoing - An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);

                                            string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                            SQLStr           = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", InwardExceptionMT103.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing 103", Err_Date2);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                        }
                                    }

                                    if ((Current_Line.Contains("{2:O012") == true) && (RTGS_Intellimatch_Integration_Enabled))
                                    {
                                        try
                                        {
                                            Our_Ref_C   = Utilities.Get_TagValueWithEnd(Current_Line, "{108:", "}", true);
                                            Reference_C = Utilities.Get_TagValueWithEnd(Current_Line, "{114:", "}", true);

                                            // Check for Duplicates// Check for Duplicates
                                            Check_str   = string.Format("Select COUNT(Reference_C) AS Rec_Count From tbl_RTGS_Outward_Processed_Staging WHERE Reference_C = '{0}'", Reference_C);
                                            int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                                            if (DupRecs == 0 )
                                            {

                                                string Process_Date_D = "";
                                                if (Reference_C.Length >= 30)
                                                {
                                                    Process_Date_D = Reference_C.Substring(16, 10);
                                                    Reference_C    = Reference_C.Substring(0, 16);
                                                    if (Process_Date_D.Length > 8) Process_Date_D = string.Format("{0}-{1}-{2}", Process_Date_D.Substring(0, 4), Process_Date_D.Substring(4, 2), Process_Date_D.Substring(6, 2));
                                                }

                                                //if (((Our_Ref_C.Contains("SB") == true) || (Our_Ref_C.Contains("S0") == true) || (Our_Ref_C.Contains("RBZ") == true)) && ((Reference_C.Contains("SBIC") == true) || (Reference_C.Contains("SBICT") == true)))
                                                // {
                                                Amount_N         = "0.00";
                                                string BenefBank = Utilities.Get_TagValueWithEnd(Current_Line, "{102:", "}", true);

                                                //string OG_Reference = "";
                                                //CodeRec = m_databaseClass.getDataSet(string.Format("SELECT Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn WHERE ORF_Val_C = '{0}'", Our_Ref_C.Trim())).Tables[0];
                                                //if (CodeRec.Rows.Count > 0)
                                                //{
                                                //    OG_Reference = CodeRec.Rows[0]["Trxn_Ref_C"].ToString();
                                                //}

                                                // Insert into the Outwards Table                           
                                                m_hashtable = new Hashtable();
                                                m_hashtable.Add("Our_Ref_C"               , Our_Ref_C);
                                                m_hashtable.Add("Reference_C"             , Reference_C);
                                                m_hashtable.Add("Amount_N"                , Amount_N);
                                                m_hashtable.Add("Instruction_Date_D"      , Process_Date_D);
                                                m_hashtable.Add("Process_Date_D"          , Curr_Date);
                                                m_hashtable.Add("Intellimatch_Posted_YN_B", "0");
                                                m_hashtable.Add("To_Bank_Desc_C"          , BenefBank);
                                                m_hashtable.Add("MQ_Msg_C"                , Current_Line);
                                                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Processed_Staging", m_hashtable);
                                                Int_Records_Found += 1;
                                            }
                                        }
                                        catch (Exception InwardExceptionO012)
                                        {
                                            string Err_String = string.Format("{0}-{1}", InwardExceptionO012.StackTrace.ToString(), InwardExceptionO012.ToString());
                                            if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                            Str_to_display = string.Format("Acquire Processed Outgoing O012- An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);

                                            string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                            SQLStr           =  string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", InwardExceptionO012.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing O012", Err_Date2);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                        }
                                    }

                                    // Manage the Balances File and Set trigger for Incoming to Reconcile transactions
                                    //if (MQMsg_Type == "NR01")
                                    //if (4 == 3)
                                    //{
                                    //    Tag_Separator.SetValue("PDT", 0);
                                    //    string Recon_Date = Get_TagValue(Current_Line);
                                    //    string Recon_Date_Time = string.Format("{0}/{1}/{2} {3}:{4}:{5}", Recon_Date.Substring(0, 4), Recon_Date.Substring(4, 2), Recon_Date.Substring(6, 2), Recon_Date.Substring(8, 2), Recon_Date.Substring(10, 2), Recon_Date.Substring(12, 2));
                                    //    string Recon_Date_Time_New = string.Format("{0}-{1}-{2}", Recon_Date.Substring(0, 4), Recon_Date.Substring(4, 2), Recon_Date.Substring(6, 2));

                                    //    if (m_databaseClass.getDataSet(String.Format("SELECT Recon_Processing_Date_D FROM tbl_RTGS_Recon WHERE REPLACE(CONVERT(VARCHAR(10),Recon_Processing_Date_D,111),'/','-') = '{0}'", Recon_Date_Time_New)).Tables[0].Rows.Count == 0)
                                    //    {
                                    //        string Intellimatch_Dir = ConfigurationManager.AppSettings["RTGS_Intellimatch_Balance_Folder"];
                                    //        if (!(Intellimatch_Dir.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) Intellimatch_Dir = Intellimatch_Dir + System.IO.Path.DirectorySeparatorChar.ToString();
                                    //        Recon_Date = string.Format("{0}_{1}_{2}", Recon_Date.Substring(0, 4), Recon_Date.Substring(4, 2), Recon_Date.Substring(6, 2));

                                    //        Tag_Separator.SetValue("AOB", 0);
                                    //        string Opening_Bal = Get_TagValue(Current_Line);
                                    //        Tag_Separator.SetValue("ACB", 0);
                                    //        string Closing_Bal = Get_TagValue(Current_Line);
                                    //        if (Opening_Bal.Contains("-")) Opening_Bal = Opening_Bal.Replace("-", "");
                                    //        if (Closing_Bal.Contains("-")) Closing_Bal = Closing_Bal.Replace("-", "");

                                    //        string Balances_Line = string.Format("BalanceType,Date,Balance{3}Opening,{0},{1}{3}Closing,{0},{2}{3}", Recon_Date.Replace("_", "/"), Opening_Bal, Closing_Bal, Environment.NewLine);
                                    //        File.AppendAllText(string.Format("{0}IntelliMatch_{1}_bal.txt", Intellimatch_Dir, Recon_Date), Balances_Line);

                                    //        m_hashtable = new Hashtable();
                                    //        m_hashtable.Add("Recon_Date_D", Curr_Date.Substring(0, 10));
                                    //        m_hashtable.Add("Recon_Processing_Date_D", Recon_Date_Time);
                                    //        m_hashtable.Add("Recon_Open_Bal_N", Opening_Bal);
                                    //        m_hashtable.Add("Recon_Close_Bal_N", Closing_Bal);
                                    //        m_hashtable.Add("Recon_Check_No_N", 0);
                                    //        m_hashtable.Add("Recon_Records_N", 0);
                                    //        m_hashtable.Add("Recon_Intellimatch_YN_B", 0);
                                    //        m_databaseClass.insertSQL("tbl_RTGS_Recon", m_hashtable);
                                    //    }
                                    //}
                                }
                            }
                        }

                        if (Int_Records_Found != 0)
                        {
                            Str_to_display = string.Format("{0} : Recieved ({1}) confirmation{2}", DateTime.Now.ToString(), Int_Records_Found, Int_Records_Found == 1 ? "" : "s");
                        }
                        // Now send confirmations of transactions having been processed.

                        //DataTable Confirmation_Rec;
                        //string Conf_Response = "";
                        //string Last_InstNo = "";
                        //string Curr_InstNo = "";
                        //Confirmation_Rec = m_databaseClass.getDataSet("SELECT * FROM vw_RTGS_Outward_Confirmation").Tables[0];
                        //if (Confirmation_Rec.Rows.Count != 0)
                        //{
                        //    foreach (DataRow InfoRow1 in Confirmation_Rec.Rows)
                        //    {
                        //        Curr_InstNo = InfoRow1["InstNo"].ToString().Trim();
                        //        Conf_Response = Send_MQ_Confirmation(InfoRow1["UserID"].ToString().Trim(), InfoRow1["MQData"].ToString().Trim(), InfoRow1["Reference_C"].ToString().Trim(), InfoRow1["InstNo"].ToString().Trim());
                        //        if (Conf_Response == "0")
                        //        {
                        //            if (Curr_InstNo != Last_InstNo)
                        //            {
                        //                m_databaseClass.exec(string.Format("UPDATE [tbl_RTGS_Outward_Trxn] SET [Info_Sent_YN_B] = 1 Where [RTGS_OutStage_Inst_N] = '{0}' AND [Info_Sent_YN_B] = 0", Curr_InstNo));
                        //            }
                        //        }
                        //        Last_InstNo = Curr_InstNo;
                        //    }
                        //}

                        //  Move the transactions to Target Table
                        //  m_databaseClass.exec("EXECUTE ustp_Outward_Processed_Insert");
                    }
                    // Now remove the Temporary MQPut Files
                                                                    // Now remove the Temporary MQPut Files
                    if (!KEEP_STP_TEMP_BATCHES)
                    {
                        if (System.IO.File.Exists(Tmp_File_name)         == true) System.IO.File.Delete(Tmp_File_name);
                        if (System.IO.File.Exists(Tmp_BatchFile_name)    == true) System.IO.File.Delete(Tmp_BatchFile_name);
                        if (System.IO.File.Exists(Tmp_ResponseFile_name) == true) System.IO.File.Delete(Tmp_ResponseFile_name);
                    }
                }
            }
            catch (IOException ex)
            {
                string Err_String = ex.StackTrace.ToString();
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Str_to_display = string.Format("Acquire Processed Outgoing - An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);

                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SQLStr           = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing", Err_Date2);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                return "2";
            }
            return "";
        }

        
        public string Acquire_Incoming_And_Confirmations_Cloud()
        {
            Hashtable m_hashtable = new Hashtable();
            string    SQLStr      = "";
            DataTable SysRec      = new DataTable();
            string    DecodedStr  = "";
            
            try
            {
                //NetworkCredential ftpCred = new NetworkCredential();
                //ftpCred.UserName= "select";
                //ftpCred.Password="P@ssw0rd123";
                //Utilities.DownloadFtpDirectory(@"ftp://10.106.12.2:8006/", ftpCred, @"C:\Temp\");

                //string EncodedStr1     = "ezE6RjAxRk1CWlpXSDBBWFhYMDcxNDAzMTM5MH17MjpPMTAzMTcwMTIxMDQwOFJFQlpaV0gwQVRJQTU4NTE1Mzk4MDIyMTA0MDgxNzAxTn17Mzp7MTAzOlpFVH17MTEzOldFQiB9ezEyMTozMTE5NDc3Zi0xYWY1LTRiMTAtOTRlYy1iZDE4MmZmYjBjNjF9ezExNTpaQkNCUDIxMDk4QTAwMDAyMjAyMTA0MDgxNjU5MjZ9fXs0Og0KOjIwOlpCQ0IyMTA5OFNBMDAwMDINCjoyM0I6Q1JFRA0KOjMyQToyMTA0MDhaV0w3Miw1DQo6NTBLOkRBTUJVRFpPIFNFQw0KOjUyQTpaQkNPWldIMA0KOjU5Oi80MjE5ODk0NjYzMzAyMg0KSE9MWSBDUk9TUyBJTlZFU1QNCjo3MUE6U0hBDQo6NzI6L1JFQy9DVFAvT0NEL1pCQ09aV0gwL1JSRi9aQlQ1NjkwNjANCi8vNDIxMDAwMi9BUFYvNjMyL01SVC9GU1AwL0JTQS9BRlJJDQovLzAwMVMvQktCL0ZNQlpaV0gwL09EVC8yMDIxMDQwOC9QUw0KLy9BL1pCQ08wMDFTL0JLUC9aQkNPWldIMC9MU1IvSE9WRUUNCi8vL0FQRS8zDQotfXs1OntDSEs6NzNGNjExMkFFNkY5fXtUTkc6fX0=";
                //byte[] EncodedDataStr1 = Convert.FromBase64String(EncodedStr1);
               
                //DecodedStr = Encoding.UTF8.GetString(EncodedDataStr1);

                //File.AppendAllText(@"C:\temp\testDecoded1.txt", string.Format("{0}{1}", DecodedStr, Environment.NewLine));

                bool MQ_Inward_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Inwards_MQ_DataAquisition;
                if (MQ_Inward_DataAquisition)
                {
                    DataTable CodeRec;
                    string Str_to_display    = "";
                    string textLine          = "";
                    int    Int_Records_Found = 0;
                    string lstContents       = "";
                    bool   TxtFound          = false;
                    string Amount_N          = "0.00";

                    string Our_Ref_C         = "";
                    string From_Bank_Desc    = "";
                    string From_Bank_Short_C = "";
                    string Reference_C       = "";
                    string Field32A          = "";
                    string MT205_Field21     = "";
                    string Value_Date_D      = "";
                    string Curr_Code_C       = "";
                    string Field50K          = "";
                    string Remitter_Acc_C    = "";
                    string Remitter_Detail   = "";
                    int    Remitter_Len      = 0;
                    int    Remitter_Start    = 0;
                    string Remitter_C        = "";

                    string Field59           = "";
                    string Benef_Acc_C       = "";
                    string Benef_Detail      = "";
                    int    Benef_Len         = 0;
                    int    Benef_Start       = 0;
                    string Benef_C           = "";
                    string Trn_PID_C         = "";
                    string Trn_OIR_C         = "";
                    string RTGS_Suspense_Acc = "";
                    int    Num_Retry_Config_N                    = 0;
                    string RTGS_Outwards_Temp_Directory          = "";
                    string RTGS_Inwards_FCUBS_Posting_Retry      = "";
                    string Processed_MQ_Manager                  = "";
                    string Processed_MQ_Queue                    = ""; ;
                    bool   RTGS_Intellimatch_Integration_Enabled = false;
                    bool   KEEP_STP_TEMP_BATCHES                 = false;
                    string STP_Currencies = "";
                    string Check_str      = "";
                    int    MT103_End      = 0;
                    string MT103Msg       = "";
                    string CLOUD_FTP_SERVER_IP              = "";           
                    string CLOUD_FTP_SERVER_PORT            = "";         
                    string CLOUD_FTP_USER_ID                = "";             
                    string CLOUD_FTP_PASSWORD               = "";            
                    string CLOUD_FTP_INCOMING_REMOTE_DIR    = ""; 
                    string CLOUD_FTP_INCOMING_STAGING_DIR   = "";
                    string CLOUD_FTP_INCOMING_BACKUP_DIR    = ""; 
                    string CLOUD_FTP_INCOMING_FILE_PATTERN  = "";
                    bool   CLOUD_STP_ENABLED                = false;
                    int    PosSep           = 0;
                    string Curr_File        = "";
                    string Curr_File_1      = "";
                    string Bck_Up_File_Name = "";
                    string FullFileText     = "";
                    string CurrentRecord    = ""; 

                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RTGS_Outwards_Temp_Directory','RTGS_Inwards_FCUBS_Posting_Retry','Processed_MQ_Manager','Processed_MQ_Queue','RTGS_Intellimatch_Integration_Enabled','STP_Currencies','KEEP_STP_TEMP_BATCHES','CLOUD_FTP_SERVER_IP','CLOUD_FTP_SERVER_PORT','CLOUD_FTP_USER_ID','CLOUD_FTP_PASSWORD','CLOUD_FTP_INCOMING_REMOTE_DIR','CLOUD_FTP_INCOMING_STAGING_DIR','CLOUD_FTP_INCOMING_BACKUP_DIR','CLOUD_FTP_INCOMING_FILE_PATTERN','CLOUD_STP_ENABLED') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Intellimatch_Integration_Enabled".ToUpper()) RTGS_Intellimatch_Integration_Enabled = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "KEEP_STP_TEMP_BATCHES".ToUpper())                 KEEP_STP_TEMP_BATCHES                 = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Inwards_FCUBS_Posting_Retry".ToUpper())      RTGS_Inwards_FCUBS_Posting_Retry      = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper())          RTGS_Outwards_Temp_Directory          = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "Processed_MQ_Queue".ToUpper())                    Processed_MQ_Queue                    = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "Processed_MQ_Manager".ToUpper())                  Processed_MQ_Manager                  = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "STP_Currencies".ToUpper())                        STP_Currencies                        = param_Row["Parameter_Value"].ToString().Trim();


                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_SERVER_IP".ToUpper())                   CLOUD_FTP_SERVER_IP                   = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_SERVER_PORT".ToUpper())                 CLOUD_FTP_SERVER_PORT                 = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_USER_ID".ToUpper())                     CLOUD_FTP_USER_ID                     = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_PASSWORD".ToUpper())                    CLOUD_FTP_PASSWORD                    = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_INCOMING_REMOTE_DIR".ToUpper())         CLOUD_FTP_INCOMING_REMOTE_DIR         = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_INCOMING_STAGING_DIR".ToUpper())        CLOUD_FTP_INCOMING_STAGING_DIR        = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_INCOMING_BACKUP_DIR".ToUpper())         CLOUD_FTP_INCOMING_BACKUP_DIR         = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_INCOMING_FILE_PATTERN".ToUpper())       CLOUD_FTP_INCOMING_FILE_PATTERN       = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_STP_ENABLED".ToUpper())                     CLOUD_STP_ENABLED     = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;

                    }

                    if (CLOUD_STP_ENABLED)
                    {
                        int.TryParse(RTGS_Inwards_FCUBS_Posting_Retry, out Num_Retry_Config_N);
                        Num_Retry_Config_N += 1;
                        if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString())))   RTGS_Outwards_Temp_Directory   = RTGS_Outwards_Temp_Directory   + System.IO.Path.DirectorySeparatorChar.ToString();
                        if (!(CLOUD_FTP_INCOMING_STAGING_DIR.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) CLOUD_FTP_INCOMING_STAGING_DIR = CLOUD_FTP_INCOMING_STAGING_DIR + System.IO.Path.DirectorySeparatorChar.ToString();
                        if (!(CLOUD_FTP_INCOMING_BACKUP_DIR.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString())))  CLOUD_FTP_INCOMING_BACKUP_DIR  = CLOUD_FTP_INCOMING_BACKUP_DIR  + System.IO.Path.DirectorySeparatorChar.ToString();

                        // Create the Batch File to Acquire the Transactions
                        string Date_Var              = string.Format("{0}{1}{2:yyyy-MM-dd_HH_mm_ss_fff}", RTGS_Outwards_Temp_Directory, "Processed_",DateTime.Now);
                        string Tmp_File_name         = string.Format("{0}.txt", Date_Var);
                        string Tmp_BatchFile_name    = string.Format("{0}.bat", Date_Var);
                        string Tmp_ResponseFile_name = string.Format("{0}.rsp", Date_Var);
                        string BatString             = string.Format("C:\\RTGS_In\\Purchased_DLL\\amqsget_7_select {0} {1} > {2}{3}Exit", Processed_MQ_Queue, Processed_MQ_Manager, Tmp_ResponseFile_name, Environment.NewLine);
                        //File.WriteAllText(Tmp_BatchFile_name, BatString);

                        // Now get the files from the FTP site
                        SessionOptions sessionOptions = new SessionOptions
                        {
                            Protocol   = Protocol.Ftp,
                            HostName   = CLOUD_FTP_SERVER_IP,
                            PortNumber = Convert.ToInt16(CLOUD_FTP_SERVER_PORT),
                            UserName   = CLOUD_FTP_USER_ID,
                            Password   = CLOUD_FTP_PASSWORD,
                        };

                        using (Session session = new Session())
                        {
                            // Connect
                            TransferOptions transferOptions = new TransferOptions();
                            session.Open(sessionOptions);
                            // Download files
                            session.GetFiles(CLOUD_FTP_INCOMING_REMOTE_DIR, CLOUD_FTP_INCOMING_STAGING_DIR, true).Check();
                        }

                        string  Curr_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);
                        string[] FileList = Directory.GetFiles(CLOUD_FTP_INCOMING_STAGING_DIR, CLOUD_FTP_INCOMING_FILE_PATTERN);
                        string FileName   = null;

                        int File_Number   = 0;
                        foreach (string FileName_loopVariable in FileList)
                        {
                            FullFileText = File.ReadAllText(FileName_loopVariable);

                            FileName    = FileName_loopVariable;
                            PosSep      = FileName.LastIndexOf("\\");

                            Curr_File   = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
                            Curr_File_1 = CLOUD_FTP_INCOMING_STAGING_DIR + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

                            Bck_Up_File_Name = string.Format("{0}{1}_{2:yyyMMddHHmmss}", CLOUD_FTP_INCOMING_BACKUP_DIR , FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1)), DateTime.Now);

                            //textLine = File.ReadAllText("C:/RTGS_In/Data/RTGS_OutWards/Temp/Processed_2015_11_21_23_50_20_437_BABC.rsp");
                            //textLine = File.ReadAllText("C:/RTGS_In/Data/Intellimatch/Int_Balances_Input.txt");
                            //textLine = File.ReadAllText(@"C:\TEMP\20200814.tx5");

                            FullFileText = Utilities.RemoveSpecialCharacters(FullFileText);
                            //FullFileText = FullFileText.Replace("MDE", "").Replace("", "").Replace("", "").Replace("\0", "").Replace("", "").Replace("H3MQSTR   AMQ PZWMAX      UO&O", "");

                            // Loop For records within one file
                            FullFileText = FullFileText.Replace("Saa:DataPDU", "DataPDU");
                            Tag_Separator.SetValue("<DataPDU", 0);
                            string[] FullFileTextParams = FullFileText.Split(Tag_Separator, StringSplitOptions.None);
                            double FullFileTextLines    = FullFileTextParams.Length;
                            
                            for (int FullFileTextLoopNo = 0; FullFileTextLoopNo < FullFileTextLines; FullFileTextLoopNo++)
                            {
                                CurrentRecord = FullFileTextParams[FullFileTextLoopNo].ToString();
                                if ((CurrentRecord.Contains("</Body>")) || (CurrentRecord.Contains("</Saa:Body>")))
                                {
                                    CurrentRecord = CurrentRecord.Replace("<Saa:Body>", "<Body>").Replace("</Saa:Body>", "</Body>");
                                    textLine = Utilities.Get_TagValueWithEnd(CurrentRecord, "<Body>", "</Body>", true).Trim();
                                    byte[] EncodedDataStr = Convert.FromBase64String(textLine);
                                    textLine              = Encoding.UTF8.GetString(EncodedDataStr);

                                    textLine = textLine.Replace(Environment.NewLine, "#R#").Replace("\r\n", "#R#,").Replace(((char)10).ToString(), "#R# ").Replace(((char)13).ToString(), " #R#").Trim();
                                    if (textLine != "")
                                    {
                                        File.AppendAllText(string.Format("{0}{1}.tx5", CLOUD_FTP_INCOMING_BACKUP_DIR, Curr_Date.Replace("-", "").Substring(0, 8)), textLine + (char)10);
                                    }

                                    string SaveResp = Save_ResponseData("Incoming", "Incoming", Date_Var, textLine);
                                    Tag_Separator.SetValue("{1:F01FMBZ", 0);

                                    string[] textLineParams = textLine.Split(Tag_Separator, StringSplitOptions.None);
                                    double   MTLines        = textLineParams.Length;

                                    for (int LoopNo = 0; LoopNo < MTLines; LoopNo++)
                                    {
                                        string Current_Line = textLineParams[LoopNo].ToString();
                                        MT103_End = Current_Line.LastIndexOf("-}");
                                        if (MT103_End != -1)
                                        {
                                            MT103Msg = Current_Line.Substring(0, MT103_End);
                                        }
                                        else
                                        {
                                            MT103Msg = "";
                                        }

                                        if (Current_Line.Length > 80)
                                        {
                                            string MQMsg_Type = "2:O";
                                            {
                                                // MT205
                                                if (Current_Line.Contains("{2:O205") == true)
                                                {
                                                    try
                                                    {
                                                        Our_Ref_C         = "";
                                                        From_Bank_Desc    = "";
                                                        From_Bank_Short_C = "";
                                                        Reference_C       = "";
                                                        Field32A          = "";
                                                        Value_Date_D      = "";
                                                        Curr_Code_C       = "";
                                                        RTGS_Suspense_Acc = "";
                                                        Field50K          = "";
                                                        Remitter_Acc_C    = "";
                                                        Remitter_Len      = 0;
                                                        Remitter_Start    = 0;
                                                        Remitter_C        = "";
                                                        MT205_Field21     = "";

                                                        Field59           = "";
                                                        Benef_Acc_C       = "";
                                                        Benef_Len         = 0;
                                                        Benef_Start       = 0;
                                                        Benef_C           = "";
                                                        Trn_PID_C         = "";
                                                        Trn_OIR_C         = "";

                                                        From_Bank_Desc    = Current_Line.Substring(36, 8);
                                                        From_Bank_Short_C = Current_Line.Substring(36, 3);
                                                        Reference_C       = Utilities.Get_TagValueWithEnd(Current_Line, "{115:", "}", true);
                                               
                                                        if (Reference_C.Length > 16) Reference_C = Reference_C.Substring(0, 16);

                                                        // Check for Duplicates
                                                        Check_str   = string.Format("Select COUNT(Reference_C) AS Rec_Count From tbl_RTGSIn_Trxn WHERE Reference_C = '{0}'", Reference_C);
                                                        int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                                                        if (DupRecs == 0 )
                                                        {
                                                            if (Reference_C.Contains("REBZ") == true)
                                                            {
                                                                Field32A  = Utilities.Get_TagValueWithEnd(Current_Line, ":32A:", ":", true).Replace("#R#", "");
                                                                if (Field32A.Length < 9)
                                                                {
                                                                    // Do Nothing as this is incorrect
                                                                }
                                                                else
                                                                {
                                                                    Value_Date_D = string.Format("{0:yyyy}-{1}-{2}", DateTime.Now, Field32A.Substring(2, 2), Field32A.Substring(4, 2));
                                                                    Curr_Code_C  = Field32A.Substring(6, 3);

                                                                    if ((STP_Currencies.Contains(Curr_Code_C)) && (Curr_Code_C != ""))
                                                                    {
                                                                        //Now get the Suspense account
                                                                        SQLStr = string.Format("SELECT RTGS_Suspense_Acc_C FROM dbo.tbl_Currencies WITH (NOLOCK) WHERE Curr_Short_Name = '{0}'", Curr_Code_C);
                                                                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                                                        foreach (DataRow param_Row in SysRec.Rows)
                                                                        {
                                                                            RTGS_Suspense_Acc = param_Row["RTGS_Suspense_Acc_C"].ToString().Trim();
                                                                        }

                                                                        Amount_N       = Utilities.Get_TagValueWithEnd(Field32A, Curr_Code_C, ":", false).Replace(",", ".").Trim();
                                                                        if (Amount_N.EndsWith(".")) Amount_N += "00";

                                                                        Remitter_Acc_C  = "";
                                                                        Remitter_Len    = Field50K.Length;
                                                                        Remitter_C      = From_Bank_Desc;
                                                                        Remitter_C      = Utilities.RemoveDuplicate_Words(Remitter_C, 100);
                                                                        //if (Remitter_C.Length > 100) Remitter_C = Remitter_C.Substring(0, 100);

                                                                        Benef_Acc_C    = RTGS_Suspense_Acc;
                                                                        Benef_C        = "FMBZZWHX";
                                                                        Benef_C        = Utilities.RemoveDuplicate_Words(Benef_C, 100);
                                                                        MT205_Field21  = Utilities.Get_TagValueWithEnd(Current_Line, ":21:", ":", true).Trim();
                                                                        Trn_PID_C      = MT205_Field21.Replace("#R#", "");
                                                                        Trn_OIR_C      = Utilities.Get_TagValueWithEnd(Current_Line, ":20:", ":", true).Replace("#R#", "");

                                                                        Trn_OIR_C      = Utilities.RemoveDuplicate_Words(Trn_OIR_C, 20);
                                                                        Trn_PID_C      = Utilities.RemoveDuplicate_Words(Trn_PID_C, 100);

                                                                        // Directly Populate Incoming Records
                                                                        m_hashtable = new Hashtable();
                                                                        m_hashtable.Add("From_Bank_Desc_C"     , From_Bank_Desc);
                                                                        m_hashtable.Add("From_Bank_Short_C"    , From_Bank_Short_C);
                                                                        m_hashtable.Add("Reference_C"          ,  Reference_C);
                                                                        m_hashtable.Add("Value_Date_D"         , Value_Date_D);
                                                                        m_hashtable.Add("Benef_C"              , Benef_C);

                                                                        m_hashtable.Add("Benef_Names_Similar_B", "0");
                                                                        m_hashtable.Add("Status_C"             , "0");
                                                                        m_hashtable.Add("Amount_N"             , Amount_N);
                                                                        m_hashtable.Add("Benef_Acc_C"          , Benef_Acc_C);
                                                                        m_hashtable.Add("Curr_Code_C"          , Curr_Code_C);
                                                                        m_hashtable.Add("Remitter_C"           , Remitter_C);
                                                                        m_hashtable.Add("File_Name_C"          , "STP");
                                                                        m_hashtable.Add("File_Acc_OK_B"        , "0");
                                                                        m_hashtable.Add("Posted_B"             , "0");

                                                                        m_hashtable.Add("File_Date_D"          , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                                                        m_hashtable.Add("Import_Date_D"        , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                                                                        m_hashtable.Add("Source_Acc_C"         , Remitter_Acc_C);
                                                                        m_hashtable.Add("Import_Time_C"        , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                                                        m_hashtable.Add("Remitter_Acc_C"       , Remitter_Acc_C);

                                                                        m_hashtable.Add("Mitigated_YN_B"       , "0");
                                                                        m_hashtable.Add("Mitigated_Approved_YN_B", "0");
                                                                        m_hashtable.Add("Mitigated_Charge_YN_B"  , "0");
                                                                        m_hashtable.Add("Mitigated_Charge_N"     , 0.00);
                                                                        m_hashtable.Add("Mitigated_Exch_Rate_N"  , 0.00);
                                                                        m_hashtable.Add("Mitigated_PreInstNo"    , "0");
                                                                        m_hashtable.Add("Mitigated_Num_Retries"  , "0");

                                                                        m_hashtable.Add("Trn_Source_C"           , "STP");
                                                                        m_hashtable.Add("Trn_PID_C"              , Trn_PID_C);
                                                                        m_hashtable.Add("Trn_OIR_C"              , Trn_OIR_C);
                                                                        m_hashtable.Add("Trn_Date_D"             , Value_Date_D);
                                                                        m_hashtable.Add("Trn_Rec_C"              , "CTP");
                                                                        m_hashtable.Add("Num_Retry_N"            , Num_Retry_Config_N);
                                                                        m_hashtable.Add("Status_Desc"            , "Message Type MT205");
                                                                        m_hashtable.Add("Posted_to_Suspense_B"   , "0");
                                                                        m_hashtable.Add("Num_Retries_Suspense_N" , "0");
                                                                        m_hashtable.Add("MsgType_C"              , "205");
                                                                        m_hashtable.Add("MT_Msg_C"               , MT103Msg);
                                                                        m_hashtable.Add("Return_Retry_No"        , "0");
                                                                        m_hashtable.Add("Return_Posted_YN"       , "0");

                                                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGSIn_Trxn", m_hashtable);
                                                                        Str_to_display = string.Format("{0} Acquired Incoming Ref : {1}", DateTime.Now.ToString(), Reference_C);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    catch (Exception InwardException0205)
                                                    {
                                                        string Err_String = string.Format("{0}-{1}", InwardException0205.StackTrace.ToString(), InwardException0205.ToString());
                                                        if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);

                                                        Str_to_display   = string.Format("Acquire Processed Outgoing - An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                                                        string Err_Date2 = m_databaseClass.getDataSet("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime").Tables[0].Rows[0][0].ToString();
                                                        SQLStr           = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", InwardException0205.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing 0205", Err_Date2);
                                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                                    }
                                                }

                                                // MT103
                                                if (Current_Line.Contains("{2:O103") == true)
                                                {
                                                    try
                                                    {
                                                        Our_Ref_C         = "";
                                                        From_Bank_Desc    = "";
                                                        From_Bank_Short_C = "";
                                                        Reference_C       = "";
                                                        Field32A          = "";
                                                        Value_Date_D      = "";
                                                        Curr_Code_C       = "";
                                                        Field50K          = "";
                                                        Remitter_Acc_C    = "";
                                                        Remitter_Len      = 0;
                                                        Remitter_Start    = 0;
                                                        Remitter_C        = "";

                                                        Field59           = "";
                                                        Benef_Acc_C       = "";
                                                        Benef_Len         = 0;
                                                        Benef_Start       = 0;
                                                        Benef_C           = "";
                                                        Trn_PID_C         = "";
                                                        Trn_OIR_C         = "";

                                                        From_Bank_Desc    = Current_Line.Substring(36, 8);
                                                        From_Bank_Short_C = Current_Line.Substring(36, 3);
                                                        Reference_C       = Utilities.Get_TagValueWithEnd(Current_Line, "{115:", "}", true);
                                                        if (Reference_C.Length > 16) Reference_C = Reference_C.Substring(0, 16);

                                                        // Check for Duplicates
                                                        Check_str   = string.Format("Select COUNT(Reference_C) AS Rec_Count From tbl_RTGSIn_Trxn WHERE Reference_C = '{0}'", Reference_C);
                                                        int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                                                        if (DupRecs == 0 )
                                                        {
                                                            Field32A          = Utilities.Get_TagValueWithEnd(Current_Line, ":32A:", ":", true).Replace("#R#", "");
                                                            if (Field32A.Length < 9)
                                                            {
                                                                // Do Nothing as this is incorrect. Cannot process a transaction without an Amount
                                                            }
                                                            else
                                                            {
                                                                Value_Date_D = string.Format("{0:yyyy}-{1}-{2}", DateTime.Now, Field32A.Substring(2, 2), Field32A.Substring(4, 2));
                                                                Curr_Code_C  = Field32A.Substring(6, 3);

                                                                if ((STP_Currencies.Contains(Curr_Code_C)) && (Curr_Code_C != ""))
                                                                {
                                                                    Amount_N     = Utilities.Get_TagValueWithEnd(Field32A, Curr_Code_C, ":", false).Replace(",", ".").Trim();
                                                                    if (Amount_N.EndsWith(".")) Amount_N += "00";

                                                                    Field50K       = Utilities.Get_TagValueWithEnd(Current_Line, ":50K:", ":", true);
                                                                    Remitter_Acc_C = Utilities.Get_TagValueWithEnd(Field50K, "/", "#R#", true).Trim();
                                                                    Remitter_Len   = Field50K.Length;
                                                                    Remitter_Start = Field50K.IndexOf("#R#");
                                                                    if (Remitter_Start != -1)
                                                                    {
                                                                        if (Field50K.IndexOf("/") == -1)
                                                                        {
                                                                            Remitter_C = Field50K.Replace("#R#", "");
                                                                        }
                                                                        else
                                                                        {
                                                                            Remitter_C = Field50K.Substring(Remitter_Start, Remitter_Len - Remitter_Start).Replace("#R#", "");
                                                                        }
                                                                        Remitter_C = System.Text.RegularExpressions.Regex.Replace(Remitter_C, @"\s{2,}", " ");
                                                                    }

                                                                    //if (Remitter_C.Length > 100) Remitter_C = Remitter_C.Substring(0, 100);
                                                                    Remitter_C  = Utilities.RemoveDuplicate_Words(Remitter_C, 100);

                                                                    // Old Field 59
                                                                    Field59     = Utilities.Get_TagValueWithEnd(Current_Line, ":59:", ":", true);
                                                                    Benef_Acc_C = Utilities.Get_TagValueWithEnd(Field59, "/", "#R#", true).Trim();
                                                                    Benef_Len   = Field59.Length;
                                                                    Benef_Start = Field59.IndexOf("#R#");
                                                                    if (Benef_Start != -1)
                                                                    {
                                                                        if (Field59.IndexOf("/") == -1)
                                                                        {
                                                                            Benef_C = Field59.Replace("#R#", "");
                                                                        }
                                                                        else
                                                                        {
                                                                            Benef_C = Field59.Substring(Benef_Start, Benef_Len - Benef_Start).Replace("#R#", "");
                                                                        }
                                                                        Benef_C = System.Text.RegularExpressions.Regex.Replace(Benef_C, @"\s{2,}", " ");
                                                                    }

                                                                    // Cater for Stanbic Field 59A
                                                                    if (Current_Line.Contains(":59A:") == true)
                                                                    {
                                                                        Field59     = Utilities.Get_TagValueWithEnd(Current_Line, ":59A:", ":", true);
                                                                        Benef_Acc_C = Utilities.Get_TagValueWithEnd(Field59, "/", " ", true).Trim();
                                                                        if (Benef_Acc_C == "")
                                                                        {
                                                                            Benef_Acc_C = Utilities.Get_TagValueWithEnd(Field59, "/", "#R#", true).Trim();
                                                                        }
                                                                        Benef_C = Utilities.Get_TagValueWithEnd(Current_Line, ":72:/REC/CTP/RRF/", "BRF", true).Trim().Replace("#R#", "").Replace("/", "");
                                                                        Benef_C = System.Text.RegularExpressions.Regex.Replace(Benef_C, @"\s{2,}", " ");
                                                                    }

                                                                    Benef_C   = Utilities.RemoveDuplicate_Words(Benef_C, 100);

                                                                    Trn_PID_C = Utilities.Get_TagValueWithEnd(Current_Line, ":70:", ":", true).Replace("#R#", "");
                                                                    Trn_OIR_C = Utilities.Get_TagValueWithEnd(Current_Line, ":20:", ":", true).Replace("#R#", "");

                                                                    Trn_OIR_C = Utilities.RemoveDuplicate_Words(Trn_OIR_C, 20);
                                                                    Trn_PID_C = Utilities.RemoveDuplicate_Words(Trn_PID_C, 100);

                                                                    // Directly Populate Incoming Records
                                                                    m_hashtable = new Hashtable();
                                                                    m_hashtable.Add("From_Bank_Desc_C"     , From_Bank_Desc);
                                                                    m_hashtable.Add("From_Bank_Short_C"    , From_Bank_Short_C);
                                                                    m_hashtable.Add("Reference_C"          , Reference_C);
                                                                    m_hashtable.Add("Value_Date_D"         , Value_Date_D);
                                                                    m_hashtable.Add("Benef_C"              , Benef_C);

                                                                    m_hashtable.Add("Benef_Names_Similar_B", "0");
                                                                    m_hashtable.Add("Status_C"             , "0");
                                                                    m_hashtable.Add("Amount_N"             , Amount_N);
                                                                    m_hashtable.Add("Benef_Acc_C"          , Benef_Acc_C);
                                                                    m_hashtable.Add("Curr_Code_C"          , Curr_Code_C);
                                                                    m_hashtable.Add("Remitter_C"           , Remitter_C);
                                                                    m_hashtable.Add("File_Name_C"          , "STP");
                                                                    m_hashtable.Add("File_Acc_OK_B"        , "0");
                                                                    m_hashtable.Add("Posted_B"             , "0");

                                                                    m_hashtable.Add("File_Date_D"          , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                                                    m_hashtable.Add("Import_Date_D"        , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));

                                                                    m_hashtable.Add("Source_Acc_C"         , Remitter_Acc_C);
                                                                    m_hashtable.Add("Import_Time_C"        , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                                                    m_hashtable.Add("Remitter_Acc_C"       , Remitter_Acc_C);

                                                                    m_hashtable.Add("Mitigated_YN_B"         , "0");
                                                                    m_hashtable.Add("Mitigated_Approved_YN_B", "0");
                                                                    m_hashtable.Add("Mitigated_Charge_YN_B"  , "0");
                                                                    m_hashtable.Add("Mitigated_Charge_N"     , 0.00);
                                                                    m_hashtable.Add("Mitigated_Exch_Rate_N"  , 0.00);
                                                                    m_hashtable.Add("Mitigated_PreInstNo"    , "0");
                                                                    m_hashtable.Add("Mitigated_Num_Retries"  , "0");

                                                                    m_hashtable.Add("Trn_Source_C"           , "STP");
                                                                    m_hashtable.Add("Trn_PID_C"              , Trn_PID_C);
                                                                    m_hashtable.Add("Trn_OIR_C"              , Trn_OIR_C);
                                                                    m_hashtable.Add("Trn_Date_D"             , Value_Date_D);
                                                                    m_hashtable.Add("Trn_Rec_C"              , "CTP");
                                                                    m_hashtable.Add("Num_Retry_N"            , "0");
                                                                    m_hashtable.Add("Posted_to_Suspense_B"   , "0");
                                                                    m_hashtable.Add("Num_Retries_Suspense_N" , "0");
                                                                    m_hashtable.Add("MsgType_C"              , "103");
                                                                    m_hashtable.Add("MT_Msg_C"               , MT103Msg);
                                                                    m_hashtable.Add("Return_Retry_No"        , "0");
                                                                    m_hashtable.Add("Return_Posted_YN"       , "0");

                                                                    SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGSIn_Trxn", m_hashtable);

                                                                    Str_to_display = string.Format("{0} Acquired Incoming Ref : {1}", DateTime.Now.ToString(), Reference_C);
                                                                } 
                                                            }
                                                        }
                                                    }

                                                    catch (Exception InwardExceptionMT103)
                                                    {
                                                        string Err_String = string.Format("{0}-{1}", InwardExceptionMT103.StackTrace.ToString(), InwardExceptionMT103.ToString());
                                                        if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                                        Str_to_display    = string.Format("Acquire Processed Outgoing - An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);

                                                        string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                                        SQLStr           = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", InwardExceptionMT103.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing 103", Err_Date2);
                                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                                    }
                                                }

                                                if ((Current_Line.Contains("{2:O012") == true) && (RTGS_Intellimatch_Integration_Enabled))
                                                {
                                                    try
                                                    {
                                                        Our_Ref_C   = Utilities.Get_TagValueWithEnd(Current_Line, "{108:", "}", true);
                                                        Reference_C = Utilities.Get_TagValueWithEnd(Current_Line, "{114:", "}", true);
                                                        if (Reference_C.Length > 16) Reference_C = Reference_C.Substring(0, 16);

                                                        // Check for Duplicates// Check for Duplicates
                                                        Check_str   = string.Format("Select COUNT(Reference_C) AS Rec_Count From tbl_RTGS_Outward_Processed_Staging WHERE Reference_C = '{0}'", Reference_C);
                                                        int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                                                        if (DupRecs == 0 )
                                                        {

                                                            string Process_Date_D = "";
                                                            if (Reference_C.Length >= 30)
                                                            {
                                                                Process_Date_D = Reference_C.Substring(16, 10);
                                                                Reference_C    = Reference_C.Substring(0, 16);
                                                                if (Process_Date_D.Length > 8) Process_Date_D = string.Format("{0}-{1}-{2}", Process_Date_D.Substring(0, 4), Process_Date_D.Substring(4, 2), Process_Date_D.Substring(6, 2));
                                                            }

                                                            //if (((Our_Ref_C.Contains("SB") == true) || (Our_Ref_C.Contains("S0") == true) || (Our_Ref_C.Contains("RBZ") == true)) && ((Reference_C.Contains("SBIC") == true) || (Reference_C.Contains("SBICT") == true)))
                                                            // {
                                                            Amount_N         = "0.00";
                                                            string BenefBank = Utilities.Get_TagValueWithEnd(Current_Line, "{102:", "}", true);

                                                            //string OG_Reference = "";
                                                            //CodeRec = m_databaseClass.getDataSet(string.Format("SELECT Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn WHERE ORF_Val_C = '{0}'", Our_Ref_C.Trim())).Tables[0];
                                                            //if (CodeRec.Rows.Count > 0)
                                                            //{
                                                            //    OG_Reference = CodeRec.Rows[0]["Trxn_Ref_C"].ToString();
                                                            //}

                                                            // Insert into the Outwards Table                           
                                                            m_hashtable = new Hashtable();
                                                            m_hashtable.Add("Our_Ref_C"               , Our_Ref_C);
                                                            m_hashtable.Add("Reference_C"             , Reference_C);
                                                            m_hashtable.Add("Amount_N"                , Amount_N);
                                                            m_hashtable.Add("Instruction_Date_D"      , Process_Date_D);
                                                            m_hashtable.Add("Process_Date_D"          , Curr_Date);
                                                            m_hashtable.Add("Intellimatch_Posted_YN_B", "0");
                                                            m_hashtable.Add("To_Bank_Desc_C"          , BenefBank);
                                                            m_hashtable.Add("MQ_Msg_C"                , Current_Line);
                                                            SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Processed_Staging", m_hashtable);
                                                            Int_Records_Found += 1;
                                                        }
                                                    }
                                                    catch (Exception InwardExceptionO012)
                                                    {
                                                        string Err_String = string.Format("{0}-{1}", InwardExceptionO012.StackTrace.ToString(), InwardExceptionO012.ToString());
                                                        if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                                                        Str_to_display = string.Format("Acquire Processed Outgoing O012- An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);

                                                        string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                                                        SQLStr           =  string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", InwardExceptionO012.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing O012", Err_Date2);
                                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                                    }
                                                }

                                                // Manage the Balances File and Set trigger for Incoming to Reconcile transactions
                                                //if (MQMsg_Type == "NR01")
                                                //if (4 == 3)
                                                //{
                                                //    Tag_Separator.SetValue("PDT", 0);
                                                //    string Recon_Date = Get_TagValue(Current_Line);
                                                //    string Recon_Date_Time = string.Format("{0}/{1}/{2} {3}:{4}:{5}", Recon_Date.Substring(0, 4), Recon_Date.Substring(4, 2), Recon_Date.Substring(6, 2), Recon_Date.Substring(8, 2), Recon_Date.Substring(10, 2), Recon_Date.Substring(12, 2));
                                                //    string Recon_Date_Time_New = string.Format("{0}-{1}-{2}", Recon_Date.Substring(0, 4), Recon_Date.Substring(4, 2), Recon_Date.Substring(6, 2));

                                                //    if (m_databaseClass.getDataSet(String.Format("SELECT Recon_Processing_Date_D FROM tbl_RTGS_Recon WHERE REPLACE(CONVERT(VARCHAR(10),Recon_Processing_Date_D,111),'/','-') = '{0}'", Recon_Date_Time_New)).Tables[0].Rows.Count == 0)
                                                //    {
                                                //        string Intellimatch_Dir = ConfigurationManager.AppSettings["RTGS_Intellimatch_Balance_Folder"];
                                                //        if (!(Intellimatch_Dir.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) Intellimatch_Dir = Intellimatch_Dir + System.IO.Path.DirectorySeparatorChar.ToString();
                                                //        Recon_Date = string.Format("{0}_{1}_{2}", Recon_Date.Substring(0, 4), Recon_Date.Substring(4, 2), Recon_Date.Substring(6, 2));

                                                //        Tag_Separator.SetValue("AOB", 0);
                                                //        string Opening_Bal = Get_TagValue(Current_Line);
                                                //        Tag_Separator.SetValue("ACB", 0);
                                                //        string Closing_Bal = Get_TagValue(Current_Line);
                                                //        if (Opening_Bal.Contains("-")) Opening_Bal = Opening_Bal.Replace("-", "");
                                                //        if (Closing_Bal.Contains("-")) Closing_Bal = Closing_Bal.Replace("-", "");

                                                //        string Balances_Line = string.Format("BalanceType,Date,Balance{3}Opening,{0},{1}{3}Closing,{0},{2}{3}", Recon_Date.Replace("_", "/"), Opening_Bal, Closing_Bal, Environment.NewLine);
                                                //        File.AppendAllText(string.Format("{0}IntelliMatch_{1}_bal.txt", Intellimatch_Dir, Recon_Date), Balances_Line);

                                                //        m_hashtable = new Hashtable();
                                                //        m_hashtable.Add("Recon_Date_D", Curr_Date.Substring(0, 10));
                                                //        m_hashtable.Add("Recon_Processing_Date_D", Recon_Date_Time);
                                                //        m_hashtable.Add("Recon_Open_Bal_N", Opening_Bal);
                                                //        m_hashtable.Add("Recon_Close_Bal_N", Closing_Bal);
                                                //        m_hashtable.Add("Recon_Check_No_N", 0);
                                                //        m_hashtable.Add("Recon_Records_N", 0);
                                                //        m_hashtable.Add("Recon_Intellimatch_YN_B", 0);
                                                //        m_databaseClass.insertSQL("tbl_RTGS_Recon", m_hashtable);
                                                //    }
                                                //}
                                            }
                                        }
                                    }
                                }
                            }
                            if (System.IO.File.Exists(FileName) == true) System.IO.File.Copy(FileName,Bck_Up_File_Name,true);
                            if (System.IO.File.Exists(FileName) == true) System.IO.File.Delete(FileName);
                        }
                    }
                }
            }
            catch (IOException ex)
            {
                string Err_String = ex.StackTrace.ToString();
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Str_to_display = string.Format("Acquire Processed Outgoing - An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);

                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SQLStr           = string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire Processed Outgoing", Err_Date2);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                return "2";
            }
            return "";
        }
        
        
        string Post_Outward_to_Cloud()
        {
            string SQLStr         = "";
            string Source_Ref     = "";
            string Str_to_display = "";
            int    File_Loop_No   = 1;
            string textLine       = "";
            string MQ_Format_Msg  = "";

            bool   RTGS_Outwards_Live_Instance        = false;
            string CentralBankCode                    = "";
            string RTGS_Outwards_Live_CentralBankCode = "";
            string RTGS_Outwards_Test_CentralBankCode = "";
            string RTGS_Outwards_Bank_SWIFTCode       = "";
            Int64  RTGS_OUTGOING_Batch_Size           = 50;
            string MQ_Manager                         = "";
            string MQ_Queue                           = "";
            string Curr_Short_Name                    = "";
            string Cloud_XML                          = "";
            string RecInstNo                          = "";
            string RTGS_Outwards_Temp_Directory       = "";
            string Posting_IP                         = "";
            bool   FIELD_21_INUSE                     = false;
            bool   USE_STP_FIELD50_WITH_DETAILS       = false;
            bool   KEEP_STP_TEMP_BATCHES              = false;
            string Processing_Date                    = "";

            DataTable MQ_Rec           =  new DataTable();
            DataTable SysRec           = new DataTable();
            DateTime  Curr_Time        = DateTime.Now;
            DateTime  StartTime        = DateTime.Now;
            DateTime  EndTime          = DateTime.Now.AddDays(-1);
            Hashtable m_hashtable      = new Hashtable();
            Hashtable m_whereHashTable = new Hashtable();
  
                            
            bool   RTGS_Outwards_Ignore_Holiday   = false;
            string Target_File                    = "";
            bool   CLOUD_STP_ENABLED              = false;
            string CLOUD_FTP_SERVER_IP            =  "";
            string CLOUD_FTP_SERVER_OUTGOING_PORT =  "";
            string CLOUD_FTP_USER_ID              =  "";
            string CLOUD_FTP_PASSWORD             =  "";
            string CLOUD_FTP_OUTGOING_REMOTE_DIR  = "";
            string CLOUD_FTP_OUTGOING_BACKUP_DIR  = "";
    
            try
            {
                SysRec = new DataTable();
                SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('FIELD_21_INUSE','USE_STP_FIELD50_WITH_DETAILS','KEEP_STP_TEMP_BATCHES','RTGS_OUTGOING_Batch_Size','RTGS_Outwards_Live_Instance','RTGS_Outwards_Live_CentralBankCode','RTGS_Outwards_Test_CentralBankCode','RTGS_Outwards_Temp_Directory','RTGS_Outwards_Bank_SWIFTCode','OUTWARD_POSTING_METHOD','MQ_Manager','MQ_Queue','RTGS_Outwards_Ignore_Holiday','CLOUD_STP_ENABLED','CLOUD_FTP_SERVER_IP','CLOUD_FTP_SERVER_OUTGOING_PORT','CLOUD_FTP_USER_ID','CLOUD_FTP_PASSWORD','CLOUD_FTP_OUTGOING_REMOTE_DIR','CLOUD_FTP_OUTGOING_BACKUP_DIR') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                foreach (DataRow param_Row in SysRec.Rows)
                {
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "FIELD_21_INUSE".ToUpper())                     FIELD_21_INUSE                     = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "USE_STP_FIELD50_WITH_DETAILS".ToUpper())       USE_STP_FIELD50_WITH_DETAILS       = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "KEEP_STP_TEMP_BATCHES".ToUpper())              KEEP_STP_TEMP_BATCHES              = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_Instance".ToUpper())        RTGS_Outwards_Live_Instance        = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Ignore_Holiday".ToUpper())       RTGS_Outwards_Ignore_Holiday       = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_STP_ENABLED".ToUpper())                  CLOUD_STP_ENABLED                  = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_OUTGOING_Batch_Size".ToUpper())           RTGS_OUTGOING_Batch_Size           = Convert.ToInt64(param_Row["Parameter_Value"].ToString().Trim());
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_CentralBankCode".ToUpper()) RTGS_Outwards_Live_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Test_CentralBankCode".ToUpper()) RTGS_Outwards_Test_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper())       RTGS_Outwards_Temp_Directory       = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Bank_SWIFTCode".ToUpper())       RTGS_Outwards_Bank_SWIFTCode       = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "MQ_Manager".ToUpper())                         MQ_Manager                         = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "MQ_Queue".ToUpper())                           MQ_Queue                           = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_SERVER_IP".ToUpper())                CLOUD_FTP_SERVER_IP                = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_SERVER_OUTGOING_PORT".ToUpper())     CLOUD_FTP_SERVER_OUTGOING_PORT     = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_USER_ID".ToUpper())                  CLOUD_FTP_USER_ID                  = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_PASSWORD".ToUpper())                 CLOUD_FTP_PASSWORD                 = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_OUTGOING_REMOTE_DIR".ToUpper())      CLOUD_FTP_OUTGOING_REMOTE_DIR      = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_FTP_OUTGOING_BACKUP_DIR".ToUpper())      CLOUD_FTP_OUTGOING_BACKUP_DIR      = param_Row["Parameter_Value"].ToString().Trim();
                }
                    
                CentralBankCode = (RTGS_Outwards_Live_Instance) ? RTGS_Outwards_Live_CentralBankCode : RTGS_Outwards_Test_CentralBankCode;
                if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) RTGS_Outwards_Temp_Directory = RTGS_Outwards_Temp_Directory + System.IO.Path.DirectorySeparatorChar.ToString();

                bool MQ_DataPosting = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Outwards_MQ_DataPosting;
                if ((MQ_DataPosting) && (CLOUD_STP_ENABLED))
                {
                    SQLStr = "SELECT Hol_Date_D FROM tbl_STP_Holidays WITH (NOLOCK) WHERE CONVERT(VARCHAR(10),Hol_Date_D ,25) = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25))";
                    int Holiday_Days = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr).Rows.Count;
                   
                    // Release Marked but Unposted transactions after 20 minutes
                    SQLStr = string.Format(" UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = NULL, Processing_Time = NULL, Posted_to_MQ_YN_B = 0");
                    SQLStr += string.Format(" WHERE RTGS_OutStage_Inst_N IN");
                    SQLStr += string.Format(" (SELECT RTGS_OutStage_Inst_N FROM tbl_RTGS_Outward_Trxn_Staging  WITH (NOLOCK) WHERE Processing_ID IS NOT NULL AND Posted_YN_B = 0 AND DATEDIFF(mi,Processing_Time,CURRENT_TIMESTAMP) > 15");
                    SQLStr += string.Format(" AND Trxn_Ref_C NOT IN (SELECT Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) GROUP BY Trxn_Ref_C HAVING COUNT(*) > 1))");
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    
                    //Single Test Msg
                    //SQLStr = string.Format(" UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = NULL, Processing_Time = NULL, Posted_to_MQ_YN_B = 0 WHERE RTGS_OutStage_Inst_N = 586855");
                    //SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                    // Do the checks and Authorisation here
                    SQLStr = "[dbo].[ustp_Auto_Authorise_Trxns]";
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                    // Check if we are within Processing Window
                    SysRec = new DataTable();
                    SQLStr = string.Format(" SELECT CONVERT(VARCHAR(16), CURRENT_TIMESTAMP,25) AS Processing_Date, CONVERT(VARCHAR(19), CURRENT_TIMESTAMP,25) AS Curr_Time, CONVERT(VARCHAR(11), CURRENT_TIMESTAMP,25)  + Procesing_Start_Time AS StartTime,  CONVERT(VARCHAR(11), CURRENT_TIMESTAMP,25)  + Procesing_End_Time AS EndTime FROM tbl_SysParam");
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        Processing_Date = param_Row["Processing_Date"].ToString();
                        Curr_Time       = Convert.ToDateTime(param_Row["Curr_Time"].ToString());
                        StartTime       = Convert.ToDateTime(param_Row["StartTime"].ToString());
                        EndTime         = Convert.ToDateTime(param_Row["EndTime"].ToString());
                    }

                    if ((Curr_Time >= StartTime) && (Curr_Time <= EndTime))
                    {
                      
                        if (((DateTime.Now.DayOfWeek.ToString() == "Saturday") || (DateTime.Now.DayOfWeek.ToString() == "Sunday") || (Holiday_Days != 0)) && (RTGS_Outwards_Ignore_Holiday == false) && (!CLOUD_STP_ENABLED))
                        {
                            Str_to_display = string.Format("STP Outwards : {0}{1}. {2}{0}", DateTime.Now.ToString(), (char)13, "Weekend and Holiday Processing is not possible - Outwards will not be sent. ");
                        }
                        else
                        {
                            Utilities.LogToFile("Line before Batching.");
                            Guid TrnBatchID;
                            TrnBatchID = Guid.NewGuid();

                            // Mark Batch
                            SQLStr = string.Format("UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = '{0}', Processing_Time = CURRENT_TIMESTAMP WHERE RTGS_OutStage_Inst_N IN ", TrnBatchID);
                            SQLStr += string.Format(" (SELECT TOP {0} Trxn.RTGS_OutStage_Inst_N FROM tbl_RTGS_Outward_Trxn_Staging Trxn WITH (NOLOCK) INNER JOIN tbl_Currencies CurrTbl WITH (NOLOCK) ON Trxn.Trxn_Curr = CurrTbl.Curr_SwitchCode_C WHERE Trxn.Processing_ID IS NULL AND Trxn.Approved_YN_B = '1' AND Trxn.Posted_YN_B = 0 AND Trxn.RTGS_OutStage_Inst_N IN ", RTGS_OUTGOING_Batch_Size);
                            SQLStr += string.Format(" (SELECT  MIN(Trxn1.RTGS_OutStage_Inst_N) FROM tbl_RTGS_Outward_Trxn_Staging Trxn1 INNER JOIN tbl_Currencies CurrTbl1 WITH (NOLOCK) ON Trxn1.Trxn_Curr = CurrTbl1.Curr_SwitchCode_C GROUP BY Trxn1.Trxn_Ref_C,Trxn1.RTGS_OutStage_Inst_N) ORDER BY Trxn.RTGS_OutStage_Inst_N ASC)");
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                            //SQLStr = string.Format("UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = '{0}', Processing_Time = CURRENT_TIMESTAMP WHERE RTGS_OutStage_Inst_N = 586855 ", TrnBatchID);
                            //SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                            // Post the Records in the Staging Table to WebSphere MQ That have not been Posted
                            File_Loop_No = 0;

                            SQLStr = string.Format("SELECT Trxn.*, Agt.BSA_C,CurrTbl.Curr_Short_Name FROM tbl_RTGS_Outward_Trxn_Staging Trxn  WITH (NOLOCK) INNER JOIN tbl_Currencies CurrTbl WITH (NOLOCK) ON Trxn.Trxn_Curr = CurrTbl.Curr_SwitchCode_C LEFT Join tbl_Agent_Banks Agt  WITH (NOLOCK) ON SUBSTRING(Trxn.Benef_Bank_C,1,7) = SUBSTRING(Agt.Bank_SWIFT_Addr_C,1,7) WHERE Trxn.Processing_ID = '{0}' AND Trxn.Approved_YN_B = '1' AND Trxn.Posted_YN_B = 0 AND Trxn.RTGS_OutStage_Inst_N IN ", TrnBatchID);
                            SQLStr += " (SELECT  MIN(Trxn1.RTGS_OutStage_Inst_N) FROM tbl_RTGS_Outward_Trxn_Staging Trxn1 WITH (NOLOCK) GROUP BY Trxn1.Trxn_Ref_C,Trxn1.RTGS_OutStage_Inst_N) ORDER BY Trxn.RTGS_OutStage_Inst_N ASC";
                            DataTable StagingTbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),SQLStr);
                            Utilities.LogToFile(" Line after DB opening for MQ Posting.");
                            foreach (DataRow StagingRow in StagingTbl.Rows)
                            {
                                RecInstNo      = StagingRow["RTGS_OutStage_Inst_N"].ToString().Trim();
                                string ORF_Val = StagingRow["ORF_Val_C"].ToString().Trim();
                                if (ORF_Val.Length == 0)
                                {
                                    ORF_Val = string.Format("{0}", SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),"SELECT 'AC' + RIGHT(CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,112),6) + REPLACE(CONVERT(VARCHAR(11),CURRENT_TIMESTAMP,114),':' , '')").Rows[0][0].ToString());
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),string.Format("UPDATE tbl_RTGS_Outward_Trxn_Staging SET ORF_Val_C = '{0}' WHERE RTGS_OutStage_Inst_N = '{1}'", ORF_Val, StagingRow["RTGS_OutStage_Inst_N"].ToString().Trim()));
                                }

                                //Check the File Loop Number so that we do not overload the MQ Server
                                if (File_Loop_No > RTGS_OUTGOING_Batch_Size)
                                {
                                    break;
                                }
                                Source_Ref      = StagingRow["Trxn_Ref_C"].ToString();
                                Curr_Short_Name = StagingRow["Curr_Short_Name"].ToString();
                                Utilities.LogToFile(string.Format("Looping in SQL DB. Ref : {0}", Source_Ref));

                                // Check for Duplicates within Same Table before proceeding
                                SQLStr = String.Format("SELECT RTGS_OutStage_Inst_N FROM [tbl_RTGS_Outward_Trxn_Staging] WITH (NOLOCK) WHERE Posted_YN_B = 1 AND Trxn_Ref_C = '{0}'", Source_Ref);
                                if (SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),SQLStr).Rows.Count != 0)
                                {
                                    string Curr_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);
                                    Str_to_display   = string.Format("{0} has been Rejected (Duplicate) on : {1}", Source_Ref, DateTime.Now.ToString());

                                    // Update the Outwards Table                           
                                    m_hashtable = new Hashtable();
                                    m_hashtable.Add("Posted_YN_B"               , "1");
                                    m_hashtable.Add("Posted_to_MQ_YN_B"         , "1");
                                    m_hashtable.Add("Posted_to_MQ_Date"         , Curr_Date);
                                    m_hashtable.Add("Posted_to_MQ_Data"         , "Not sent to MQ");
                                    m_hashtable.Add("RTGS_Out_PostReject_Name_C", Target_File);
                                    m_hashtable.Add("RTGS_Out_Reject_Reason_C"  , "Possible Duplicate on Reference #");
                                    m_whereHashTable = new Hashtable();

                                    m_whereHashTable.Add("RTGS_OutStage_Inst_N" , StagingRow["RTGS_OutStage_Inst_N"].ToString());
                                    SqlHelper.updateSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable, m_whereHashTable);
                                }
                                else
                                {
                                    // Check for Duplicates from Refrence Check External Table before proceeding
                                    SQLStr = string.Format("SELECT [Inst_No_N] FROM tbl_RTGS_Outward_Ref_Check_STP WITH (NOLOCK) WHERE Reference_C = '{0}'", Source_Ref);
                                    if (SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr).Rows.Count != 0)
                                    {
                                        // Update the Outwards Table                           
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("Posted_YN_B"               , "0");
                                        m_hashtable.Add("Posted_to_MQ_YN_B"         , "0");
                                        m_hashtable.Add("Posted_to_MQ_Data"         , "Not sent to MQ");
                                        m_hashtable.Add("RTGS_Out_PostReject_Name_C", Target_File);
                                        m_hashtable.Add("RTGS_Out_Reject_Reason_C"  , "Possible Duplicate. Reference # was used before. Check Ref Table");
                                        m_whereHashTable = new Hashtable();

                                        m_whereHashTable.Add("RTGS_OutStage_Inst_N" , StagingRow["RTGS_OutStage_Inst_N"].ToString());
                                        SqlHelper.updateSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable, m_whereHashTable);
                                    }
                                    else
                                    {
                                        Utilities.LogToFile(string.Format("Duplicate Record Check for Ref : {0}", Source_Ref));
                                        string STP_MT103    = "";
                                        string STP_SenderID = ConfigurationManager.AppSettings["RTGS_Outwards_Bank_SWIFTCode"];
                                        if (RTGS_Outwards_Live_Instance == false)
                                        {
                                            RTGS_Outwards_Bank_SWIFTCode = string.Format("{0}0", RTGS_Outwards_Bank_SWIFTCode.Substring(0, 7));
                                        }
                                        string BBB_Val    = "";
                                        string BBB_Val_OG = StagingRow["Benef_Bank_C"].ToString().Trim();
                                        if (StagingRow["Benef_Bank_C"].ToString().Trim().Length >= 8)
                                        {
                                            if (RTGS_Outwards_Live_Instance)
                                            {
                                                BBB_Val = StagingRow["Benef_Bank_C"].ToString().Substring(0, 8).Trim();
                                            }
                                            else
                                            {
                                                BBB_Val = string.Format("{0}0", StagingRow["Benef_Bank_C"].ToString().Substring(0, 7).Trim());
                                            }
                                        }
                                        string BSA_Val = StagingRow["BSA_C"].ToString();
                                        // Check if the corresponding Benef bank Exists
                                        if ((BSA_Val.Length == 0) || (BSA_Val == ""))
                                        {
                                            Utilities.LogToFile(string.Format("BSA Check Failure for Ref : {0}", Source_Ref));
                                        }
                                        else
                                        {
                                            Utilities.LogToFile(string.Format("BSA Check Successful for Ref : {0}", Source_Ref));
                                            string BCA_Len       = (StagingRow["BenefAcc_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string BCA_Val       = StagingRow["BenefAcc_C"].ToString();
                                            string PCA_Len       = (StagingRow["DebitAcc_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string PCA_Val       = StagingRow["DebitAcc_C"].ToString();
                                            string ODT_Val       = StagingRow["ValueDate_C"].ToString();
                                            string RRF_Len       = (StagingRow["Trxn_Ref_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string RRF_Val       = StagingRow["Trxn_Ref_C"].ToString();
                                            string RRF_Val_MT103 = StagingRow["Trxn_Ref_C"].ToString();
                                            if (RRF_Val_MT103.Length > 8)
                                            {
                                                RRF_Val_MT103 = RRF_Val_MT103.Substring(0, 8);
                                            }
                                            string PID_Len     = (StagingRow["DebitRef_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string PID_Val     = StagingRow["DebitRef_C"].ToString();
                                            string BCN_Len     = ((StagingRow["BenefName_C"].ToString().Replace("#R#", "")).Length + 7).ToString().PadLeft(4, (char)48);
                                            string BCN_Val     = StagingRow["BenefName_C"].ToString();
                                            string BCN_Val_RRF = StagingRow["BenefName_C"].ToString().Replace("#R#", " ").Trim();
                                            if (BCN_Val_RRF.Length > 16) BCN_Val_RRF = BCN_Val_RRF.Substring(0, 16).Trim();
                                            string STA_Len     = (String.Format("{0:0.00}", StagingRow["Amnt_N"]).ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string STA_Val     = String.Format("{0:0.00}", StagingRow["Amnt_N"]).ToString();
                                            string EFS_Val     = StagingRow["ValueDate_C"].ToString();
                                            string OCN_Len     = (StagingRow["DebitName_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string OCN_Val     = StagingRow["DebitName_C"].ToString();
                                            string OCN_Fld50K  = "";
                                            Tag_Separator.SetValue("#R#", 0);
                                            string[] OCN_Fld50KParams = StagingRow["DebitName_C"].ToString().Split(Tag_Separator, StringSplitOptions.None);
                                            double Fld50KLen = OCN_Fld50KParams.Length;
                                            for (int LoopNo = 0; LoopNo < Fld50KLen - 1; LoopNo++)
                                            {
                                                if (OCN_Fld50KParams[LoopNo].Length > 35)
                                                {
                                                    OCN_Fld50K += OCN_Fld50KParams[LoopNo].ToString().Substring(0, 35).Trim() + Environment.NewLine;
                                                }
                                                else
                                                {
                                                    if (OCN_Fld50KParams[LoopNo].ToString().Length != 0)
                                                    {
                                                        OCN_Fld50K += OCN_Fld50KParams[LoopNo].ToString().Trim() + Environment.NewLine;
                                                    }
                                                }
                                            }

                                            //For BancANBC
                                            OCN_Fld50K = StagingRow["DebitName_C"].ToString();
                                            if (OCN_Fld50K.Length > 35)
                                            {
                                                OCN_Fld50K = OCN_Fld50K.Substring(0, 35);
                                            }

                                            string RemitterName = StagingRow["DebitName_C"].ToString();
                                            string DebitAcc_C   = StagingRow["DebitAcc_C"].ToString();
                                            string DebitInfo2   = StagingRow["DebitInfo2"].ToString();
                                            string DebitInfo3   = StagingRow["DebitInfo3"].ToString();
                                            string DebitInfo4   = StagingRow["DebitInfo4"].ToString();

                                            if (((StagingRow["TrnSource"].ToString() == "FTOT") || (StagingRow["TrnSource"].ToString() == "ZIPPI")) && (USE_STP_FIELD50_WITH_DETAILS) && (DebitAcc_C != ""))
                                            {
                                                if (DebitAcc_C.Length > 34)
                                                {
                                                    DebitAcc_C = DebitAcc_C.Substring(0, 34);
                                                }
                                                OCN_Fld50K = string.Format("/{0}", DebitAcc_C);

                                                if (RemitterName.Length > 35)
                                                {
                                                    RemitterName = RemitterName.Substring(0, 35);
                                                }
                                                if (RemitterName.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", RemitterName, Environment.NewLine);
                                                }

                                                if (DebitInfo2.Length > 35)
                                                {
                                                    DebitInfo2 = DebitInfo2.Substring(0, 35);
                                                }
                                                if (DebitInfo2.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", DebitInfo2, Environment.NewLine);
                                                }

                                                if (DebitInfo3.Length > 35)
                                                {
                                                    DebitInfo3 = DebitInfo3.Substring(0, 35);
                                                }
                                                if (DebitInfo3.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", DebitInfo3, Environment.NewLine);
                                                }

                                                if (DebitInfo4.Length > 35)
                                                {
                                                    DebitInfo4 = DebitInfo4.Substring(0, 35);
                                                }
                                                if (DebitInfo4.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", DebitInfo4, Environment.NewLine);
                                                }
                                            }
                                            else
                                            {
                                                OCN_Fld50K = StagingRow["DebitName_C"].ToString();
                                                if (OCN_Fld50K.Length > 35)
                                                {
                                                    OCN_Fld50K = OCN_Fld50K.Substring(0, 35);
                                                }
                                            }

                                            string   BCN_Fld59       = "";
                                            string[] BCN_Fld59Params = StagingRow["BenefName_C"].ToString().Split(Tag_Separator, StringSplitOptions.None);
                                            double   Fld59Len        = BCN_Fld59Params.Length;
                                            for (int LoopNo = 0; LoopNo < Fld59Len - 1; LoopNo++)
                                            {
                                                if (BCN_Fld59Params[LoopNo].Length > 35)
                                                {
                                                    BCN_Fld59 += BCN_Fld59Params[LoopNo].ToString().Substring(0, 35).Trim() + Environment.NewLine;
                                                }
                                                else
                                                {
                                                    if (BCN_Fld59Params[LoopNo].ToString().Length != 0)
                                                    {
                                                        BCN_Fld59 += BCN_Fld59Params[LoopNo].ToString().Trim() + Environment.NewLine;
                                                    }
                                                }
                                            }

                                            // For BancABC
                                            BCN_Fld59 = StagingRow["BenefName_C"].ToString();
                                            if (BCN_Fld59.Length > 35)
                                            {
                                                BCN_Fld59 = BCN_Fld59.Substring(0, 35);
                                            }

                                            string Fld70Lines = "";
                                            string StrInput   = PID_Val;
                                            if (StrInput.Length > 140) StrInput = StrInput.Substring(0, 140);
                                            int str_Lines = StrInput.Length / 35;
                                            for (int i = 0; i < str_Lines; i++)
                                            {
                                                Fld70Lines += StrInput.Substring(i * 35, 35).Trim() + Environment.NewLine;
                                            }
                                            if (str_Lines * 35 < StrInput.Length)
                                            {
                                                Fld70Lines += StrInput.Substring(str_Lines * 35, StrInput.Length - str_Lines * 35).Trim() + Environment.NewLine;
                                            }

                                            // string OCN_Fld50K = MQ_Rec.Rows[0]["DebitName_C"].ToString().Replace("#R#", Environment.NewLine);
                                            string Block_3    = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{1}", "{", "}"); // Latest Change for CBZ file
                                            string Block_3XML1 = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{1}", "{", "}"); // Latest Change for CBZ file
                                            string Block_3XML2 = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{1}", "{", "}"); // Latest Change for CBZ file
                                            string Block_3XML3 = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{1}", "{", "}"); // Latest Change for CBZ file

                                            if (FIELD_21_INUSE)
                                            {
                                                string field121 =  Utilities.fn_getField_121();
                                                Block_3         = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{2}{1}", "{", "}", field121); // Latest Change for CBZ file
                                                // Block_3       = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{2}{1}", "{", "}", ""); // Latest Change for CBZ file With Field121 Removed

                                                Block_3XML1 = string.Format("{0}103:ZET{1}", "{", "}", field121);  // Only used in XML
                                                Block_3XML2 = string.Format("{0}113:PROP{1}", "{", "}", field121); // Only used in XML
                                                Block_3XML3 =  field121; // Latest Change for CBZ file
                                            }

                                            //string POR_No = m_databaseClass.getDataSet("SELECT CONVERT(VARCHAR(10),[Outwards_RunNo_N]) FROM [tbl_RTGS_Outward_Days] WITH (NOLOCK) Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))").Tables[0].Rows[0][0].ToString().PadLeft(7, (char)48);
                                            string PDT_Val = string.Format("{0:yyyyMMddHHmmss}", DateTime.Now);

                                            string OCN_Len_MQMsg = (OCN_Val.Replace("#R#", " ").Length + 7).ToString().PadLeft(4, (char)48);
                                            string OCN_Val_MQMsg = OCN_Val.Replace("#R#", " ");

                                            string BCN_Len_MQMsg = (BCN_Val.Replace("#R#", " ").Length + 7).ToString().PadLeft(4, (char)48);
                                            string BCN_Val_MQMsg = BCN_Val.Replace("#R#", " ");

                                            MQ_Format_Msg = string.Format("{20}@0015SNDFMBZZWHX0008APEP0021PDT{0}0011MRTFSP00010APV3000013APPCEntry0023ORF{1}0015EFS{2}0010CURZWL{3}STA{4}0010CPCZWL{3}ISA{4}0015IOBSBICZWHX0015BKPSBICZWHX0015BBB{5}0015OCDSBICZWHX0015BKB{5}{6}BCA{7}{8}BCN{9}{10}PCA{11}{12}OCN{13}{14}PID{15}0010CHRSHA0010RECCTP0015ODT{16}0008VSBY{17}RRF{18}0011BOCSSTD0015ADCREBZZWHA0015RRC{5}@{19}", PDT_Val, ORF_Val, EFS_Val, STA_Len, STA_Val, BBB_Val, BCA_Len, BCA_Val, BCN_Len_MQMsg, BCN_Val_MQMsg, PCA_Len, PCA_Val, OCN_Len_MQMsg, OCN_Val_MQMsg, PID_Len, PID_Val, ODT_Val, RRF_Len, RRF_Val, "}", "{");
                                            // Use tag 3 for STP
                                            string MT103_Lines = "FMBZZWHX";

                                            STP_MT103 = string.Format("{0}1:F01{2}AXXX9999999999{1}{0}2:I103{4}XXXXN{1}{3}{0}4:{5}", "{", "}", RTGS_Outwards_Bank_SWIFTCode, Block_3, BBB_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":20:{0}{1}", ORF_Val, Environment.NewLine);
                                            
                                            //STP_MT103 = string.Format("{1}:20:{0}{1}", ORF_Val, Environment.NewLine);   / Thei was foe XML Xer2 Only
                                            STP_MT103 += string.Format(":23B:{0}{1}", "SSTD", Environment.NewLine);
                                            STP_MT103 += string.Format(":32A:{0}{1}{2}{3}", Processing_Date.Substring(2, 8).Replace("-", ""), Curr_Short_Name, STA_Val.Replace(".", ","), Environment.NewLine);
                                            STP_MT103 += string.Format(":50K:{0}{1}", OCN_Fld50K, Environment.NewLine);
                                            STP_MT103 += string.Format(":52A:{0}{1}", RTGS_Outwards_Bank_SWIFTCode, Environment.NewLine);
                                            STP_MT103 += string.Format(":53A:{0}{1}", RTGS_Outwards_Bank_SWIFTCode, Environment.NewLine);
                                            STP_MT103 += string.Format(":54A:{0}{1}", BBB_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":56A:{0}{1}", RTGS_Outwards_Bank_SWIFTCode, Environment.NewLine);
                                            STP_MT103 += string.Format(":57A:{1}{2}", BSA_Val, BBB_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":59:/{0}{2}{1}{2}", BCA_Val, BCN_Fld59, Environment.NewLine);

                                            if (Fld70Lines != "")
                                            {
                                                STP_MT103 += string.Format(":70:{0}", Fld70Lines);
                                            }
                                            STP_MT103 += string.Format(":71A:{0}{1}", "SHA", Environment.NewLine);
                                            string BBB_Val_Tmp = BBB_Val;
                                            if (BBB_Val_Tmp.Length >= 8)
                                            {
                                                BBB_Val_Tmp = BBB_Val.Substring(0, 7);
                                            }
                                            // Now Field 72
                                            if (1 == 1)
                                            {
                                                // string StrInput_Local = string.Format("/REC/RTM02DLPCTP/RRF/{0}/BRF/{1}", BCN_Val_RRF, BCA_Val);  //Working in Test
                                                string StrInput_Local = string.Format("/REC/CTP/RRF/{0}/BRF/{1}", BCN_Val_RRF, BCA_Val);

                                                int    StrInput_Local_Len = StrInput_Local.Length;
                                                string Fld72_Line1        = "";
                                                string Fld72Lines         = "";
                                                if (StrInput_Local.Length <= 35)
                                                {
                                                    STP_MT103 += string.Format(":72:{0}{1}", StrInput_Local, Environment.NewLine);
                                                }
                                                else
                                                {
                                                    Fld72_Line1 = StrInput_Local.Substring(0, 35);
                                                    if (Fld72_Line1.EndsWith("/"))
                                                    {
                                                        Fld72_Line1 = StrInput_Local.Substring(0, 34);
                                                        StrInput_Local = StrInput_Local.Substring(34, StrInput_Local_Len - 34);
                                                    }
                                                    else
                                                    {
                                                        Fld72_Line1 = StrInput_Local.Substring(0, 35);
                                                        StrInput_Local = StrInput_Local.Substring(35, StrInput_Local_Len - 35);
                                                    }
                                                    Fld72_Line1 += Environment.NewLine;

                                                    //StrInput_Local = StrInput_Local.Substring(35, StrInput_Local_Len-35);

                                                    string Current_Line = "";
                                                    if (StrInput_Local.Length > 140) StrInput_Local = StrInput_Local.Substring(0, 140);
                                                    int str_Lines_Local = StrInput_Local.Length / 33;
                                                    for (int i = 0; i < str_Lines_Local; i++)
                                                    {
                                                        Current_Line = "//" + StrInput_Local.Substring(i * 33, 33);
                                                        Fld72Lines += Current_Line + Environment.NewLine;
                                                    }
                                                    if (str_Lines * 33 < StrInput_Local.Length)
                                                    {
                                                        Current_Line = "//" + StrInput_Local.Substring(str_Lines_Local * 33, StrInput_Local.Length - str_Lines_Local * 33);
                                                        Fld72Lines += Current_Line + Environment.NewLine;
                                                    }
                                                    STP_MT103 += ":72:" + Fld72_Line1 + Fld72Lines;
                                                }
                                            }

                                            STP_MT103 += string.Format("-{0}", "}");

                                            byte[] encodedByte   = System.Text.ASCIIEncoding.ASCII.GetBytes(STP_MT103);
                                            string base64Encoded = Convert.ToBase64String(encodedByte);

                                            Cloud_XML = fn_GET_CloudXML_Simple(Source_Ref, RTGS_Outwards_Bank_SWIFTCode, BBB_Val, RecInstNo, Block_3XML1, Block_3XML2, Block_3XML3, base64Encoded);
                                            //Cloud_XML = fn_GET_CloudXML(Source_Ref, RTGS_Outwards_Bank_SWIFTCode, BBB_Val, RecInstNo, Block_3, base64Encoded);

                                            string FileInstNo                = string.Format("00000000{0}",RecInstNo );
                                            FileInstNo                       = FileInstNo.Substring(FileInstNo.Length-8,8);

                                            string Cloud_XML_FileName_Time   = string.Format("{0:yyyyMMddHHmmsssss}", DateTime.Now);
                                            string Cloud_XML_FileName        = string.Format("{0}{1}_{2}.fin", RTGS_Outwards_Temp_Directory , FileInstNo, Cloud_XML_FileName_Time);
                                            string Cloud_XML_FileName_Backup = string.Format("{0}{1}_{2}.fin", CLOUD_FTP_OUTGOING_BACKUP_DIR, FileInstNo, Cloud_XML_FileName_Time);

                                           // File.WriteAllText(Cloud_XML_FileName, Cloud_XML);  // XML Ver2
                                            File.WriteAllText(Cloud_XML_FileName, STP_MT103);    // RJE

                                            bool isFileInUse;
                                            isFileInUse = Utilities.IsFileInUse(Cloud_XML_FileName);
                                            do
                                            {
                                                isFileInUse = Utilities.IsFileInUse(Cloud_XML_FileName);
                                            }
                                            while (isFileInUse == true);

                                            // Now get the files from the FTP site
                                            SessionOptions sessionOptions = new SessionOptions
                                            {
                                                Protocol   = Protocol.Ftp,
                                                HostName   = CLOUD_FTP_SERVER_IP,
                                                PortNumber = Convert.ToInt16(CLOUD_FTP_SERVER_OUTGOING_PORT),
                                                UserName   = CLOUD_FTP_USER_ID,
                                                Password   = CLOUD_FTP_PASSWORD,
                                            };

                                            using (Session session = new Session())
                                            {
                                                // Connect
                                                TransferOptions transferOptions = new TransferOptions();
                                                session.Open(sessionOptions);
                                                // Download files
                                                session.PutFileToDirectory(Cloud_XML_FileName, CLOUD_FTP_OUTGOING_REMOTE_DIR, false);
                                                //.PutFileToDirectory(@"C:\RTGS_In_BanABC\Docs\Swift_Cloud\00586785_20210504125988995.fin", CLOUD_FTP_OUTGOING_REMOTE_DIR, false);
                                            }

                                            string Date_Var = string.Format("{0:yyyy_MM_dd_HH_mm_ss_fff}", DateTime.Now);
                                            string SaveResp = Save_ResponseData(Source_Ref, ORF_Val, Date_Var, Cloud_XML);

                                            // Update Processing Details
                                            string Curr_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);
                                            m_hashtable = new Hashtable();
                                            m_hashtable.Add("Posted_to_MQ_Date"         , Curr_Date);
                                            m_hashtable.Add("Posted_to_MQ_Data"         , MQ_Format_Msg);
                                            m_hashtable.Add("MT103_STP_C"               , STP_MT103);
                                            m_hashtable.Add("ORF_Val_C"                 , ORF_Val.Trim());
                                            m_hashtable.Add("RTGS_Out_PostReject_Name_C", Target_File);
                                            m_hashtable.Add("Window_Start_Time_D"       , string.Format("{0:yyyy-MM-dd HH:mm:ss}", StartTime));
                                            m_hashtable.Add("Window_End_Time_D"         , string.Format("{0:yyyy-MM-dd HH:mm:ss}", EndTime));
                                            m_hashtable.Add("Posted_to_MQ_IP"           , Posting_IP);
                                            //m_hashtable.Add("Posted_YN_B"             , ((textLine.LastIndexOf(":20:") == -1) ? "0" : "1"));
                                            //m_hashtable.Add("Posted_to_MQ_YN_B"       , ((textLine.LastIndexOf(":20:") == -1) ? "0" : "1"));

                                            m_hashtable.Add("Posted_YN_B"      , "1");   //Mark as posted regardless since we are dropping a file using ftp
                                            m_hashtable.Add("Posted_to_MQ_YN_B", "1");   //Mark as posted regardless since we are dropping a file using ftp

                                            m_whereHashTable = new Hashtable();
                                            m_whereHashTable.Add("Trxn_Ref_C", Source_Ref);
                                            SqlHelper.updateSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable, m_whereHashTable);
                              
                                            // Mark the Reference Number to Avoid Future Refrence Number ReUse and duplication
                                            SQLStr = string.Format("EXEC [dbo].[ustp_MarkPosted_Ref] @Reference_C = '{0}'", Source_Ref);
                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "UPDATE [tbl_RTGS_Outward_Days] SET [Outwards_RunNo_N] = [Outwards_RunNo_N] + 1 Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime)");

                                            // Now remove the Temporary MQPut Files
                                            if (!KEEP_STP_TEMP_BATCHES)
                                            {
                                                if (System.IO.File.Exists(Cloud_XML_FileName) == true) System.IO.File.Copy(Cloud_XML_FileName, Cloud_XML_FileName_Backup, true);
                                                if (System.IO.File.Exists(Cloud_XML_FileName) == true) System.IO.File.Delete(Cloud_XML_FileName);
                                            }
                                        }
                                    }    
                                }
                                File_Loop_No += 1;
                            }
                        }   
                    }
                }
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display   = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_MQ", Err_Date2));

                return "2";
            }
            finally
            {
                //Application.DoEvents();
            }
        }


        string fn_GET_CloudXML_Simple(string SenderReference, string Sender, string Receiver, string InstNo, string FINUserHeader1, string FINUserHeader2, string FINUserHeader3, string MsgBody)
        {
            string ReqXML         = "";
            string Str_to_display = "";
            string FINUserHeader0 = "{119:STP}";

            try
            {
                //ReqXML += "003134                        ";
                //ReqXML +="<?xml version=\"1.0\" encoding=\"UTF-8\" ?><DataPDU xmlns:saa=\"urn:swift:xsd:saa.2.0\">";
                ReqXML += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>";
                //ReqXML += string.Format("{0}<DataPDU>{0}                                                  ", Environment.NewLine);
                //ReqXML += string.Format("<DataPDU>                                                       ");
                ReqXML += string.Format("{0}<DataPDU xmlns:saa=\"urn:swift:xsd:saa.2.0\">", Environment.NewLine);
                //ReqXML += string.Format("	<Revision>2.0.3</Revision>                                     ");
                ReqXML += string.Format("{0}<Header>", Environment.NewLine);
                ReqXML += string.Format("<Message>");
                ReqXML += string.Format("<SenderReference>{0}</SenderReference>", SenderReference);
                ReqXML += string.Format("<MessageIdentifier>fin.103</MessageIdentifier>");
                ReqXML += string.Format("<Format>MT</Format>");
                ReqXML += string.Format("<Format>Input</Format>");
                ReqXML += string.Format("<Sender>");
                ReqXML += string.Format("<BIC12>{0}XXXX</BIC12>", Sender);
                ReqXML += string.Format("<FullName>");
                ReqXML += string.Format("<X1>{0}XXXX</X1>", Sender);
                ReqXML += string.Format("</FullName>                        ");
                ReqXML += string.Format("</Sender>");
                ReqXML += string.Format("<Receiver>");
                ReqXML += string.Format("<BIC12>{0}XXXX</BIC12>", Receiver);
                ReqXML += string.Format("<FullName>");
                ReqXML += string.Format("<X1>{0}XXXX</X1>", Receiver);
                ReqXML += string.Format("</FullName>");
                ReqXML += string.Format("</Receiver>");
                //ReqXML += string.Format("			<NetworkInfo>                                          ");
                //ReqXML += string.Format("				<Priority>Normal</Priority>                        ");
                //ReqXML += string.Format("				<IsPossibleDuplicate>false</IsPossibleDuplicate>   ");
                //ReqXML += string.Format("				<IsNotificationRequested>false</IsNotificationRequested>    ");
                //ReqXML += string.Format("				<Service>swift.fin</Service>                       ");
                //ReqXML += string.Format("				<Network>FIN</Network>                             ");
                //ReqXML += string.Format("				<SessionNr>{0}</SessionNr>                         ", InstNo.Substring(2, 4));
                ////ReqXML += string.Format("				<SeqNr>{0}</SeqNr>	                               ", InstNo);
                //ReqXML += string.Format("				<SeqNr>1</SeqNr>	                               ", InstNo);
                //ReqXML += string.Format("				<FINNetworkInfo>                                   ");
                //ReqXML += string.Format("					<MessageSyntaxVersion>2020</MessageSyntaxVersion>  ");
                //ReqXML += string.Format("					<FINUserHeader>{0}</FINUserHeader>                 ", FINUserHeader0);
                //ReqXML += string.Format("					<FINUserHeader>{0}</FINUserHeader>                 ", FINUserHeader1);
                //ReqXML += string.Format("					<FINUserHeader>{0}</FINUserHeader>                 ", FINUserHeader2);
                //ReqXML += string.Format("					<FINUserHeader>{0}</FINUserHeader>                 ", FINUserHeader3);
                //ReqXML += string.Format("				</FINNetworkInfo>                                      ");
                //ReqXML += string.Format("			</NetworkInfo>                                         ");
                //ReqXML += string.Format("			<SecurityInfo>                                         ");
                //ReqXML += string.Format("				<SWIFTNetSecurityInfo/>                            ");
                //ReqXML += string.Format("			</SecurityInfo>                                        ");
              
                ReqXML += string.Format("<InterfaceInfo>");
                ReqXML += string.Format("<UserReference>{0}</UserReference>",SenderReference);
                ReqXML += string.Format("</InterfaceInfo>");
                ReqXML += string.Format("<NetworkInfo>");
                ReqXML += string.Format("<Service>swift.fin</Service>");
                ReqXML += string.Format("</NetworkInfo>");
                ReqXML += string.Format("</Message>");

                ReqXML += string.Format("</Header>");
                ReqXML += string.Format("<Body>");
                ReqXML += string.Format("{0}", MsgBody);
                ReqXML += string.Format("</Body>");
                ReqXML += string.Format("</DataPDU>");

            }
            catch (Exception ex)
            {
                string Err_String     = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display        = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2      = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "fn_GET_CloudXML", Err_Date2));

                return "2";
            }
            finally { }
            return ReqXML;
        }

        
        string fn_GET_CloudXML(string SenderReference, string Sender, string Receiver, string InstNo, string FINUserHeader, string MsgBody)
        {
            string ReqXML         = "";
            string Str_to_display = "";

            try 
            { 
                //ReqXML +=string.Format("{0}                        ",InstNo);
                ReqXML += "<?xml version=\"1.0\" encoding=\"UTF-8\" ?><DataPDU xmlns:Saa=\"urn:swift:xsd:saa.2.0\" xmlns:Sw=\"urn:swift:snl:ns.Sw\" xmlns:SwInt=\"urn:swift:snl:ns.SwInt\" xmlns:SwGbl=\"urn:swift:snl:ns.SwGbl\" xmlns:SwSec=\"urn:swift:snl:ns.SwSec\">";
                //ReqXML += string.Format("  <DataPDU>"                                                                                 ).Trim();
                ReqXML += string.Format("	<Revision>2.0.3</Revision>"                                                                 ).Trim();																			      
                ReqXML += string.Format("	<Header>	"                                                                               ).Trim();
                ReqXML += string.Format("		<Message>	"                                                                           ).Trim();																					        
                //ReqXML += string.Format("			<SenderReference>OBKTRUS30XXX103C214050RBK033121$2104035674389</SenderReference>"   ).Trim();
                ReqXML += string.Format("			<SenderReference>{0}</SenderReference>", SenderReference                            ).Trim();									 
                ReqXML += string.Format("			<MessageIdentifier>fin.103.STP</MessageIdentifier>"                                 ).Trim();															  
                ReqXML += string.Format("			<Format>MT</Format>"                                                                ).Trim();																			   
                ReqXML += string.Format("			<SubFormat>Output</SubFormat>		"                                               ).Trim();																    
                ReqXML += string.Format("			<Sender>	"                                                                           ).Trim();																				     
                //ReqXML += string.Format("				<BIC12>BKTRUS303XXX</BIC12>"                                                    ).Trim();
                ReqXML += string.Format("				<BIC12>{0}</BIC12>", Sender                                                     ).Trim();
                ReqXML += string.Format("				<FullName>	"                                                                       ).Trim();		      
                //ReqXML += string.Format("					<X1>BKTRUS30XXX</X1>  "                                                     ).Trim();
                ReqXML += string.Format("					<X1>{0}</X1>  ", Sender                                                     ).Trim();
                ReqXML += string.Format("				</FullName>	  "                                                                 ).Trim();
                ReqXML += string.Format("			</Sender>		 "                                                                  ).Trim();
                ReqXML += string.Format("			<Receiver>	"                                                                       ).Trim();
                //ReqXML += string.Format("				<BIC12>FMBZZWH0AXXX</BIC12>  "                                                  ).Trim();
                ReqXML += string.Format("				<BIC12>{0}</BIC12>  ", Receiver                                                 ).Trim();
                ReqXML += string.Format("				<FullName>"                                                                     ).Trim();
                //ReqXML += string.Format("					<X1>FMBZZWH0XXX</X1>   "                                                    ).Trim();
                ReqXML += string.Format("					<X1>{0}</X1>   ", Receiver                                                  ).Trim();
                ReqXML += string.Format("				</FullName>	 "                                                                  ).Trim();
                ReqXML += string.Format("			</Receiver>	   "                                                                    ).Trim();
                ReqXML += string.Format("			<InterfaceInfo>	"                                                                   ).Trim();
                //ReqXML += string.Format("				<UserReference>C214050RBK033121</UserReference>	  "                             ).Trim();
                ReqXML += string.Format("				<UserReference>{0}</UserReference>	  ", SenderReference                        ).Trim();
                ReqXML += string.Format("				<MessageCreator>FINInterface</MessageCreator>  "                                ).Trim();
                ReqXML += string.Format("				<MessageContext>Original</MessageContext>   "                                   ).Trim();
                ReqXML += string.Format("				<MessageNature>Financial</MessageNature>   "                                    ).Trim();
                ReqXML += string.Format("			</InterfaceInfo>   "                                                                ).Trim();
                ReqXML += string.Format("			<NetworkInfo>    "                                                                  ).Trim();
                ReqXML += string.Format("				<Priority>Normal</Priority>  "                                                  ).Trim();
                ReqXML += string.Format("				<IsPossibleDuplicate>false</IsPossibleDuplicate> "                              ).Trim();
                ReqXML += string.Format("				<IsNotificationRequested>false</IsNotificationRequested>    "                   ).Trim();
                ReqXML += string.Format("				<Service>swift.fin</Service> "                                                  ).Trim();
                ReqXML += string.Format("				<Network>FIN</Network>"                                                         ).Trim();
                ReqXML += string.Format("				<SessionNr>{0}</SessionNr>  "        , InstNo.Substring(2,4)                    ).Trim();
                ReqXML += string.Format("				<SeqNr>{0}</SeqNr>	        "        , InstNo                                   ).Trim();
                ReqXML += string.Format("				<FINNetworkInfo>"                                                               ).Trim();
                ReqXML += string.Format("					<MessageSyntaxVersion>2005</MessageSyntaxVersion>  "                        ).Trim();
                //ReqXML += string.Format("					<CorrespondentInputReference>210331BKTRUS303XXX0385125698</CorrespondentInputReference>	");
                ReqXML += string.Format("					<CorrespondentInputReference>{0:HHmmss}{1}{2}</CorrespondentInputReference>", DateTime.Now, Sender,string.Format("{0}0000000000",InstNo).Substring(0,10)).Trim();
                ReqXML += string.Format("					<CorrespondentInputTime>{0:yyyyMMddssffff}</CorrespondentInputTime>	", DateTime.Now).Trim();
                ReqXML += string.Format("					<LocalOutputTime>{0:yyyyMMddssffff}</LocalOutputTime>	", DateTime.Now).Trim();
                ReqXML += string.Format("					<DelayedMessage>{0}DLM{1}{2}</DelayedMessage>	   " ,"{",":","}"                        ).Trim();
                //ReqXML += string.Format("					<FINUserHeader>{108:C214050RBK033121}{119:STP}{111:001}{121:0927a509-4922-4fb5-a898-99ea983fbb0a}{433:/NOK/NOT REVIEWED}</FINUserHeader>   ").Trim();
                ReqXML += string.Format("					<FINUserHeader>{0}</FINUserHeader>   ", FINUserHeader                            ).Trim();
                ReqXML += string.Format("				</FINNetworkInfo>  "                                                                 ).Trim();
                ReqXML += string.Format("			</NetworkInfo> "                                                                         ).Trim();
                ReqXML += string.Format("			<SecurityInfo>"                                                                          ).Trim();
                ReqXML += string.Format("				<SWIFTNetSecurityInfo/>"                                                             ).Trim();
                ReqXML += string.Format("			</SecurityInfo>"                                                                         ).Trim();
                //ReqXML += string.Format("			<SecurityInfo>   "                                                                      ).Trim();
                //ReqXML += string.Format("				<FINSecurityInfo>  "                                                                ).Trim();
                //ReqXML += string.Format("					<ChecksumResult>Success</ChecksumResult>     "                              ).Trim();
                //ReqXML += string.Format("					<ChecksumValue>28CA7E064C4E</ChecksumValue>	 "                              ).Trim();
                //ReqXML += string.Format("					<MACResult>Success</MACResult>	 "                                          ).Trim();
                //ReqXML += string.Format("					<MACSignatureValue>	 "                                                          ).Trim();
                //ReqXML += string.Format("						<SwSec:Signature>      "                                                        ).Trim();
                //ReqXML += string.Format("							<SwSec:SignedInfo>     "                                                    ).Trim();
                //ReqXML += string.Format("								<Sw:Reference>	   "                                                    ).Trim();
                //ReqXML += string.Format("									<Sw:DigestValue>15MAI/k5iT9132RBxTF7CdYZIKSCcIaVsaOl50KppP8=</Sw:DigestValue>  ").Trim();
                //ReqXML += string.Format("								</Sw:Reference>	  "                                                     ).Trim();
                //ReqXML += string.Format("							</SwSec:SignedInfo>	   "                                                    ).Trim();
                //ReqXML += string.Format("							<SwSec:SignatureValue>PEMF@Proc-Type: 4,MIC-ONLY    "                       ).Trim();
                //ReqXML += string.Format("								Content-Domain: RFC822	"                                               ).Trim();
                //ReqXML += string.Format("								EntrustFile-Version: 2.0   "                                            ).Trim();
                //ReqXML += string.Format("								Originator-DN: cn=uku1ceu1gtx,ou=qa,o=bktrus33,o=swift	 "              ).Trim();
                //ReqXML += string.Format("								Orig-SN: 1576391754    "                                                ).Trim();
                //ReqXML += string.Format("								MIC-Info: SHA256, RSA,	   "                                            ).Trim();
                //ReqXML += string.Format("								Bps+4+feblW8xRrcCCyz0jowd9ogbpQp/3QAZYe1xa7TscrCAfHrG/LUg/I8ig+R "      ).Trim();
                //ReqXML += string.Format("								fmwqhZEZnmnCdyKDTEkKRVfkG69rEY/ZxCy5ecEHyxIT0kkM/818NGaPfFmHcvm2 "      ).Trim();
                //ReqXML += string.Format("								+yLR3F9O1PU5ds2S4IMtMBBjYCmrNMQwt7wvYYCE9LwkVfgdhRWuAkL5jkRUF2y9  "     ).Trim();
                //ReqXML += string.Format("								CvJ+uuKOdFU3bFrfcjbXKKff6bTgd789EMa4t6NnGjRrMhuu752PcGk+DHav9nJS "      ).Trim();
                //ReqXML += string.Format("								noZX8eDGnatXq0AjeDjvS3raAAIzXxN6hNly5VXnvBVa8HEfnnABNwNTXB5bVCQf  "     ).Trim();
                //ReqXML += string.Format("								PAPjAsQ2QvgBi6kOI/CcdQ==   "                                            ).Trim();
                //ReqXML += string.Format("							</SwSec:SignatureValue>	  "                                                 ).Trim();
                //ReqXML += string.Format("							<SwSec:KeyInfo>	  "                                                         ).Trim();
                //ReqXML += string.Format("								<SwSec:SignDN>cn=uku1ceu1gtx,ou=qa,o=bktrus33,o=swift</SwSec:SignDN>  " ).Trim();
                //ReqXML += string.Format("								<SwSec:CertPolicyId>1.3.21.6.6.10.100.1</SwSec:CertPolicyId>   "        ).Trim();
                //ReqXML += string.Format("							</SwSec:KeyInfo>	 "                                                      ).Trim();
                //ReqXML += string.Format("							<SwSec:Manifest>   "                                                        ).Trim();
                //ReqXML += string.Format("								<Sw:Reference>	  "                                                     ).Trim();
                //ReqXML += string.Format("									<Sw:DigestRef>M</Sw:DigestRef>	"                                   ).Trim();
                //ReqXML += string.Format("									<Sw:DigestValue>mFUdceDHvLye/GpIs73qzf2quHDuFgvTCASh3AnHmuM=</Sw:DigestValue>	").Trim();
                //ReqXML += string.Format("								</Sw:Reference>	     "  ).Trim();
                //ReqXML += string.Format("							</SwSec:Manifest>	"       ).Trim();
                //ReqXML += string.Format("						</SwSec:Signature>   "          ).Trim();
                //ReqXML += string.Format("					</MACSignatureValue> "          ).Trim();
                //ReqXML += string.Format("				</FINSecurityInfo>	 "              ).Trim();
                //ReqXML += string.Format("			</SecurityInfo>    "                    ).Trim();
                ReqXML += string.Format("		</Message>	      "                         ).Trim();
                ReqXML += string.Format("	</Header>	    "                               ).Trim();
                ReqXML += string.Format("	<Body>	   "                                    ).Trim();
                ReqXML += string.Format("{0}" , MsgBody                                         ).Trim();
                ReqXML += string.Format("	</Body>  "                                      ).Trim();
                ReqXML += string.Format("  </DataPDU> "                                     ).Trim();

            }     
             catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display   = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "fn_GET_CloudXML", Err_Date2));

                return "2";
            }
            finally { }

            return ReqXML;
        }
        

        string Post_Outward_to_MQ()
        {
            string SQLStr         = "";
            string Source_Ref     = "";
            string Str_to_display = "";
            int    File_Loop_No   = 1;
            Int64  RTGS_OUTGOING_Batch_Size = 50;
            string textLine       = "";
            string MQ_Format_Msg  = "";
            string lstContents    = "";
            bool   TxtFound       = false;
            DataTable MQ_Rec;
            DataTable SysRec                     = new DataTable();
            bool      RTGS_Outwards_Live_Instance = false;
            string    CentralBankCode = "";
            string    RTGS_Outwards_Live_CentralBankCode = "";
            string    RTGS_Outwards_Test_CentralBankCode = "";
            string    RTGS_Outwards_Bank_SWIFTCode       = "";
            string    MQ_Manager                         = "";
            string    MQ_Queue                           = "";
            string    Curr_Short_Name                    = "";

            string RTGS_Outwards_Temp_Directory = "";
            string Posting_IP                   = "";
            bool   FIELD_21_INUSE               = false;
            bool   USE_STP_FIELD50_WITH_DETAILS = false;
            bool   KEEP_STP_TEMP_BATCHES        = false;
            string Processing_Date              = "";
            DateTime  Curr_Time  = DateTime.Now;
            DateTime  StartTime  = DateTime.Now;
            DateTime  EndTime    = DateTime.Now.AddDays(-1);
            Hashtable m_hashtable      = new Hashtable();
            Hashtable m_whereHashTable = new Hashtable();
                            
            bool  RTGS_Outwards_Ignore_Holiday = false;
            bool  CLOUD_STP_ENABLED            = false;
            string Target_File = "";
    
            try
            {
                SysRec = new DataTable();
                SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('FIELD_21_INUSE','USE_STP_FIELD50_WITH_DETAILS','KEEP_STP_TEMP_BATCHES','RTGS_OUTGOING_Batch_Size','RTGS_Outwards_Live_Instance','RTGS_Outwards_Live_CentralBankCode','RTGS_Outwards_Test_CentralBankCode','RTGS_Outwards_Temp_Directory','RTGS_Outwards_Bank_SWIFTCode','OUTWARD_POSTING_METHOD','MQ_Manager','MQ_Queue','RTGS_Outwards_Ignore_Holiday','CLOUD_STP_ENABLED') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                foreach (DataRow param_Row in SysRec.Rows)
                {
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "FIELD_21_INUSE".ToUpper())                     FIELD_21_INUSE                     = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "USE_STP_FIELD50_WITH_DETAILS".ToUpper())       USE_STP_FIELD50_WITH_DETAILS       = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "KEEP_STP_TEMP_BATCHES".ToUpper())              KEEP_STP_TEMP_BATCHES              = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_Instance".ToUpper())        RTGS_Outwards_Live_Instance        = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Ignore_Holiday".ToUpper())       RTGS_Outwards_Ignore_Holiday       = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "CLOUD_STP_ENABLED".ToUpper())                  CLOUD_STP_ENABLED                  = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;

                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_OUTGOING_Batch_Size".ToUpper())           RTGS_OUTGOING_Batch_Size           = Convert.ToInt64(param_Row["Parameter_Value"].ToString().Trim());
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_CentralBankCode".ToUpper()) RTGS_Outwards_Live_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Test_CentralBankCode".ToUpper()) RTGS_Outwards_Test_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper())       RTGS_Outwards_Temp_Directory       = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Bank_SWIFTCode".ToUpper())       RTGS_Outwards_Bank_SWIFTCode       = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "MQ_Manager".ToUpper())                         MQ_Manager                         = param_Row["Parameter_Value"].ToString().Trim();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "MQ_Queue".ToUpper())                           MQ_Queue                           = param_Row["Parameter_Value"].ToString().Trim();
                }

                CentralBankCode = (RTGS_Outwards_Live_Instance) ? RTGS_Outwards_Live_CentralBankCode : RTGS_Outwards_Test_CentralBankCode;
                if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) RTGS_Outwards_Temp_Directory = RTGS_Outwards_Temp_Directory + System.IO.Path.DirectorySeparatorChar.ToString();

                bool MQ_DataPosting = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.RTGS_Outwards_MQ_DataPosting;
                if ((MQ_DataPosting) && (CLOUD_STP_ENABLED))
                {

                    SQLStr = "SELECT Hol_Date_D FROM tbl_STP_Holidays WITH (NOLOCK) WHERE CONVERT(VARCHAR(10),Hol_Date_D ,25) = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,25))";
                    int Holiday_Days = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr).Rows.Count;

                    // Release Marked but Unposted transactions after 20 minutes
                    SQLStr = string.Format(" UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = NULL, Processing_Time = NULL, Posted_to_MQ_YN_B = 0");
                    SQLStr += string.Format(" WHERE RTGS_OutStage_Inst_N IN");
                    SQLStr += string.Format(" (SELECT RTGS_OutStage_Inst_N FROM tbl_RTGS_Outward_Trxn_Staging  WITH (NOLOCK) WHERE Processing_ID IS NOT NULL AND Posted_YN_B = 0 AND DATEDIFF(mi,Processing_Time,CURRENT_TIMESTAMP) > 15");
                    SQLStr += string.Format(" AND Trxn_Ref_C NOT IN (SELECT Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) GROUP BY Trxn_Ref_C HAVING COUNT(*) > 1))");
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                    // Do the checks and Authorisation here
                    SQLStr = "[dbo].[ustp_Auto_Authorise_Trxns]";
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                    // Check if we are within Processing Window
                    SysRec = new DataTable();
                    SQLStr = string.Format(" SELECT CONVERT(VARCHAR(16), CURRENT_TIMESTAMP,25) AS Processing_Date, CONVERT(VARCHAR(19), CURRENT_TIMESTAMP,25) AS Curr_Time, CONVERT(VARCHAR(11), CURRENT_TIMESTAMP,25)  + Procesing_Start_Time AS StartTime,  CONVERT(VARCHAR(11), CURRENT_TIMESTAMP,25)  + Procesing_End_Time AS EndTime FROM tbl_SysParam");
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        Processing_Date = param_Row["Processing_Date"].ToString();
                        Curr_Time       = Convert.ToDateTime(param_Row["Curr_Time"].ToString());
                        StartTime       = Convert.ToDateTime(param_Row["StartTime"].ToString());
                        EndTime         = Convert.ToDateTime(param_Row["EndTime"].ToString());
                    }

                    if ((Curr_Time >= StartTime) && (Curr_Time <= EndTime))
                    {
                        Utilities.LogToFile("Line before Batching.");
                        


                        if (((DateTime.Now.DayOfWeek.ToString() == "Saturday") || (DateTime.Now.DayOfWeek.ToString() == "Sunday") || (Holiday_Days != 0)) && (RTGS_Outwards_Ignore_Holiday == false) && (CLOUD_STP_ENABLED))
                        {
                            Str_to_display = string.Format("STP Outwards : {0}{1}. {2}{0}", DateTime.Now.ToString(), (char)13, "Weekend and Holiday (Non Cloud) Processing  is not possible - Outwards will not be sent. ");
                        }
                        else
                        {
                            Guid TrnBatchID;
                            TrnBatchID = Guid.NewGuid();
                            // Mark Batch
                            //SQLStr = string.Format("UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = '{0}', Processing_Time = CURRENT_TIMESTAMP WHERE RTGS_OutStage_Inst_N IN ", TrnBatchID);
                            //SQLStr += string.Format(" (SELECT TOP {0} Trxn.RTGS_OutStage_Inst_N FROM tbl_RTGS_Outward_Trxn_Staging Trxn WITH (NOLOCK) WHERE Trxn.Processing_ID IS NULL AND Trxn.Approved_YN_B = '1' AND Trxn.Posted_YN_B = 0 AND Trxn.RTGS_OutStage_Inst_N IN ", RTGS_OUTGOING_Batch_Size);
                            //SQLStr += string.Format(" (SELECT  MIN(Trxn1.RTGS_OutStage_Inst_N) FROM tbl_RTGS_Outward_Trxn_Staging Trxn1 WITH (NOLOCK) GROUP BY Trxn1.Trxn_Ref_C,Trxn1.RTGS_OutStage_Inst_N) ORDER BY Trxn.RTGS_OutStage_Inst_N ASC)");
                       
                            SQLStr = string.Format("UPDATE tbl_RTGS_Outward_Trxn_Staging SET Processing_ID = '{0}', Processing_Time = CURRENT_TIMESTAMP WHERE RTGS_OutStage_Inst_N IN ", TrnBatchID);
                            SQLStr += string.Format(" (SELECT TOP {0} Trxn.RTGS_OutStage_Inst_N FROM tbl_RTGS_Outward_Trxn_Staging Trxn WITH (NOLOCK) INNER JOIN tbl_Currencies CurrTbl WITH (NOLOCK) ON Trxn.Trxn_Curr = CurrTbl.Curr_SwitchCode_C WHERE Trxn.Processing_ID IS NULL AND Trxn.Approved_YN_B = '1' AND Trxn.Posted_YN_B = 0 AND Trxn.RTGS_OutStage_Inst_N IN ", RTGS_OUTGOING_Batch_Size);
                            SQLStr += string.Format(" (SELECT  MIN(Trxn1.RTGS_OutStage_Inst_N) FROM tbl_RTGS_Outward_Trxn_Staging Trxn1 INNER JOIN tbl_Currencies CurrTbl1 WITH (NOLOCK) ON Trxn1.Trxn_Curr = CurrTbl1.Curr_SwitchCode_C GROUP BY Trxn1.Trxn_Ref_C,Trxn1.RTGS_OutStage_Inst_N) ORDER BY Trxn.RTGS_OutStage_Inst_N ASC)");
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);

                            // Post the Records in the Staging Table to WebSphere MQ That have not been Posted
                            File_Loop_No = 0;

                            SQLStr = string.Format("SELECT Trxn.*, Agt.BSA_C,CurrTbl.Curr_Short_Name FROM tbl_RTGS_Outward_Trxn_Staging Trxn  WITH (NOLOCK) INNER JOIN tbl_Currencies CurrTbl WITH (NOLOCK) ON Trxn.Trxn_Curr = CurrTbl.Curr_SwitchCode_C LEFT Join tbl_Agent_Banks Agt  WITH (NOLOCK) ON SUBSTRING(Trxn.Benef_Bank_C,1,7) = SUBSTRING(Agt.Bank_SWIFT_Addr_C,1,7) WHERE Trxn.Processing_ID = '{0}' AND Trxn.Approved_YN_B = '1' AND Trxn.Posted_YN_B = 0 AND Trxn.RTGS_OutStage_Inst_N IN ", TrnBatchID);
                            SQLStr += " (SELECT  MIN(Trxn1.RTGS_OutStage_Inst_N) FROM tbl_RTGS_Outward_Trxn_Staging Trxn1 WITH (NOLOCK) GROUP BY Trxn1.Trxn_Ref_C,Trxn1.RTGS_OutStage_Inst_N) ORDER BY Trxn.RTGS_OutStage_Inst_N ASC";
                            DataTable StagingTbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),SQLStr);
                            Utilities.LogToFile(" Line after DB opening for MQ Posting.");
                            foreach (DataRow StagingRow in StagingTbl.Rows)
                            {
                                string ORF_Val = StagingRow["ORF_Val_C"].ToString().Trim();
                                if (ORF_Val.Length == 0)
                                {
                                    ORF_Val = string.Format("{0}", SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),"SELECT 'AC' + RIGHT(CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,112),6) + REPLACE(CONVERT(VARCHAR(11),CURRENT_TIMESTAMP,114),':' , '')").Rows[0][0].ToString());
                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),string.Format("UPDATE tbl_RTGS_Outward_Trxn_Staging SET ORF_Val_C = '{0}' WHERE RTGS_OutStage_Inst_N = '{1}'", ORF_Val, StagingRow["RTGS_OutStage_Inst_N"].ToString().Trim()));
                                }

                                //Check the File Loop Number so that we do not overload the MQ Server
                                if (File_Loop_No > RTGS_OUTGOING_Batch_Size)
                                {
                                    break;
                                }
                                Source_Ref      = StagingRow["Trxn_Ref_C"].ToString();
                                Curr_Short_Name = StagingRow["Curr_Short_Name"].ToString();
                                Utilities.LogToFile(string.Format("Looping in SQL DB. Ref : {0}", Source_Ref));

                                // Check for Duplicates within Same Table before proceeding
                                SQLStr = String.Format("SELECT RTGS_OutStage_Inst_N FROM [tbl_RTGS_Outward_Trxn_Staging] WITH (NOLOCK) WHERE Posted_YN_B = 1 AND Trxn_Ref_C = '{0}'", Source_Ref);
                                if (SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(),SQLStr).Rows.Count != 0)
                                {
                                    string Curr_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);
                                    Str_to_display   = string.Format("{0} has been Rejected (Duplicate) on : {1}", Source_Ref, DateTime.Now.ToString());

                                    // Update the Outwards Table                           
                                    m_hashtable = new Hashtable();
                                    m_hashtable.Add("Posted_YN_B"               , "1");
                                    m_hashtable.Add("Posted_to_MQ_YN_B"         , "1");
                                    m_hashtable.Add("Posted_to_MQ_Date"         , Curr_Date);
                                    m_hashtable.Add("Posted_to_MQ_Data"         , "Not sent to MQ");
                                    m_hashtable.Add("RTGS_Out_PostReject_Name_C", Target_File);
                                    m_hashtable.Add("RTGS_Out_Reject_Reason_C"  , "Possible Duplicate on Reference #");
                                    m_whereHashTable = new Hashtable();

                                    m_whereHashTable.Add("RTGS_OutStage_Inst_N" , StagingRow["RTGS_OutStage_Inst_N"].ToString());
                                    SqlHelper.updateSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable, m_whereHashTable);
                                }
                                else
                                {
                                    // Check for Duplicates from Refrence Check External Table before proceeding
                                    SQLStr = string.Format("SELECT [Inst_No_N] FROM tbl_RTGS_Outward_Ref_Check_STP WITH (NOLOCK) WHERE Reference_C = '{0}'", Source_Ref);
                                    if (SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr).Rows.Count != 0)
                                    {
                                        // Update the Outwards Table                           
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("Posted_YN_B"               , "0");
                                        m_hashtable.Add("Posted_to_MQ_YN_B"         , "0");
                                        m_hashtable.Add("Posted_to_MQ_Data"         , "Not sent to MQ");
                                        m_hashtable.Add("RTGS_Out_PostReject_Name_C", Target_File);
                                        m_hashtable.Add("RTGS_Out_Reject_Reason_C"  , "Possible Duplicate. Reference # was used before. Check Ref Table");
                                        m_whereHashTable = new Hashtable();

                                        m_whereHashTable.Add("RTGS_OutStage_Inst_N" , StagingRow["RTGS_OutStage_Inst_N"].ToString());
                                        SqlHelper.updateSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable, m_whereHashTable);
                                    }
                                    else
                                    {
                                        Utilities.LogToFile(string.Format("Duplicate Record Check for Ref : {0}", Source_Ref));
                                        string STP_MT103    = "";
                                        string STP_SenderID = ConfigurationManager.AppSettings["RTGS_Outwards_Bank_SWIFTCode"];
                                        if (RTGS_Outwards_Live_Instance == false)
                                        {
                                            RTGS_Outwards_Bank_SWIFTCode = string.Format("{0}0", RTGS_Outwards_Bank_SWIFTCode.Substring(0, 7));
                                        }
                                        string BBB_Val    = "";
                                        string BBB_Val_OG = StagingRow["Benef_Bank_C"].ToString().Trim();
                                        if (StagingRow["Benef_Bank_C"].ToString().Trim().Length >= 8)
                                        {
                                            if (RTGS_Outwards_Live_Instance)
                                            {
                                                BBB_Val = StagingRow["Benef_Bank_C"].ToString().Substring(0, 8).Trim();
                                            }
                                            else
                                            {
                                                BBB_Val = string.Format("{0}0", StagingRow["Benef_Bank_C"].ToString().Substring(0, 7).Trim());
                                            }
                                        }
                                        string BSA_Val = StagingRow["BSA_C"].ToString();
                                        // Check if the corresponding Benef bank Exists
                                        if ((BSA_Val.Length == 0) || (BSA_Val == ""))
                                        {
                                            Utilities.LogToFile(string.Format("BSA Check Failure for Ref : {0}", Source_Ref));
                                        }
                                        else
                                        {
                                            Utilities.LogToFile(string.Format("BSA Check Successful for Ref : {0}", Source_Ref));
                                            string BCA_Len = (StagingRow["BenefAcc_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string BCA_Val = StagingRow["BenefAcc_C"].ToString();
                                            string PCA_Len = (StagingRow["DebitAcc_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string PCA_Val = StagingRow["DebitAcc_C"].ToString();
                                            string ODT_Val = StagingRow["ValueDate_C"].ToString();
                                            string RRF_Len = (StagingRow["Trxn_Ref_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string RRF_Val = StagingRow["Trxn_Ref_C"].ToString();
                                            string RRF_Val_MT103 = StagingRow["Trxn_Ref_C"].ToString();
                                            if (RRF_Val_MT103.Length > 8)
                                            {
                                                RRF_Val_MT103 = RRF_Val_MT103.Substring(0, 8);
                                            }
                                            string PID_Len = (StagingRow["DebitRef_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string PID_Val = StagingRow["DebitRef_C"].ToString();
                                            string BCN_Len = ((StagingRow["BenefName_C"].ToString().Replace("#R#", "")).Length + 7).ToString().PadLeft(4, (char)48);
                                            string BCN_Val = StagingRow["BenefName_C"].ToString();
                                            string BCN_Val_RRF = StagingRow["BenefName_C"].ToString().Replace("#R#", " ").Trim();
                                            if (BCN_Val_RRF.Length > 16) BCN_Val_RRF = BCN_Val_RRF.Substring(0, 16).Trim();
                                            string STA_Len = (String.Format("{0:0.00}", StagingRow["Amnt_N"]).ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string STA_Val = String.Format("{0:0.00}", StagingRow["Amnt_N"]).ToString();
                                            string EFS_Val = StagingRow["ValueDate_C"].ToString();
                                            string OCN_Len = (StagingRow["DebitName_C"].ToString().Length + 7).ToString().PadLeft(4, (char)48);
                                            string OCN_Val = StagingRow["DebitName_C"].ToString();
                                            string OCN_Fld50K = "";
                                            Tag_Separator.SetValue("#R#", 0);
                                            string[] OCN_Fld50KParams = StagingRow["DebitName_C"].ToString().Split(Tag_Separator, StringSplitOptions.None);
                                            double Fld50KLen = OCN_Fld50KParams.Length;
                                            for (int LoopNo = 0; LoopNo < Fld50KLen - 1; LoopNo++)
                                            {
                                                if (OCN_Fld50KParams[LoopNo].Length > 35)
                                                {
                                                    OCN_Fld50K += OCN_Fld50KParams[LoopNo].ToString().Substring(0, 35).Trim() + Environment.NewLine;
                                                }
                                                else
                                                {
                                                    if (OCN_Fld50KParams[LoopNo].ToString().Length != 0)
                                                    {
                                                        OCN_Fld50K += OCN_Fld50KParams[LoopNo].ToString().Trim() + Environment.NewLine;
                                                    }
                                                }
                                            }

                                            //For BancANBC
                                            OCN_Fld50K = StagingRow["DebitName_C"].ToString();
                                            if (OCN_Fld50K.Length > 35)
                                            {
                                                OCN_Fld50K = OCN_Fld50K.Substring(0, 35);
                                            }

                                            string RemitterName = StagingRow["DebitName_C"].ToString();
                                            string DebitAcc_C   = StagingRow["DebitAcc_C"].ToString();
                                            string DebitInfo2   = StagingRow["DebitInfo2"].ToString();
                                            string DebitInfo3   = StagingRow["DebitInfo3"].ToString();
                                            string DebitInfo4   = StagingRow["DebitInfo4"].ToString();

                                            if (((StagingRow["TrnSource"].ToString() == "FTOT") || (StagingRow["TrnSource"].ToString() == "ZIPPI")) && (USE_STP_FIELD50_WITH_DETAILS) && (DebitAcc_C != ""))
                                            {
                                                if (DebitAcc_C.Length > 34)
                                                {
                                                    DebitAcc_C = DebitAcc_C.Substring(0, 34);
                                                }
                                                OCN_Fld50K = string.Format("/{0}", DebitAcc_C);

                                                if (RemitterName.Length > 35)
                                                {
                                                    RemitterName = RemitterName.Substring(0, 35);
                                                }
                                                if (RemitterName.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", RemitterName, Environment.NewLine);
                                                }

                                                if (DebitInfo2.Length > 35)
                                                {
                                                    DebitInfo2 = DebitInfo2.Substring(0, 35);
                                                }
                                                if (DebitInfo2.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", DebitInfo2, Environment.NewLine);
                                                }

                                                if (DebitInfo3.Length > 35)
                                                {
                                                    DebitInfo3 = DebitInfo3.Substring(0, 35);
                                                }
                                                if (DebitInfo3.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", DebitInfo3, Environment.NewLine);
                                                }

                                                if (DebitInfo4.Length > 35)
                                                {
                                                    DebitInfo4 = DebitInfo4.Substring(0, 35);
                                                }
                                                if (DebitInfo4.Trim() != "")
                                                {
                                                    OCN_Fld50K += string.Format("{1}{0}", DebitInfo4, Environment.NewLine);
                                                }
                                            }
                                            else
                                            {
                                                OCN_Fld50K = StagingRow["DebitName_C"].ToString();
                                                if (OCN_Fld50K.Length > 35)
                                                {
                                                    OCN_Fld50K = OCN_Fld50K.Substring(0, 35);
                                                }
                                            }

                                            string   BCN_Fld59       = "";
                                            string[] BCN_Fld59Params = StagingRow["BenefName_C"].ToString().Split(Tag_Separator, StringSplitOptions.None);
                                            double   Fld59Len        = BCN_Fld59Params.Length;
                                            for (int LoopNo = 0; LoopNo < Fld59Len - 1; LoopNo++)
                                            {
                                                if (BCN_Fld59Params[LoopNo].Length > 35)
                                                {
                                                    BCN_Fld59 += BCN_Fld59Params[LoopNo].ToString().Substring(0, 35).Trim() + Environment.NewLine;
                                                }
                                                else
                                                {
                                                    if (BCN_Fld59Params[LoopNo].ToString().Length != 0)
                                                    {
                                                        BCN_Fld59 += BCN_Fld59Params[LoopNo].ToString().Trim() + Environment.NewLine;
                                                    }
                                                }
                                            }

                                            // For BancABC
                                            BCN_Fld59 = StagingRow["BenefName_C"].ToString();
                                            if (BCN_Fld59.Length > 35)
                                            {
                                                BCN_Fld59 = BCN_Fld59.Substring(0, 35);
                                            }

                                            string Fld70Lines = "";
                                            string StrInput   = PID_Val;
                                            if (StrInput.Length > 140) StrInput = StrInput.Substring(0, 140);
                                            int str_Lines = StrInput.Length / 35;
                                            for (int i = 0; i < str_Lines; i++)
                                            {
                                                Fld70Lines += StrInput.Substring(i * 35, 35).Trim() + Environment.NewLine;
                                            }
                                            if (str_Lines * 35 < StrInput.Length)
                                            {
                                                Fld70Lines += StrInput.Substring(str_Lines * 35, StrInput.Length - str_Lines * 35).Trim() + Environment.NewLine;
                                            }

                                            // string OCN_Fld50K = MQ_Rec.Rows[0]["DebitName_C"].ToString().Replace("#R#", Environment.NewLine);
                                            string Block_3 = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{1}", "{", "}"); // Latest Change for CBZ file

                                            if (FIELD_21_INUSE)
                                            {
                                                string field121 =  Utilities.fn_getField_121();
                                                Block_3         = string.Format("{0}3:{0}103:ZET{1}{0}113:PROP{1}{2}{1}", "{", "}", field121); // Latest Change for CBZ file
                                            }

                                            //string POR_No = m_databaseClass.getDataSet("SELECT CONVERT(VARCHAR(10),[Outwards_RunNo_N]) FROM [tbl_RTGS_Outward_Days] WITH (NOLOCK) Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))").Tables[0].Rows[0][0].ToString().PadLeft(7, (char)48);
                                            string PDT_Val = string.Format("{0:yyyyMMddHHmmss}", DateTime.Now);

                                            string OCN_Len_MQMsg = (OCN_Val.Replace("#R#", " ").Length + 7).ToString().PadLeft(4, (char)48);
                                            string OCN_Val_MQMsg = OCN_Val.Replace("#R#", " ");

                                            string BCN_Len_MQMsg = (BCN_Val.Replace("#R#", " ").Length + 7).ToString().PadLeft(4, (char)48);
                                            string BCN_Val_MQMsg = BCN_Val.Replace("#R#", " ");

                                            MQ_Format_Msg = string.Format("{20}@0015SNDFMBZZWHX0008APEP0021PDT{0}0011MRTFSP00010APV3000013APPCEntry0023ORF{1}0015EFS{2}0010CURZWL{3}STA{4}0010CPCZWL{3}ISA{4}0015IOBSBICZWHX0015BKPSBICZWHX0015BBB{5}0015OCDSBICZWHX0015BKB{5}{6}BCA{7}{8}BCN{9}{10}PCA{11}{12}OCN{13}{14}PID{15}0010CHRSHA0010RECCTP0015ODT{16}0008VSBY{17}RRF{18}0011BOCSSTD0015ADCREBZZWHA0015RRC{5}@{19}", PDT_Val, ORF_Val, EFS_Val, STA_Len, STA_Val, BBB_Val, BCA_Len, BCA_Val, BCN_Len_MQMsg, BCN_Val_MQMsg, PCA_Len, PCA_Val, OCN_Len_MQMsg, OCN_Val_MQMsg, PID_Len, PID_Val, ODT_Val, RRF_Len, RRF_Val, "}", "{");
                                            // Use tag 3 for STP
                                            string MT103_Lines = "FMBZZWHX";

                                            STP_MT103 = string.Format("{0}1:F01{2}AXXX9999999999{1}{0}2:I103{4}XXXXN{1}{3}{0}4:{5}", "{", "}", RTGS_Outwards_Bank_SWIFTCode, Block_3, BBB_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":20:{0}{1}", ORF_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":23B:{0}{1}", "SSTD", Environment.NewLine);
                                          //STP_MT103 += string.Format(":32A:{0}ZWL{1}{2}", Processing_Date.Substring(2, 8).Replace("-", ""), STA_Val.Replace(".", ","), Environment.NewLine);
                                            STP_MT103 += string.Format(":32A:{0}{1}{2}{3}", Processing_Date.Substring(2, 8).Replace("-", ""), Curr_Short_Name, STA_Val.Replace(".", ","), Environment.NewLine);
                                            //STP_MT103 += string.Format(":50K:/{0}{2}{1}", PCA_Val, OCN_Fld50K, Environment.NewLine);
                                            STP_MT103 += string.Format(":50K:{0}{1}", OCN_Fld50K, Environment.NewLine);
                                            STP_MT103 += string.Format(":52A:{0}{1}", RTGS_Outwards_Bank_SWIFTCode, Environment.NewLine);
                                            STP_MT103 += string.Format(":53A:{0}{1}", RTGS_Outwards_Bank_SWIFTCode, Environment.NewLine);
                                            STP_MT103 += string.Format(":54A:{0}{1}", BBB_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":56A:{0}{1}", RTGS_Outwards_Bank_SWIFTCode, Environment.NewLine);
                                            STP_MT103 += string.Format(":57A:{1}{2}", BSA_Val, BBB_Val, Environment.NewLine);
                                            STP_MT103 += string.Format(":59:/{0}{2}{1}{2}", BCA_Val, BCN_Fld59, Environment.NewLine);

                                            if (Fld70Lines != "")
                                            {
                                                STP_MT103 += string.Format(":70:{0}", Fld70Lines);
                                            }
                                            STP_MT103 += string.Format(":71A:{0}{1}", "SHA", Environment.NewLine);
                                            string BBB_Val_Tmp = BBB_Val;
                                            if (BBB_Val_Tmp.Length >= 8)
                                            {
                                                BBB_Val_Tmp = BBB_Val.Substring(0, 7);
                                            }
                                            // Now Field 72
                                            if (1 == 1)
                                            {
                                                // string StrInput_Local = string.Format("/REC/RTM02DLPCTP/RRF/{0}/BRF/{1}", BCN_Val_RRF, BCA_Val);  //Working in Test
                                                string StrInput_Local = string.Format("/REC/CTP/RRF/{0}/BRF/{1}", BCN_Val_RRF, BCA_Val);

                                                int    StrInput_Local_Len = StrInput_Local.Length;
                                                string Fld72_Line1        = "";
                                                string Fld72Lines         = "";
                                                if (StrInput_Local.Length <= 35)
                                                {
                                                    STP_MT103 += string.Format(":72:{0}{1}", StrInput_Local, Environment.NewLine);
                                                }
                                                else
                                                {
                                                    Fld72_Line1 = StrInput_Local.Substring(0, 35);
                                                    if (Fld72_Line1.EndsWith("/"))
                                                    {
                                                        Fld72_Line1 = StrInput_Local.Substring(0, 34);
                                                        StrInput_Local = StrInput_Local.Substring(34, StrInput_Local_Len - 34);
                                                    }
                                                    else
                                                    {
                                                        Fld72_Line1 = StrInput_Local.Substring(0, 35);
                                                        StrInput_Local = StrInput_Local.Substring(35, StrInput_Local_Len - 35);
                                                    }
                                                    Fld72_Line1 += Environment.NewLine;

                                                    //StrInput_Local = StrInput_Local.Substring(35, StrInput_Local_Len-35);

                                                    string Current_Line = "";
                                                    if (StrInput_Local.Length > 140) StrInput_Local = StrInput_Local.Substring(0, 140);
                                                    int str_Lines_Local = StrInput_Local.Length / 33;
                                                    for (int i = 0; i < str_Lines_Local; i++)
                                                    {
                                                        Current_Line = "//" + StrInput_Local.Substring(i * 33, 33);
                                                        Fld72Lines += Current_Line + Environment.NewLine;
                                                    }
                                                    if (str_Lines * 33 < StrInput_Local.Length)
                                                    {
                                                        Current_Line = "//" + StrInput_Local.Substring(str_Lines_Local * 33, StrInput_Local.Length - str_Lines_Local * 33);
                                                        Fld72Lines += Current_Line + Environment.NewLine;
                                                    }
                                                    STP_MT103 += ":72:" + Fld72_Line1 + Fld72Lines;
                                                }
                                            }

                                            STP_MT103 += string.Format("-{0}", "}");

                                            // This Check needs to be verified
                                            if (MQ_Format_Msg.Length > 36)
                                            {
                                                string Kats = MQ_Format_Msg.Substring(9, 8);
                                                if (!(MQ_Format_Msg.Substring(9, 7) == "FMBZZWH"))
                                                {
                                                    //lstContents = "";
                                                    //foreach (string s in lst_Info.Items)
                                                    //{
                                                    //    lstContents += s;
                                                    //}
                                                    //TxtFound = lstContents.Contains(Source_Ref);
                                                    //if (!(TxtFound))
                                                    //{
                                                    //    Str_to_display = string.Format("{0}  has not been processed on : {1}.  Invalid Format", Source_Ref, DateTime.Now.ToString());
                                                    //    lst_Info.Items.Add(Str_to_display);
                                                    //    lst_Info.Refresh();
                                                    //}
                                                }
                                                else
                                                {
                                                    // Create the Data File 
                                                    Utilities.LogToFile(string.Format("Message Lenght Check for Ref : {0}", Source_Ref));
                                                    //string Date_Var = m_databaseClass.getDataSet("SELECT REPLACE(CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,102),'.','_') + '_' +  REPLACE(CONVERT(VARCHAR(12),CURRENT_TIMESTAMP,114),':','_') as DtFld").Tables[0].Rows[0][0].ToString();
                                                    string Date_Var      = string.Format("{0:yyyy_MM_dd_HH_mm_ss_fff}", DateTime.Now);
                                                    string Tmp_File_name = string.Format("{0}{1}_{2}_{3}.txt", RTGS_Outwards_Temp_Directory, Source_Ref, Date_Var, File_Loop_No);
                                                    File.WriteAllText(Tmp_File_name, STP_MT103);

                                                    // Create the Batch File that writes to a response file
                                                    string Tmp_BatchFile_name    =  string.Format("{0}{1}_{2}_{3}.bat", RTGS_Outwards_Temp_Directory, Source_Ref, Date_Var, File_Loop_No);
                                                    string Tmp_ResponseFile_name = string.Format("{0}{1}_{2}_{3}.rsp",  RTGS_Outwards_Temp_Directory, Source_Ref, Date_Var, File_Loop_No);
                                                    using (System.IO.StreamWriter Batfile = new System.IO.StreamWriter(@Tmp_BatchFile_name, true))
                                                    {
                                                        //string BatString = string.Format("amqsput_7_select {0} {1} < {2} > {3}", ConfigurationManager.AppSettings["MQ_Queue"], ConfigurationManager.AppSettings["MQ_Manager"], Tmp_File_name, Tmp_ResponseFile_name);
                                                        //Select_MQ_Util -mSTANSB.QMAN -oSTANSB.CE3.STPUSER.MSG -F C:\RTGS_In\Data\RTGS_OutWards\Input\P_11067846.ams  -v3 -Vz  -s C:\RTGS_In\Data\RTGS_OutWards\Input\P_11067846.rsp
                                                        //Writes to 1 queue
                                                        string BatString = string.Format("C:\\RTGS_In\\Purchased_DLL\\Select_MQ_Util -m{0} -o{1} -F {2}  -v3 -Vz  -s > {3}{4}Exit", MQ_Manager,MQ_Queue, Tmp_File_name, Tmp_ResponseFile_name, Environment.NewLine);
                                                        //Writes to 2 queues
                                                        //string BatString = string.Format("C:\\RTGS_In\\Purchased_DLL\\Select_MQ_Util -m{0} -o{1} -o{2} -F {3}  -v3 -Vz  -s > {4}{5}Exit", ConfigurationManager.AppSettings["MQ_Manager"], ConfigurationManager.AppSettings["MQ_Queue"], ConfigurationManager.AppSettings["MQ_Control_Queue"], Tmp_File_name, Tmp_ResponseFile_name, Environment.NewLine);
                                                        Batfile.WriteLine(BatString);
                                                    }

                                                    // Execute the Batch File
                                                    ProcessStartInfo processInfo = new ProcessStartInfo(@Tmp_BatchFile_name);
                                                    processInfo.UseShellExecute  = false;
                                                    processInfo.CreateNoWindow   = true;
                                                    string lk = processInfo.RedirectStandardOutput.ToString();
                                                    Process batchProcess   = new Process();
                                                    batchProcess.StartInfo = processInfo;
                                                    batchProcess.Start();
                                                    batchProcess.WaitForExit();
                                                    batchProcess.Dispose();

                                                    //Wait until reponse File has been generated.
                                                    do
                                                    {
                                                    }
                                                    while (System.IO.File.Exists(Tmp_ResponseFile_name) == false);

                                                    bool isFileInUse;
                                                    isFileInUse = Utilities.IsFileInUse(Tmp_ResponseFile_name);
                                                    do
                                                    {
                                                        isFileInUse = Utilities.IsFileInUse(Tmp_ResponseFile_name);
                                                    }
                                                    while (isFileInUse == true);

                                                    // Check if there was no Error Code in proccesing by Checking the contents of the Response File
                                                    // If the response file has zero bytes means the transaction was not sent
                                                    // textLine = "";

                                                    textLine = File.ReadAllText(Tmp_ResponseFile_name);
                                                    // Save the Putput string
                                                    string SaveResp = Save_ResponseData(Source_Ref, ORF_Val, Date_Var, textLine);

                                                    // Update Processing Details
                                                    string Curr_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);
                                                    m_hashtable      = new Hashtable();
                                                    m_hashtable.Add("Posted_to_MQ_Date"         , Curr_Date);
                                                    m_hashtable.Add("Posted_to_MQ_Data"         , MQ_Format_Msg);
                                                    m_hashtable.Add("MT103_STP_C"               , STP_MT103);
                                                    m_hashtable.Add("ORF_Val_C"                 , ORF_Val.Trim());
                                                    m_hashtable.Add("RTGS_Out_PostReject_Name_C", Target_File);
                                                    m_hashtable.Add("Window_Start_Time_D"       , string.Format("{0:yyyy-MM-dd HH:mm:ss}",StartTime));
                                                    m_hashtable.Add("Window_End_Time_D"         , string.Format("{0:yyyy-MM-dd HH:mm:ss}",EndTime  ));
                                                    m_hashtable.Add("Posted_to_MQ_IP"           , Posting_IP);
                                                    m_hashtable.Add("Posted_YN_B"               , ((textLine.LastIndexOf(":20:") == -1) ? "0" : "1"));
                                                    m_hashtable.Add("Posted_to_MQ_YN_B"         , ((textLine.LastIndexOf(":20:") == -1) ? "0" : "1"));

                                                    m_whereHashTable = new Hashtable();
                                                    m_whereHashTable.Add("Trxn_Ref_C", Source_Ref);
                                                    SqlHelper.updateSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable, m_whereHashTable);

                                                    if (textLine.LastIndexOf(":20:") == -1)
                                                    {
                                                        Str_to_display = string.Format("{0}  has not been processed on : {1}. Error Code :{2}", Source_Ref, DateTime.Now.ToString(), "UnKnown");
                                                    }
                                                    else
                                                    {
                                                        Str_to_display = string.Format("{0}  has been processed on : {1}", Source_Ref, DateTime.Now.ToString());
                                                    
                                                        // Mark the Reference Number to Avoid Future Refrence Number ReUse and duplication
                                                        SQLStr = string.Format("EXEC [dbo].[ustp_MarkPosted_Ref] @Reference_C = '{0}'",  Source_Ref);
                                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                                                    }


                                                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "UPDATE [tbl_RTGS_Outward_Days] SET [Outwards_RunNo_N] = [Outwards_RunNo_N] + 1 Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime)");

                                                    // Now remove the Temporary MQPut Files
                                                    if (!KEEP_STP_TEMP_BATCHES)
                                                    {
                                                        if (System.IO.File.Exists(Tmp_File_name)         == true) System.IO.File.Delete(Tmp_File_name);
                                                        if (System.IO.File.Exists(Tmp_BatchFile_name)    == true) System.IO.File.Delete(Tmp_BatchFile_name);
                                                        if (System.IO.File.Exists(Tmp_ResponseFile_name) == true) System.IO.File.Delete(Tmp_ResponseFile_name);
                                                    }
                                                }
                                            }
                                        }

                                    }    
                                }
                                File_Loop_No += 1;
                            }
                        }   
                    }
                }
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display   = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Post_Outward_to_MQ", Err_Date2));

                return "2";
            }
            finally
            {
                //Application.DoEvents();
            }
        }


        public string Save_ResponseData(string Source_Ref, string Field20_Ref, string ResponseID, string ResponseDetail)
        {
            Hashtable  m_hashtable = new Hashtable();
            try
            {
                m_hashtable = new Hashtable();
                m_hashtable.Add("Source_Ref" , Source_Ref);
                m_hashtable.Add("Field20_Ref", Field20_Ref);
                m_hashtable.Add("Resp_ID"    , ResponseID);
                m_hashtable.Add("Resp_C"     , ResponseDetail);
                m_hashtable.Add("Resp_Date"  , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Response", m_hashtable);
                return "1";
            }
            catch (Exception ex)
            {
                string Err_String    = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Save_ResponseData", Err_Date2));
                return "2";
            }
            finally
            {
            }
        }


        public string Acquire_Outward_Trxns_From_Oracle_FSTP_temp()
        {
            Hashtable m_hashtable = new Hashtable();
            DataTable SysRec = new DataTable();
            string Source_Ref = "";
            string Str_to_display = "";
            string SQLStr = "";
            int File_Loop_No = 1;
            Int64 RTGS_Outwards_Max_Batch_Size = 0;
            string textLine = "";
            string MQ_Format_Msg = "";
            string lstContents = "";
            bool TxtFound = false;
            DataTable MQ_Rec;
            bool RTGS_Outwards_Live_Instance = false;
            string CentralBankCode = "";
            string STP_Currencies = "";
            string RTGS_Outwards_Live_CentralBankCode = "";
            string RTGS_Outwards_Test_CentralBankCode = "";
            string RTGS_Outwards_Temp_Directory = "";
            string Trxn_Curr = "";

            string FCUBS_Schema = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.FCUBS_Schema;
            if (FCUBS_Schema != "") FCUBS_Schema += ".";

            try
            {
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward;
                if (FCUBS_DataAquisition)
                {
                    SysRec = new DataTable();
                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RTGS_Outwards_Temp_Directory','RTGS_Outwards_Live_Instance','RTGS_Outwards_Live_CentralBankCode','RTGS_Outwards_Test_CentralBankCode','RTGS_Outwards_Max_Batch_Size','STP_Currencies') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_Instance".ToUpper()) RTGS_Outwards_Live_Instance = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_CentralBankCode".ToUpper()) RTGS_Outwards_Live_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Test_CentralBankCode".ToUpper()) RTGS_Outwards_Test_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper()) RTGS_Outwards_Temp_Directory = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Max_Batch_Size".ToUpper()) RTGS_Outwards_Max_Batch_Size = Convert.ToInt64(param_Row["Parameter_Value"].ToString().Trim());
                    }

                    CentralBankCode = (RTGS_Outwards_Live_Instance) ? RTGS_Outwards_Live_CentralBankCode : RTGS_Outwards_Test_CentralBankCode;
                    if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) RTGS_Outwards_Temp_Directory = RTGS_Outwards_Temp_Directory + System.IO.Path.DirectorySeparatorChar.ToString();

                    SQLStr = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                    }

                    // Check if There was any processing Today and Insert a new Record if there was not
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "IF NOT EXISTS(SELECT * FROM [tbl_RTGS_Outward_Days] Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))) INSERT INTO [tbl_RTGS_Outward_Days]([Outwards_Date_D],[Outwards_RunNo_N]) SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime , 1 AS RunNo");

                    string Processing_Date = SqlHelper.GetTable(String.Format("SELECT RTRIM(REPLACE(CONVERT(VARCHAR(17),CURRENT_TIMESTAMP,102),'.','-')) + ' ' +  SUBSTRING(CONVERT(VARCHAR(17),CURRENT_TIMESTAMP,114),1,5) as Curr_Date")).Rows[0][0].ToString();

                    string OraclStr = "";
                    OraclStr += string.Format(" SELECT DISTINCT trn_ref_no,AC_CCY FROM {0} local_nostro_01April LogTbl WHERE", FCUBS_Schema);
                    OraclStr += string.Format("     LogTbl.AUTH_STAT       = 'A' ");
                    OraclStr += string.Format(" AND LogTbl.MODULE          = 'FT'");
                    OraclStr += string.Format(" AND LogTbl.AMOUNT_TAG      = 'AMT_EQUIV'");
                    //OraclStr += string.Format(" AND LogTbl.PRODUCT         = 'FSTP'");
                    OraclStr += string.Format(" AND LogTbl.PRODUCT         = 'FTSU'");
                    // OraclStr += string.Format(" AND LogTbl.AC_CCY          = 'USD'");
                    OraclStr += string.Format(" AND LogTbl.AC_CCY IN ({0})", STP_Currencies);
                    OraclStr += string.Format(" AND LogTbl.EVENT          != 'REVR'");
                    OraclStr += string.Format(" AND LogTbl.DRCR_IND        = 'D'");


                    //" SELECT DISTINCT trn_ref_no FROM zwfcc11.actb_daily_log LogTbl WHERE     LogTbl.AUTH_STAT       = 'A'  AND LogTbl.MODULE          = 'FT' AND LogTbl.AMOUNT_TAG      = 'AMT_EQUIV' AND LogTbl.PRODUCT         = 'FSTP' AND LogTbl.AC_CCY          = 'USD' AND LogTbl.EVENT          != 'REVR' AND LogTbl.DRCR_IND        = 'D'"

                    Utilities.LogToFile("Line Before Oracle DB Open");

                    DataTable DailyOracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);

                    Utilities.LogToFile("Line after Oracle Daily DB Open.");

                    if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                    {
                        Utilities.LogToFile("Looping in Oracle Records");
                        // Load the transactions into Staging Table from Oracle
                        foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                        {
                            Source_Ref = DailyOracleRow["trn_ref_no"].ToString().Trim();
                            Trxn_Curr = DailyOracleRow["AC_CCY"].ToString();
                            Utilities.LogToFile(string.Format("Looping in Oracle Records. Ref : {0}", Source_Ref));
                            // Check for Duplicates in Local Staging Table
                            string Check_str = string.Format("SELECT COUNT(*) AS Recs FROM tbl_RTGS_Outward_Trxn_Staging WHERE Trxn_Ref_C = '{0}'", Source_Ref);
                            int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), Check_str).Rows[0][0].ToString());
                            if (DupRecs == 0)
                            {
                                OraclStr = "";
                                OraclStr += string.Format(" SELECT Contr.*, ACC_BRANCH || ACCOUNT AS ACCOUNTNO FROM {0}istb_contractis Contr WHERE ", FCUBS_Schema);
                                OraclStr += string.Format("     Contr.amount_tag      = 'TFR_AMT' ");
                                OraclStr += string.Format(" AND Contr.EVENT_SEQ_NO    = '2'");
                                OraclStr += string.Format(" AND Contr.Contract_Ref_No = '{0}'", Source_Ref);
                                OraclStr += string.Format(" AND Contr.SETTLEMENT_AMT IS NOT NULL");
                                //OraclStr += string.Format(" AND Contr.VALUE_DATE      = TO_DATE('2015-07-28', 'yyyy/mm/dd')");
                                //DataTable OracleTbl = OracleHelper.GetTable(OraclStr);

                                DataTable OracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                Utilities.LogToFile("After Oracle Detail Table Open");
                                if (OracleTbl != null && OracleTbl.Rows.Count > 0)
                                {
                                    // Load the transactions into Staging Table from Oracle
                                    foreach (DataRow dr in OracleTbl.Rows)
                                    {
                                        string Remmitter = dr["ORDERING_CUSTOMER2"].ToString();
                                        string Trn_Amnt = dr["SETTLEMENT_AMT"].ToString();
                                        string ValueDt = string.Format("{0:yyyyMMdd}", dr["VALUE_DATE"]);
                                        string RRF_Val = dr["PAYMENT_DETAILS1"].ToString();
                                        string Benef_Bank = dr["ACC_WITH_INSTN1"].ToString();
                                        string Benef_Acc = dr["ULT_BENEFICIARY1"].ToString();
                                        string Benef_Name = dr["ULT_BENEFICIARY5"].ToString();
                                        string Benef_Ref = dr["ULT_BENEFICIARY4"].ToString();
                                        string DebitAcc_C = dr["ACCOUNTNO"].ToString();
                                        string DebitInfo1 = dr["ordering_customer2"].ToString();
                                        string DebitInfo2 = dr["ordering_customer3"].ToString();
                                        string DebitInfo3 = dr["ordering_customer4"].ToString();
                                        string DebitInfo4 = dr["ordering_customer5"].ToString();

                                        // Now save the record
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("UserID_C", "AUTO");
                                        m_hashtable.Add("Trxn_Ref_C", Source_Ref);
                                        m_hashtable.Add("ORF_Val_C", Source_Ref);
                                        m_hashtable.Add("UserName_C", "AUTO ACQUIRED");
                                        m_hashtable.Add("Benef_Bank_C", Benef_Bank);
                                        //m_hashtable.Add("BSA_C", Benef_BSA);
                                        m_hashtable.Add("Amnt_N", Trn_Amnt);
                                        m_hashtable.Add("ValueDate_C", ValueDt);
                                        m_hashtable.Add("DebitName_C", Remmitter);
                                        m_hashtable.Add("DebitRef_C", Benef_Ref);
                                        m_hashtable.Add("DebitAcc_C", DebitAcc_C);
                                        m_hashtable.Add("DebitInfo1", DebitInfo1);
                                        m_hashtable.Add("DebitInfo2", DebitInfo2);
                                        m_hashtable.Add("DebitInfo3", DebitInfo3);
                                        m_hashtable.Add("DebitInfo4", DebitInfo4);
                                        m_hashtable.Add("BenefAcc_C", Benef_Acc);
                                        m_hashtable.Add("BenefName_C", Benef_Name);
                                        m_hashtable.Add("Fld_50_C", Remmitter);
                                        m_hashtable.Add("RTGS_Out_ImportDate_D", string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_ImportTime_C", string.Format("{0:HH:mm:ss}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                        m_hashtable.Add("Approved_YN_B", "0");
                                        m_hashtable.Add("Posted_YN_B", "0");
                                        m_hashtable.Add("Info_Sent_YN_B", "0");
                                        m_hashtable.Add("TrnSource", "FSTP");
                                        m_hashtable.Add("Trxn_Curr", Trxn_Curr);

                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                        Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS.", DateTime.Now.ToString(), Source_Ref);
                                        //lst_Info.Items.Add(Str_to_display);
                                        //lst_Info.Refresh();
                                    }
                                }
                            }
                        }
                    }
                }
                Utilities.LogToFile("End of Process Transctions in Oracle Table.");
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_Outward_Trxns_From_Oracle_FSTP", Err_Date2));
                return "2";
            }
            finally
            {
                //Application.DoEvents();
            }
        }


        public string Acquire_Outward_Trxns_From_Oracle_FSTP()
        {
            Hashtable m_hashtable = new Hashtable();
            DataTable SysRec      = new DataTable();
            string Source_Ref = "";
            string Str_to_display = "";
            string SQLStr = "";
            int File_Loop_No = 1;
            Int64 RTGS_Outwards_Max_Batch_Size = 0;
            string textLine = "";
            string MQ_Format_Msg = "";
            string lstContents = "";
            bool TxtFound = false;
            DataTable MQ_Rec;
            bool  RTGS_Outwards_Live_Instance = false;
            string CentralBankCode                    = "";
            string STP_Currencies                     = "";
            string RTGS_Outwards_Live_CentralBankCode = "";
            string RTGS_Outwards_Test_CentralBankCode = "";
            string RTGS_Outwards_Temp_Directory       = "";
            string Trxn_Curr = "";
                
            string FCUBS_Schema = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.FCUBS_Schema;
            if (FCUBS_Schema != "") FCUBS_Schema += ".";

            try
            {
                
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward;
                if (FCUBS_DataAquisition)
                {
                    SysRec = new DataTable();
                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RTGS_Outwards_Temp_Directory','RTGS_Outwards_Live_Instance','RTGS_Outwards_Live_CentralBankCode','RTGS_Outwards_Test_CentralBankCode','RTGS_Outwards_Max_Batch_Size','STP_Currencies') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_Instance".ToUpper())        RTGS_Outwards_Live_Instance        = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_CentralBankCode".ToUpper()) RTGS_Outwards_Live_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Test_CentralBankCode".ToUpper()) RTGS_Outwards_Test_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper())       RTGS_Outwards_Temp_Directory       = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Max_Batch_Size".ToUpper())       RTGS_Outwards_Max_Batch_Size       = Convert.ToInt64(param_Row["Parameter_Value"].ToString().Trim());
                    }

                    CentralBankCode = (RTGS_Outwards_Live_Instance) ? RTGS_Outwards_Live_CentralBankCode : RTGS_Outwards_Test_CentralBankCode;
                    if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) RTGS_Outwards_Temp_Directory = RTGS_Outwards_Temp_Directory + System.IO.Path.DirectorySeparatorChar.ToString();

                    SQLStr = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                       STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                    }

                    // Check if There was any processing Today and Insert a new Record if there was not
                    SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "IF NOT EXISTS(SELECT * FROM [tbl_RTGS_Outward_Days] Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))) INSERT INTO [tbl_RTGS_Outward_Days]([Outwards_Date_D],[Outwards_RunNo_N]) SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime , 1 AS RunNo");

                    string Processing_Date = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), String.Format("SELECT CONVERT(VARCHAR(16),CURRENT_TIMESTAMP,25) as Curr_Date")).Rows[0][0].ToString();

                    string OraclStr = "";
                    OraclStr += string.Format(" SELECT DISTINCT trn_ref_no,AC_CCY FROM {0}actb_daily_log LogTbl WHERE", FCUBS_Schema);
                    OraclStr += string.Format("     LogTbl.AUTH_STAT       = 'A' ");
                    OraclStr += string.Format(" AND LogTbl.MODULE          = 'FT'");
                    OraclStr += string.Format(" AND LogTbl.AMOUNT_TAG      = 'AMT_EQUIV'");
                    //OraclStr += string.Format(" AND LogTbl.PRODUCT         = 'FSTP'");
                    OraclStr += string.Format(" AND LogTbl.PRODUCT         = 'FTSU'");
                   // OraclStr += string.Format(" AND LogTbl.AC_CCY          = 'USD'");
                    OraclStr += string.Format(" AND LogTbl.AC_CCY IN ({0})", STP_Currencies);
                    OraclStr += string.Format(" AND LogTbl.EVENT          != 'REVR'");
                    OraclStr += string.Format(" AND LogTbl.DRCR_IND        = 'D'");


                    //" SELECT DISTINCT trn_ref_no FROM zwfcc11.actb_daily_log LogTbl WHERE     LogTbl.AUTH_STAT       = 'A'  AND LogTbl.MODULE          = 'FT' AND LogTbl.AMOUNT_TAG      = 'AMT_EQUIV' AND LogTbl.PRODUCT         = 'FSTP' AND LogTbl.AC_CCY          = 'USD' AND LogTbl.EVENT          != 'REVR' AND LogTbl.DRCR_IND        = 'D'"

                    Utilities.LogToFile("Line Before Oracle DB Open");

                    DataTable DailyOracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);

                    Utilities.LogToFile("Line after Oracle Daily DB Open.");

                    if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                    {
                        Utilities.LogToFile("Looping in Oracle Records");
                        // Load the transactions into Staging Table from Oracle
                        foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                        {
                            Source_Ref = DailyOracleRow["trn_ref_no"].ToString().Trim();
                            Trxn_Curr  = DailyOracleRow["AC_CCY"].ToString();
                            Utilities.LogToFile(string.Format("Looping in Oracle Records. Ref : {0}", Source_Ref));
                            // Check for Duplicates in Local Staging Table
                            string Check_str = string.Format("SELECT COUNT(*) AS Recs FROM tbl_RTGS_Outward_Trxn_Staging WHERE Trxn_Ref_C = '{0}'", Source_Ref);
                            int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString() ,Check_str).Rows[0][0].ToString());  
                            if (DupRecs == 0 )
                            {
                                OraclStr = "";
                                OraclStr += string.Format(" SELECT Contr.*, ACC_BRANCH || ACCOUNT AS ACCOUNTNO FROM {0}istb_contractis Contr WHERE ", FCUBS_Schema);
                                OraclStr += string.Format("     Contr.amount_tag      = 'TFR_AMT' ");
                                OraclStr += string.Format(" AND Contr.EVENT_SEQ_NO    = '2'");
                                OraclStr += string.Format(" AND Contr.Contract_Ref_No = '{0}'", Source_Ref);
                                OraclStr += string.Format(" AND Contr.SETTLEMENT_AMT IS NOT NULL");
                                //OraclStr += string.Format(" AND Contr.VALUE_DATE      = TO_DATE('2015-07-28', 'yyyy/mm/dd')");
                                //DataTable OracleTbl = OracleHelper.GetTable(OraclStr);

                                DataTable OracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                Utilities.LogToFile("After Oracle Detail Table Open");
                                if (OracleTbl != null && OracleTbl.Rows.Count > 0)
                                {
                                    // Load the transactions into Staging Table from Oracle
                                    foreach (DataRow dr in OracleTbl.Rows)
                                    {
                                        string Remmitter  = dr["ORDERING_CUSTOMER2"].ToString();
                                        string Trn_Amnt   = dr["SETTLEMENT_AMT"].ToString();
                                        string ValueDt    = string.Format("{0:yyyyMMdd}", dr["VALUE_DATE"]);
                                        string RRF_Val    = dr["PAYMENT_DETAILS1"].ToString();
                                        string Benef_Bank = dr["ACC_WITH_INSTN1"].ToString();
                                        string Benef_Acc  = dr["ULT_BENEFICIARY1"].ToString();
                                        string Benef_Name = dr["ULT_BENEFICIARY5"].ToString();
                                        string Benef_Ref  = dr["ULT_BENEFICIARY4"].ToString();
                                        string DebitAcc_C = dr["ACCOUNTNO"].ToString();
                                        string DebitInfo1 = dr["ordering_customer2"].ToString();
                                        string DebitInfo2 = dr["ordering_customer3"].ToString();
                                        string DebitInfo3 = dr["ordering_customer4"].ToString();
                                        string DebitInfo4 = dr["ordering_customer5"].ToString();

                                        // Now save the record
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("UserID_C", "AUTO");
                                        m_hashtable.Add("Trxn_Ref_C", Source_Ref);
                                        m_hashtable.Add("ORF_Val_C", Source_Ref);
                                        m_hashtable.Add("UserName_C", "AUTO ACQUIRED");
                                        m_hashtable.Add("Benef_Bank_C", Benef_Bank);
                                        //m_hashtable.Add("BSA_C", Benef_BSA);
                                        m_hashtable.Add("Amnt_N"     , Trn_Amnt);
                                        m_hashtable.Add("ValueDate_C", ValueDt);
                                        m_hashtable.Add("DebitName_C", Remmitter);
                                        m_hashtable.Add("DebitRef_C" , Benef_Ref);
                                        m_hashtable.Add("DebitAcc_C" , DebitAcc_C);
                                        m_hashtable.Add("DebitInfo1" , DebitInfo1);
                                        m_hashtable.Add("DebitInfo2" , DebitInfo2);
                                        m_hashtable.Add("DebitInfo3" , DebitInfo3);
                                        m_hashtable.Add("DebitInfo4" , DebitInfo4);
                                        m_hashtable.Add("BenefAcc_C" , Benef_Acc);
                                        m_hashtable.Add("BenefName_C", Benef_Name);
                                        m_hashtable.Add("Fld_50_C"   , Remmitter);
                                        m_hashtable.Add("RTGS_Out_ImportDate_D", string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_ImportTime_C", string.Format("{0:HH:mm:ss}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                        m_hashtable.Add("Approved_YN_B" , "0");
                                        m_hashtable.Add("Posted_YN_B"   , "0");
                                        m_hashtable.Add("Info_Sent_YN_B", "0");
                                        m_hashtable.Add("TrnSource"     , "FSTP");
                                        m_hashtable.Add("Trxn_Curr"     , Trxn_Curr);

                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                        Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS.", DateTime.Now.ToString(), Source_Ref);
                                        //lst_Info.Items.Add(Str_to_display);
                                        //lst_Info.Refresh();
                                    }
                                }
                            }
                        }
                    }
                }
                Utilities.LogToFile("End of Process Transctions in Oracle Table.");
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_Outward_Trxns_From_Oracle_FSTP", Err_Date2));
                return "2";
            }
            finally
            {
                //Application.DoEvents();
            }
        }

        public string Acquire_Outward_Trxns_From_Oracle_IB_FTOT()
        {
            string Source_Ref = "";
            string SQLStr = "";
            string Str_to_display = "";
            int    File_Loop_No = 1;
            Int64  RTGS_Outwards_Max_Batch_Size = 0;
            string textLine = "";
            string MQ_Format_Msg = "";
            string lstContents = "";
            bool   TxtFound = false;
            string benefSQLStr = "";

            DataTable benefTable = new DataTable();
            DataTable SysRec = new DataTable();
            Hashtable m_hashtable = new Hashtable();
            DataTable MQ_Rec;
          
            bool RTGS_Outwards_Live_Instance = false;
            string CentralBankCode = "";
            string STP_Currencies = "";
            string RTGS_Outwards_Live_CentralBankCode = "";
            string RTGS_Outwards_Test_CentralBankCode = "";
            string RTGS_Outwards_Temp_Directory = "";
            string Trxn_Curr = "";
            string FCUBS_Schema = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.FCUBS_Schema;
            if (FCUBS_Schema != "") FCUBS_Schema += ".";
           
            try
            {
                // Check if There was any processing Today and Insert a new Record if there was not
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "IF NOT EXISTS(SELECT * FROM [tbl_RTGS_Outward_Days] Where [Outwards_Date_D] = (SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111))) INSERT INTO [tbl_RTGS_Outward_Days]([Outwards_Date_D],[Outwards_RunNo_N]) SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) AS CurrTime , 1 AS RunNo");

                // Use the Files in the Directory as a Trigger to Create an Outward Message
                // DirectoryInfo Dir             = new DirectoryInfo(ConfigurationManager.AppSettings["RTGS_Outwards_GIS_Directory"]);
                // FileInfo[]    FileList        = Dir.GetFiles("*.*", SearchOption.TopDirectoryOnly);
                //string Processing_Date = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), String.Format("SELECT RTRIM(REPLACE(CONVERT(VARCHAR(17),CURRENT_TIMESTAMP,102),'.','-')) + ' ' +  SUBSTRING(CONVERT(VARCHAR(17),CURRENT_TIMESTAMP,114),1,5) as Curr_Date")).Rows[0][0].ToString();
                string Processing_Date = string.Format("{0:yyyy-MM-dd HH:mm}", DateTime.Now);

                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward;
                if (FCUBS_DataAquisition)
                {
                    SysRec = new DataTable();
                    SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('RTGS_Outwards_Temp_Directory','RTGS_Outwards_Live_Instance','RTGS_Outwards_Live_CentralBankCode','RTGS_Outwards_Test_CentralBankCode','RTGS_Outwards_Max_Batch_Size','STP_Currencies') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_Instance".ToUpper())        RTGS_Outwards_Live_Instance        = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Live_CentralBankCode".ToUpper()) RTGS_Outwards_Live_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Test_CentralBankCode".ToUpper()) RTGS_Outwards_Test_CentralBankCode = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Temp_Directory".ToUpper())       RTGS_Outwards_Temp_Directory       = param_Row["Parameter_Value"].ToString().Trim();
                        if (param_Row["Parameter_ID"].ToString().ToUpper() == "RTGS_Outwards_Max_Batch_Size".ToUpper())       RTGS_Outwards_Max_Batch_Size       = Convert.ToInt64(param_Row["Parameter_Value"].ToString().Trim());
                    }

                    CentralBankCode = (RTGS_Outwards_Live_Instance) ? RTGS_Outwards_Live_CentralBankCode : RTGS_Outwards_Test_CentralBankCode;
                    if (!(RTGS_Outwards_Temp_Directory.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))) RTGS_Outwards_Temp_Directory = RTGS_Outwards_Temp_Directory + System.IO.Path.DirectorySeparatorChar.ToString();

                    SQLStr = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQLStr);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                    }

                    string OraclStr = "";
                    OraclStr += string.Format(" SELECT  ");
                    OraclStr += string.Format("     TRN_REF_NO,AC_ENTRY_SR_NO,AC_NO, A.AC_BRANCH || A.AC_NO AS ACCOUNTNO,AC_CCY,DRCR_IND,TRN_CODE,FCY_AMOUNT,LCY_AMOUNT,TRN_DT,VALUE_DT,AUTH_STAT,PRODUCT,ACC_WITH_INSTN1,ACC_WITH_INSTN2,ACC_WITH_INSTN3,ult_beneficiary1,ult_beneficiary2, ult_beneficiary3, ult_beneficiary4,ult_beneficiary5,ac_branch,substr(AC_NO,8,2)ac_type, SETTLEMENT_AMT,VALUE_DATE,PAYMENT_DETAILS1,ordering_customer1,  ordering_customer2, ordering_customer3, ordering_customer4,ordering_customer5  ");
                    OraclStr += string.Format(" FROM                                   ");
                    OraclStr += string.Format("     {0}ACTB_DAILY_LOG A, {0}ISTB_CONTRACTIS B", FCUBS_Schema);
                    OraclStr += string.Format(" WHERE MODULE       = 'FT'              ");
                    OraclStr += string.Format(" AND A.TRN_REF_NO   = B.CONTRACT_REF_NO ");
                    OraclStr += string.Format(" AND A.AMOUNT_TAG   = 'AMT_EQUIV'       ");
                    OraclStr += string.Format(" AND B.AMOUNT_TAG   = 'AMT_EQUIV'       ");
                    OraclStr += string.Format(" AND A.PRODUCT      = 'FTOT'            ");
                    OraclStr += string.Format(" AND A.DRCR_IND     = 'D'               ");
                    OraclStr += string.Format(" AND A.CUST_GL      = 'A'               ");
                    OraclStr += string.Format(" AND A.EVENT        != 'REVR'           ");
                    OraclStr += string.Format(" AND A.AUTH_STAT    = 'A'               ");
                    OraclStr += string.Format(" AND B.SETTLEMENT_AMT IS NOT NULL       ");
                    OraclStr += string.Format(" AND A.AC_CCY IN ({0})", STP_Currencies);

                    //  SELECT       TRN_REF_NO,AC_ENTRY_SR_NO,AC_NO,AC_CCY,DRCR_IND,TRN_CODE,FCY_AMOUNT,LCY_AMOUNT,TRN_DT,VALUE_DT,AUTH_STAT,PRODUCT,ACC_WITH_INSTN1,ACC_WITH_INSTN2,ACC_WITH_INSTN3,ult_beneficiary1,ult_beneficiary2, ult_beneficiary3, ult_beneficiary4,ult_beneficiary5,ac_branch,ORDERING_CUSTOMER2,substr(AC_NO,8,2)ac_type, SETTLEMENT_AMT,VALUE_DATE,PAYMENT_DETAILS1   FROM      zwfcc11.ACTB_DAILY_LOG A, zwfcc11.ISTB_CONTRACTIS B WHERE MODULE       = 'FT' AND A.TRN_REF_NO   = B.CONTRACT_REF_NO  AND A.AMOUNT_TAG   = 'AMT_EQUIV'  AND B.AMOUNT_TAG   = 'AMT_EQUIV'  AND A.PRODUCT      = 'FTOT' AND A.DRCR_IND     = 'D'  AND A.CUST_GL      = 'A' AND A.AUTH_STAT    = 'A'   AND B.SETTLEMENT_AMT IS NOT NULL
                    //  OraclStr += string.Format(" AND A.VALUE_DT      = TO_DATE('2015-07-28', 'yyyy/mm/dd')");
                    //  DataTable DailyOracleTbl = OracleHelper.GetTable(OraclStr);

                    Utilities.LogToFile("Line Before Oracle DB Open");
                    Utilities.LogToFile(string.Format(" Connection_String: {0} - IB Module", ConfigurationManager.AppSettings["FCUBS_Connection"]));
                    Utilities.LogToFile(string.Format("Connection Parameters : {0} -IB Module", OraclStr));

                    DataTable DailyOracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);

                    Utilities.LogToFile("Line after Oracle Daily DB Open - IB Module");
                    DataTable OracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                    Utilities.LogToFile("After Oracle Detail Table Open - IB Module");
                    if (OracleTbl != null && OracleTbl.Rows.Count > 0)
                    {
                        // Load the transactions into Staging Table from Oracle
                        foreach (DataRow dr in OracleTbl.Rows)
                        {
                            Source_Ref = dr["trn_ref_no"].ToString();
                            Trxn_Curr  = dr["AC_CCY"].ToString();
                            Utilities.LogToFile(string.Format("Looping in Oracle Records. Ref : {0} - IB Module", Source_Ref));
                            // Check for Duplicates in Local Staging Table
                            string Check_str = string.Format("SELECT COUNT(*) AS Recs FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) WHERE Trxn_Ref_C = '{0}'", Source_Ref);
                            int DupRecs = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), Check_str).Rows[0][0].ToString());
                            if (DupRecs == 0)
                            {
                                string Remmitter  = dr["ORDERING_CUSTOMER2"].ToString();
                                //string Trn_Amnt    = dr["LCY_AMOUNT"].ToString();
                                string Trn_Amnt   = dr["FCY_AMOUNT"].ToString();
                                string ValueDt    = string.Format("{0:yyyyMMdd}", dr["VALUE_DATE"]);
                                string RRF_Val    = dr["PAYMENT_DETAILS1"].ToString();
                                string Benef_Bank = "UNK";
                                string DebitAcc_C = dr["ACCOUNTNO"].ToString();
                                string DebitInfo1 = dr["ordering_customer2"].ToString();
                                string DebitInfo2 = dr["ordering_customer3"].ToString();
                                string DebitInfo3 = dr["ordering_customer4"].ToString();
                                string DebitInfo4 = dr["ordering_customer5"].ToString();

                                // Lookup Beneficiary Bank
                                benefSQLStr = string.Format("SELECT Bank_SWIFT_Addr_C FROM tbl_Agent_Banks WITH (NOLOCK) WHERE IB_Agent_ID = '{0}' AND IB_Agent_ID != 'UNK'", dr["ACC_WITH_INSTN2"].ToString());
                                benefTable  = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), benefSQLStr);
                                foreach (DataRow BenefRow in benefTable.Rows)
                                {
                                    Benef_Bank = BenefRow["Bank_SWIFT_Addr_C"].ToString();
                                }

                                string Benef_Acc  = dr["ULT_BENEFICIARY1"].ToString();
                                string Benef_Name = dr["ULT_BENEFICIARY2"].ToString();
                                string Benef_Ref  = dr["PAYMENT_DETAILS1"].ToString().Replace("//", "");

                                // Now save the record
                                m_hashtable = new Hashtable();
                                m_hashtable.Add("UserID_C", "AUTO");
                                m_hashtable.Add("Trxn_Ref_C", Source_Ref);
                                m_hashtable.Add("ORF_Val_C", Source_Ref);
                                m_hashtable.Add("UserName_C", "AUTO ACQUIRED");
                                m_hashtable.Add("Benef_Bank_C", Benef_Bank);
                                if (Benef_Bank == "UNK")
                                {
                                    m_hashtable.Add("RTGS_Out_FileName_C", dr["ACC_WITH_INSTN2"].ToString());
                                }
                                //m_hashtable.Add("BSA_C", Benef_BSA);
                                m_hashtable.Add("Amnt_N", Trn_Amnt);
                                m_hashtable.Add("ValueDate_C", ValueDt);
                                m_hashtable.Add("DebitName_C", Remmitter);
                                m_hashtable.Add("DebitAcc_C", DebitAcc_C);
                                m_hashtable.Add("DebitInfo1", DebitInfo1);
                                m_hashtable.Add("DebitInfo2", DebitInfo2);
                                m_hashtable.Add("DebitInfo3", DebitInfo3);
                                m_hashtable.Add("DebitInfo4", DebitInfo4);
                                m_hashtable.Add("DebitRef_C", Benef_Ref);
                                m_hashtable.Add("BenefAcc_C", Benef_Acc);
                                m_hashtable.Add("BenefName_C", Benef_Name);
                                m_hashtable.Add("Fld_50_C", Remmitter);
                                m_hashtable.Add("RTGS_Out_ImportDate_D", string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                m_hashtable.Add("RTGS_Out_ImportTime_C", string.Format("{0:HH:mm:ss}", DateTime.Now));
                                m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                m_hashtable.Add("Approved_YN_B", "0");
                                m_hashtable.Add("Posted_YN_B", "0");
                                m_hashtable.Add("Info_Sent_YN_B", "0");
                                m_hashtable.Add("TrnSource", "FTOT");
                                m_hashtable.Add("Trxn_Curr", Trxn_Curr);
                                SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);

                                //Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS. (IB) Module", DateTime.Now.ToString(), Source_Ref);
                                //lst_Info.Items.Add(Str_to_display);
                                //lst_Info.Refresh();
                            }
                        }
                    }
                }
               
                Utilities.LogToFile("End of Process Transctions in Oracle Table - IB.");
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                Utilities.LogToFile(Err_String, true);
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display   = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = string.Format("{0:yyyy/MM/dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_Outward_Trxns_From_Oracle_IB_FTOT", Err_Date2));
                return "2";
            }
            finally
            {
               // Application.DoEvents();
            }
        }

        public string Acquire_Outward_Trxns_From_Oracle_ZIPP_InternetBanking()
        {
            string    Source_Ref     = "";
            bool      TxtFound       = false;
            DataTable UserDefTable   = new DataTable();
            DataTable DailyOracleTbl = new DataTable();
            DataTable benefTable     = new DataTable();
            DataTable DupRecs        = new DataTable();
            DataTable MQ_Rec         = new DataTable();
            DataTable RemitterTbl    = new DataTable();
            string    SQL_Str        = "";
            string    OraclStr       = "";
            string    Str_to_display = "";
            string    benefSQLStr    = "";
            string    Remmitter      = "";
            string    RemitterStr    = "";
            string    STP_Currencies = "";
            string    Trxn_Curr      = "";
            DataTable SysRec         = new DataTable();

            Hashtable m_hashtable    = new Hashtable();
            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient EcoSvc     = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.MobileTransactionSoapClient();
            e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail             CustDetail = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();

            try
            {
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward;
                if (FCUBS_DataAquisition)
                {
                    SQL_Str = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                    SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQL_Str);
                    foreach (DataRow param_Row in SysRec.Rows)
                    {
                        STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                    }

                    SQL_Str =  " SELECT * FROM zwfcc11.actb_daily_log LogTbl WHERE ";
                    SQL_Str += " LogTbl.AUTH_STAT      = 'A'         ";
                    SQL_Str += " AND LogTbl.MODULE     = 'RT'        ";
                    SQL_Str += " AND LogTbl.AMOUNT_TAG = 'TXN_AMT'   ";
                    SQL_Str += " AND LogTbl.PRODUCT    = 'ZIPP'      ";
                     //SQL_Str += AND LogTbl.AC_CCY     = 'USD'       ";
                    SQL_Str += string.Format(" AND LogTbl.AC_CCY IN ({0})",STP_Currencies);
                    SQL_Str += " AND LogTbl.EVENT      != 'REVR'     ";
                    SQL_Str += " AND LogTbl.DRCR_IND   = 'D'         ";
                    SQL_Str += " AND LogTbl.TRN_REF_NO LIKE '%ZIPP%' ";

                    DailyOracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], SQL_Str);
                    if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                    {
                        foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                        {
                            Source_Ref = DailyOracleRow["TRN_REF_NO"].ToString();
                            Trxn_Curr  = DailyOracleRow["AC_CCY"].ToString();

                            // Check for Duplicates in Local Staging Table
                            string Check_str = string.Format("SELECT  Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) WHERE (Trxn_Ref_C = '{0}')", Source_Ref);
                            DupRecs = new DataTable();
                            DupRecs = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], Check_str);
                            if ((DupRecs.Rows.Count == 0) || (DupRecs == null))
                            {
                                OraclStr     = string.Format("SELECT CONTRACT_REF_NO, VERSION_NO, MODULE, PRODUCT_CODE, FIELD_VAL_1, FIELD_VAL_2, FIELD_VAL_3, FIELD_VAL_4, FIELD_VAL_5 FROM zwfcc11.CSTM_CONTRACT_USERDEF_FIELDS WHERE CONTRACT_REF_NO = '{0}'", Source_Ref);
                                UserDefTable = new DataTable();
                                UserDefTable = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                if (UserDefTable != null && UserDefTable.Rows.Count > 0)
                                {
                                    foreach (DataRow UserDefRow in UserDefTable.Rows)
                                    {
                                        Remmitter         = "";
                                        string Trn_Amnt   = DailyOracleRow["LCY_AMOUNT"].ToString();
                                        string ValueDt    = string.Format("{0:yyyyMMdd}", Convert.ToDateTime(DailyOracleRow["TRN_DT"].ToString()));
                                        //string RRF_Val  = DailyOracleRow["PAYMENT_DETAILS1"].ToString();
                                        string Benef_Bank = UserDefRow["FIELD_VAL_4"].ToString();
                                         

                                        string Benef_Acc  = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_1"].ToString());
                                        string Benef_Name = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_2"].ToString());
                                        string Benef_Ref  = Utilities.RemoveSpecialCharacters_SWIFT(UserDefRow["FIELD_VAL_5"].ToString());
                                        string DebitAcc_C = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["AC_NO"].ToString());

                                        CustDetail        = new e_Verify_BACK_OFFICE_Service_Interface.eCoCash.customer_Detail();
                                        CustDetail        = EcoSvc.FCUBS_AccountEnquiry(DebitAcc_C, false, "FCUBS");

                                        Remmitter         = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Name);
                                        string DebitInfo1 = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Addr1);
                                        string DebitInfo2 = Utilities.RemoveSpecialCharacters_SWIFT(CustDetail.Cust_Addr2);

                                        if (Remmitter == "")
                                        {
                                            RemitterStr = string.Format("SELECT AC_DESC FROM zwfcc11.sttm_cust_account WHERE cust_ac_no = '{0}' AND BRANCH_CODE = '{1}'", DailyOracleRow["AC_NO"].ToString(), DailyOracleRow["AC_BRANCH"].ToString());
                                            RemitterTbl = new DataTable();
                                            RemitterTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                                            if (RemitterTbl != null && RemitterTbl.Rows.Count > 0)
                                            {
                                                foreach (DataRow RemitterRow in RemitterTbl.Rows)
                                                {
                                                    Remmitter = Utilities.RemoveSpecialCharacters_SWIFT(RemitterRow["AC_DESC"].ToString());
                                                }
                                            }
                                        }

                                        // Now save the record
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("UserID_C"     , "AUTO");
                                        m_hashtable.Add("Trxn_Ref_C"   , Source_Ref);
                                        m_hashtable.Add("ORF_Val_C"    , Source_Ref);
                                        m_hashtable.Add("UserName_C"   , "AUTO ACQUIRED");
                                        m_hashtable.Add("User_Branch_C", DailyOracleRow["AC_BRANCH"].ToString());
                                        m_hashtable.Add("Benef_Bank_C" , Benef_Bank);
                                        m_hashtable.Add("Amnt_N"       , Trn_Amnt);
                                        m_hashtable.Add("ValueDate_C"  , ValueDt);
                                        m_hashtable.Add("DebitName_C"  , Remmitter);
                                        m_hashtable.Add("DebitAcc_C"   , DebitAcc_C);
                                        m_hashtable.Add("DebitInfo1"   , DebitInfo1);
                                        m_hashtable.Add("DebitInfo2"   , DebitInfo2);
                                        //m_hashtable.Add("DebitInfo3" , DebitInfo3);
                                        //m_hashtable.Add("DebitInfo4" , DebitInfo4);
                                        m_hashtable.Add("DebitRef_C"   , Benef_Ref);
                                        m_hashtable.Add("BenefAcc_C"   , Benef_Acc);
                                        m_hashtable.Add("BenefName_C"  , Benef_Name);
                                        m_hashtable.Add("Fld_50_C"     , Remmitter);
                                        m_hashtable.Add("RTGS_Out_ImportDate_D" , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_ImportTime_C" , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                        m_hashtable.Add("Approved_YN_B"         , "0");
                                        m_hashtable.Add("Posted_YN_B"           , "0");
                                        m_hashtable.Add("Info_Sent_YN_B"        , "0");
                                        m_hashtable.Add("TrnSource"             , "ZIPPI");
                                        m_hashtable.Add("RTGS_Out_FileName_C"   , "ZIPPI");
                                        m_hashtable.Add("Trxn_Curr"             , Trxn_Curr);

                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"], "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                        //Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS.", DateTime.Now.ToString(), Source_Ref);
                                    }
                                }
                            }
                        }
                    }
                }
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display   = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], ("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime")).Rows[0][0].ToString();
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_Outward_Trxns_From_Oracle_ZIPP_InternetBanking", Err_Date2));

                return "2";
            }
            finally
            {

            }
            return "Done";
        }

        public string Acquire_RTGS_Outwards_from_History_FSTP()
        {
            string    Source_Ref     = "";
            bool      TxtFound       = false;
            DataTable FileTable      = new DataTable();
            DataTable DailyOracleTbl = new DataTable();
            DataTable benefTable     = new DataTable();
            DataTable DupRecs        = new DataTable();
            DataTable MQ_Rec         = new DataTable();
            Boolean   OKtoInsert     = false;
            string    tmpRef         = "";
            string    FileName_C     = "";
            string    SQL_Str        = "";
            string    OraclStr       = "";
            string    Str_to_display = "";
            string    benefSQLStr    = "";
            Hashtable m_hashtable    = new Hashtable();
            string STP_Currencies = "";
            string Trxn_Curr = "";
            DataTable SysRec = new DataTable();
            
            try
            {
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward_from_History;
                if (FCUBS_DataAquisition)
                {
                    SQL_Str = "SELECT DISTINCT FH.* FROM dbo.tbl_FileHistory FH WITH (NOLOCK) INNER JOIN [tbl_RTGS_Outward_Trxn_Staging_Manual] ManTrxn ON ManTrxn.File_Name_C = FH.File_Name_C  WHERE UPPER(FH.File_Source_C) = UPPER('OutwardRecovery') AND  FH.importStage_C = '1' AND FH.Approved_YN = '1' AND (ManTrxn.Reference_C LIKE '%FSTP%' OR ManTrxn.Reference_C LIKE '%FTSU%')  AND ManTrxn.Synched = 0";
                    FileTable = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                    if (FileTable != null && FileTable.Rows.Count > 0)
                    {

                        SQL_Str = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                        SysRec  = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQL_Str);
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                        }

                        SQL_Str += string.Format(" AND LogTbl.AC_CCY IN ({0})", STP_Currencies);
                        foreach (DataRow File_Row in FileTable.Rows)
                        {
                            FileName_C = File_Row["File_Name_C"].ToString();
                            SQL_Str    = string.Format("exec dbo.ustp_GetMissed_Transactions @File_Name_C = '{0}'", FileName_C);
                            OraclStr   = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str).Rows[0]["FCUBSRef_Set"].ToString();
                            OraclStr   = string.Format("SELECT TRN_REF_NO,AC_ENTRY_SR_NO,AC_NO,AC_CCY,DRCR_IND,TRN_CODE,FCY_AMOUNT,LCY_AMOUNT,TRN_DT,VALUE_DT,PRODUCT,ACC_WITH_INSTN1,ACC_WITH_INSTN2,ACC_WITH_INSTN3,ult_beneficiary1,ult_beneficiary2, ult_beneficiary3, ult_beneficiary4,ult_beneficiary5,ac_branch,ORDERING_CUSTOMER2,substr(AC_NO,8,2)ac_type,USER_ID,AUTH_ID  FROM zwfcc11.ACTB_HISTORY a,zwfcc11.ISTB_CONTRACTIS B WHERE MODULE = 'FT' AND TRN_REF_NO = CONTRACT_REF_NO AND A.AMOUNT_TAG = 'AMT_EQUIV' AND B.AMOUNT_TAG = 'TFR_AMT' AND A.PRODUCT IN ('FTSU', 'FSTP') AND DRCR_IND='D' AND CUST_GL = 'A' AND SETTLEMENT_AMT IS NOT NULL AND TRN_REF_NO IN {0} AND a.AC_CCY IN ({1})", OraclStr, STP_Currencies);

                            DailyOracleTbl      = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                            if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                            {
                                foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                                {
                                    Source_Ref = DailyOracleRow["trn_ref_no"].ToString();
                                    Trxn_Curr  = DailyOracleRow["AC_CCY"].ToString();
                                    OKtoInsert = true;
    
                                    // Check for Duplicates in Local Staging Table
                                    string Check_str = string.Format("SELECT  Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) WHERE (Trxn_Ref_C = REPLACE(REPLACE(REPLACE('{0}','FSTP','RSTP'),'FTOT','RTOT'),'FTSU','RTSU'))", Source_Ref);
                                    DupRecs          = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], Check_str);
                                    if ((DupRecs.Rows.Count == 0 ) || (DupRecs == null))
                                    {
                                        string Remmitter  = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ORDERING_CUSTOMER2"].ToString());
                                        string Trn_Amnt   = (DailyOracleRow["PRODUCT"].ToString().Trim() == "FTSU") ? DailyOracleRow["FCY_AMOUNT"].ToString() : DailyOracleRow["LCY_AMOUNT"].ToString();
                                        string ValueDt    = string.Format("{0:yyyyMMdd}", Convert.ToDateTime(DailyOracleRow["VALUE_DT"].ToString()));
                                        //string RRF_Val  = DailyOracleRow["PAYMENT_DETAILS1"].ToString();
                                        string Benef_Bank = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ACC_WITH_INSTN1"].ToString());
                                        string Benef_Acc  = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ULT_BENEFICIARY1"].ToString());
                                        string Benef_Name = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ULT_BENEFICIARY5"].ToString());
                                        string Benef_Ref  = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ULT_BENEFICIARY4"].ToString());
                                        string DebitAcc_C = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["AC_NO"].ToString());
                                        string DebitInfo1 = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ordering_customer2"].ToString());

                                        //string DebitInfo2 = DailyOracleRow["ordering_customer3"].ToString();
                                        //string DebitInfo3 = DailyOracleRow["ordering_customer4"].ToString();
                                        //string DebitInfo4 = DailyOracleRow["ordering_customer5"].ToString();

                                        // Now save the record
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("UserID_C"     , "AUTO");
                                        m_hashtable.Add("Trxn_Ref_C"   , Source_Ref.Replace("FTOT", "RTOT").Replace("FSTP", "RSTP").Replace("FTSU", "RTSU"));
                                        m_hashtable.Add("ORF_Val_C"    , Source_Ref);
                                        m_hashtable.Add("UserName_C"   , "AUTO ACQUIRED");
                                        m_hashtable.Add("Benef_Bank_C" , Benef_Bank);
                                        //m_hashtable.Add("BSA_C", Benef_BSA);
                                        m_hashtable.Add("Amnt_N"       , Trn_Amnt);
                                        m_hashtable.Add("ValueDate_C"  , ValueDt);
                                        m_hashtable.Add("DebitName_C"  , Remmitter);
                                        m_hashtable.Add("DebitAcc_C"   , DebitAcc_C);
                                        m_hashtable.Add("DebitInfo1"   , DebitInfo1);
                                        //m_hashtable.Add("DebitInfo2" , DebitInfo2);
                                        //m_hashtable.Add("DebitInfo3" , DebitInfo3);
                                        //m_hashtable.Add("DebitInfo4" , DebitInfo4);
                                        m_hashtable.Add("DebitRef_C"   , Benef_Ref);
                                        m_hashtable.Add("BenefAcc_C"   , Benef_Acc);
                                        m_hashtable.Add("BenefName_C"  , Benef_Name);
                                        m_hashtable.Add("Fld_50_C"     , Remmitter);
                                        m_hashtable.Add("RTGS_Out_ImportDate_D" , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_ImportTime_C" , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                        m_hashtable.Add("Approved_YN_B"         , "0");
                                        m_hashtable.Add("Posted_YN_B"           , "0");
                                        m_hashtable.Add("Info_Sent_YN_B"        , "0");
                                        m_hashtable.Add("TrnSource"             , "FSTP");
                                        m_hashtable.Add("Trxn_Curr"             , Trxn_Curr);
                                        m_hashtable.Add("RTGS_Out_FileName_C"   , FileName_C);

                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"], "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                        Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired  from FCUBS.", DateTime.Now.ToString(), Source_Ref);

                                        SQL_Str    = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1 WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                    else
                                    {
                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1, Reason_Invalid_C = 'REPLAYED ALREADY' WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                }
                            }
                        }
                    }
                }
                // LogToFile("End of Process Transctions in Oracle Table.");
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], ("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime")).Rows[0][0].ToString();
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_RTGS_Outwards_from_History_FSTP", Err_Date2));

                return "2";
            }
            finally
            {

            }
            return "Done";
        }


        public string Acquire_RTGS_Outwards_from_History_FTOT()
        {
            string    Source_Ref     = "";
            bool      TxtFound       = false;
            DataTable FileTable      = new DataTable();
            DataTable DailyOracleTbl = new DataTable();
            DataTable benefTable     = new DataTable();
            DataTable DupRecs        = new DataTable();
            DataTable MQ_Rec         = new DataTable();
            Boolean   OKtoInsert     = false;
            string    tmpRef         = "";
            string    FileName_C     = "";
            string    SQL_Str        = "";
            string    benefSQLStr    = "";
            string    OraclStr       = "";
            string    Str_to_display = "";
            Hashtable m_hashtable    = new Hashtable();
            string    STP_Currencies = "";
            string    Trxn_Curr      = "";
            DataTable SysRec         = new DataTable();

            try
            {
                m_databaseClass = new Select_Research.SQLDB(ConfigurationManager.AppSettings["RTGS_Connection"]);
                bool FCUBS_DataAquisition = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Acquire_RTGS_Outward_from_History;
                if (FCUBS_DataAquisition)
                {
                    SQL_Str    = "SELECT DISTINCT FH.* FROM dbo.tbl_FileHistory FH WITH (NOLOCK) INNER JOIN [tbl_RTGS_Outward_Trxn_Staging_Manual] ManTrxn ON ManTrxn.File_Name_C = FH.File_Name_C  WHERE UPPER(FH.File_Source_C) = UPPER('OutwardRecovery') AND  FH.importStage_C = '1' AND FH.Approved_YN = '1' AND ManTrxn.Reference_C LIKE '%FTOT%' AND ManTrxn.Synched = 0";
                    FileTable  = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                    if (FileTable != null && FileTable.Rows.Count > 0)
                    {
                        SQL_Str = string.Format("EXEC dbo.ustp_GetCoreCurencyList");
                        SysRec = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"].ToString(), SQL_Str);
                        foreach (DataRow param_Row in SysRec.Rows)
                        {
                            STP_Currencies = string.Format("'{0}'", param_Row["CoreCurrency"].ToString().Trim().Replace(" ", "").Replace(",", "','"));
                        }
                        foreach (DataRow File_Row in FileTable.Rows)
                        {
                            FileName_C = File_Row["File_Name_C"].ToString();
                            SQL_Str    = string.Format("exec dbo.ustp_GetMissed_Transactions @File_Name_C = '{0}'", FileName_C);
                            OraclStr   = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str).Rows[0]["FCUBSRef_Set"].ToString();
                            OraclStr = string.Format("SELECT TRN_REF_NO,AC_ENTRY_SR_NO,AC_NO,AC_BRANCH || AC_NO AS ACCOUNTNO, AC_CCY,DRCR_IND,TRN_CODE,FCY_AMOUNT,LCY_AMOUNT,TRN_DT,VALUE_DT,PRODUCT,ACC_WITH_INSTN1,ACC_WITH_INSTN2,ACC_WITH_INSTN3,ult_beneficiary1,ult_beneficiary2, ult_beneficiary3, ult_beneficiary4,ult_beneficiary5,ac_branch,substr(AC_NO,8,2)ac_type,USER_ID,AUTH_ID,ordering_customer1,  ordering_customer2, ordering_customer3, ordering_customer4,ordering_customer5  FROM zwfcc11.actb_history a,zwfcc11.ISTB_CONTRACTIS B WHERE MODULE = 'FT' AND TRN_REF_NO = CONTRACT_REF_NO AND A.AMOUNT_TAG = 'AMT_EQUIV' AND B.AMOUNT_TAG = 'TFR_AMT' AND (A.PRODUCT = 'FTOT'  OR A.PRODUCT = 'FTOT') AND DRCR_IND='D' AND CUST_GL = 'A' AND SETTLEMENT_AMT IS NOT NULL AND trn_ref_no IN {0} AND a.AC_CCY IN ({1})", OraclStr, STP_Currencies);
                            DailyOracleTbl = OracleHelper.GetTable(ConfigurationManager.AppSettings["FCUBS_Connection"], OraclStr);
                            if (DailyOracleTbl != null && DailyOracleTbl.Rows.Count > 0)
                            {
                                foreach (DataRow DailyOracleRow in DailyOracleTbl.Rows)
                                {
                                    Source_Ref = DailyOracleRow["trn_ref_no"].ToString();
                                    Trxn_Curr  = DailyOracleRow["AC_CCY"].ToString();
                                    OKtoInsert = true;

                                    // Check for Duplicates in Local Staging Table
            			            string Check_str = string.Format("SELECT  Trxn_Ref_C FROM tbl_RTGS_Outward_Trxn_Staging WITH (NOLOCK) WHERE (Trxn_Ref_C = REPLACE(REPLACE('{0}','FSTP','RSTP'),'FTOT','RTOT'))", Source_Ref);
                                    DupRecs          = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], Check_str);
                                    if ((DupRecs.Rows.Count == 0 ) || (DupRecs == null))
                                    {
                                        string Remmitter  = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ORDERING_CUSTOMER2"].ToString());
                                        string Trn_Amnt   = DailyOracleRow["FCY_AMOUNT"].ToString();
                                        string ValueDt    = string.Format("{0:yyyyMMdd}", Convert.ToDateTime(DailyOracleRow["VALUE_DT"].ToString()));
                                        //string RRF_Val  = DailyOracleRow["PAYMENT_DETAILS1"].ToString();
                                        string Benef_Bank = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ACC_WITH_INSTN1"].ToString());
                                        string Benef_Acc  = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ULT_BENEFICIARY1"].ToString());
                                        //string Benef_Name = DailyOracleRow["ULT_BENEFICIARY5"].ToString();
                                        string Benef_Name = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ULT_BENEFICIARY2"].ToString());
                                        string Benef_Ref  = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ULT_BENEFICIARY4"].ToString());
                                        string DebitAcc_C = DailyOracleRow["AC_NO"].ToString();
                                        string DebitInfo1 = Utilities.RemoveSpecialCharacters_SWIFT(DailyOracleRow["ordering_customer2"].ToString());
                                        //string DebitInfo2 = DailyOracleRow["ordering_customer3"].ToString();
                                        //string DebitInfo3 = DailyOracleRow["ordering_customer4"].ToString();
                                        //string DebitInfo4 = DailyOracleRow["ordering_customer5"].ToString();
                                        // Now save the record
                                        m_hashtable = new Hashtable();
                                        m_hashtable.Add("UserID_C"  , "AUTO");
                                        m_hashtable.Add("Trxn_Ref_C", Source_Ref);
                                        m_hashtable.Add("ORF_Val_C" , Source_Ref);
                                        m_hashtable.Add("UserName_C", "AUTO ACQUIRED");
                                        // Lookup Beneficiary Bank
                                        //benefTable = new DataTable();
                                        //benefSQLStr = string.Format("SELECT Bank_SWIFT_Addr_C FROM tbl_Agent_Banks WITH (NOLOCK) WHERE IB_Agent_ID = '{0}' AND IB_Agent_ID != 'UNK'", DailyOracleRow["ACC_WITH_INSTN2"].ToString());
                                        //benefTable = SqlHelper.GetTable(ConfigurationManager.ConnectionStrings["FileChangeNotifier.Properties.Settings.SQL_Conn"].ToString(), benefSQLStr);
                                        //foreach (DataRow BenefRow in benefTable.Rows)
                                        //{
                                        //    Benef_Bank = BenefRow["Bank_SWIFT_Addr_C"].ToString();
                                        //}
                                        m_hashtable.Add("Benef_Bank_C", Benef_Bank);
                                        //m_hashtable.Add("BSA_C", Benef_BSA);
                                        m_hashtable.Add("Amnt_N"     , Trn_Amnt);
                                        m_hashtable.Add("ValueDate_C", ValueDt);
                                        m_hashtable.Add("DebitName_C", Remmitter);
                                        m_hashtable.Add("DebitAcc_C" , DebitAcc_C);
                                        m_hashtable.Add("DebitInfo1" , DebitInfo1);
                                        //m_hashtable.Add("DebitInfo2" , DebitInfo2);
                                        //m_hashtable.Add("DebitInfo3" , DebitInfo3);
                                        //m_hashtable.Add("DebitInfo4" , DebitInfo4);
                                        m_hashtable.Add("DebitRef_C" , Benef_Ref);
                                        m_hashtable.Add("BenefAcc_C" , Benef_Acc);
                                        m_hashtable.Add("BenefName_C", Benef_Name);
                                        m_hashtable.Add("Fld_50_C"   , Remmitter);
                                        m_hashtable.Add("RTGS_Out_ImportDate_D" , string.Format("{0:yyyy-MM-dd}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_ImportTime_C" , string.Format("{0:HH:mm:ss}", DateTime.Now));
                                        m_hashtable.Add("RTGS_Out_Imported_YN_B", "1");
                                        m_hashtable.Add("Approved_YN_B"         , "0");
                                        m_hashtable.Add("Posted_YN_B"           , "0");
                                        m_hashtable.Add("Info_Sent_YN_B"        , "0");
                                        m_hashtable.Add("TrnSource"             , "FTOT");
                                        m_hashtable.Add("RTGS_Out_FileName_C"   , FileName_C);
                                        m_hashtable.Add("Trxn_Curr"             , Trxn_Curr);

                                        SqlHelper.insertSQL(ConfigurationManager.AppSettings["RTGS_Connection"], "tbl_RTGS_Outward_Trxn_Staging", m_hashtable);
                                        Str_to_display = string.Format("{0:yyyy-MM-dd HH:mm:ss} - Reference : {1} has been acquired from FCUBS.", DateTime.Now.ToString(), Source_Ref);

                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1 WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                    else
                                    {
                                        SQL_Str = string.Format("UPDATE [tbl_RTGS_Outward_Trxn_Staging_Manual] SET Synched = 1, Reason_Invalid_C = 'REPLAYED ALREADY' WHERE Reference_C = '{0}'", Source_Ref);
                                        SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], SQL_Str);
                                    }
                                }
                            }
                        }
                    }
                }
               // LogToFile("End of Process Transctions in Oracle Table.");
                return "3";
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("{0} : {1}", ex.ToString(), ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                Str_to_display = string.Format("An error occurred on : {0}, {1}", DateTime.Now.ToString(), Err_String);
                string Err_Date2 = SqlHelper.GetTable(ConfigurationManager.AppSettings["RTGS_Connection"], ("SELECT CONVERT(VARCHAR(10),CURRENT_TIMESTAMP,111) + ' ' + CONVERT(VARCHAR(08),CURRENT_TIMESTAMP,114) AS PostTime")).Rows[0][0].ToString();
                SqlHelper.RunSql(ConfigurationManager.AppSettings["RTGS_Connection"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "Acquire_RTGS_Outwards_from_History_FTOT", Err_Date2));

                return "2";
            }
            finally
            {
               
            }
            return "Done";
        }

        public string Import_IBanking_RegFile_Move_to_UserAccount()
        {
            string TXREFNO = "";
            try
            {
                bool            IBANKING_REG_IMPORT_ENABLED = false;
                string          SQLStr         = "";
                cls_UserAccount tmp_Fin_Trn    = new cls_UserAccount();
                DataTable       Sys_Tbl        = new DataTable();
                int             File_Found     = 0;
                string          SaveResponse   = "";
                string          TrnInst        = "";
                string          Base_Currency  = "";
                string          DEFAULT_BRANCH = "";
                string          tmpBranchCode  = "";

                SQLStr  = string.Format("SELECT Parameter_Value, Parameter_ID, (SELECT TOP 1 Curr_Short_Name FROM tbl_Currencies WITH (NOLOCK) WHERE Base_Currency_YN_B  = 1) Base_Currency FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('IBANKING_REG_IMPORT_ENABLED','DEFAULT_BRANCH') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                foreach (DataRow param_Row in Sys_Tbl.Rows)
                {
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "IBANKING_REG_IMPORT_ENABLED".ToUpper()) IBANKING_REG_IMPORT_ENABLED = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "DEFAULT_BRANCH".ToUpper())              DEFAULT_BRANCH              = param_Row["Parameter_Value"].ToString().ToUpper();
                    Base_Currency = param_Row["Base_Currency"].ToString();
                }

                if (!IBANKING_REG_IMPORT_ENABLED)
                {
                    return "Import_IBanking_RegFile not Enabled";
                }
                else
                {
                    SQLStr  = string.Format("SELECT * FROM [tbl_IBanking_Reg_Staging] WITH (NOLOCK) WHERE [Posted_YN] = 0 ORDER BY 1 ASC");
                    Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                    foreach (DataRow param_Row in Sys_Tbl.Rows)
                    {

                         TrnInst     = param_Row["InstNo"].ToString().Trim();
                         tmp_Fin_Trn = new cls_UserAccount();
                         tmp_Fin_Trn.Initialise_Details();

                         tmp_Fin_Trn.TelephoneNo        = param_Row["MOBILE_NUMBER"].ToString().Trim();
                         tmp_Fin_Trn.AccountNo          = param_Row["ACCOUNT_NO"].ToString().Trim();
                         tmp_Fin_Trn.Acc_Name_C         = param_Row["FULL_NAME"].ToString().Trim();
                         tmp_Fin_Trn.KYC_IDNumber_C     = param_Row["IDNUMBER"].ToString().Trim();

                         tmpBranchCode                  = param_Row["BRANCHCODE"].ToString().Trim();
                         if ((string.IsNullOrEmpty(tmpBranchCode) || (tmpBranchCode.ToUpper() == "NULL")))
                         {
                             tmp_Fin_Trn.userBranch = DEFAULT_BRANCH;
                         }
                         else
                         {
                             tmp_Fin_Trn.userBranch = param_Row["BRANCHCODE"].ToString().Trim();
                         }
                         tmp_Fin_Trn.KYC_Mobile_Number  = param_Row["MOBILE_NUMBER"].ToString().Trim();
                         tmp_Fin_Trn.KYC_Acc_Name       = param_Row["FULL_NAME"].ToString().Trim();

                         tmp_Fin_Trn.Currency           = Base_Currency;
                         tmp_Fin_Trn.Last_Modified_D    = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);;
                         tmp_Fin_Trn.Last_ModifiedBy_C  = "USSD";
                         tmp_Fin_Trn.Last_Modified_D    = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                         tmp_Fin_Trn.Source_System_C    = "EBBS";
                         tmp_Fin_Trn.Approval_Date      = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                         tmp_Fin_Trn.Limit_N            = "100000";
                         tmp_Fin_Trn.Product_C          = "ECOCASH";
                         tmp_Fin_Trn.ServiceProvider_C  = "ECONET";
                         tmp_Fin_Trn.chargeType_C       = "B2W_ECOCASH";
                         tmp_Fin_Trn.Approved_YN        = "1";
                         tmp_Fin_Trn.Approved_By        = "USSD";
                         tmp_Fin_Trn.Active_YN          = "1";
                         tmp_Fin_Trn.Fin_Retry_No       = "0";
                         tmp_Fin_Trn.Declined_YN        = "0";
                         tmp_Fin_Trn.KYC_IDType_IP      = "I";
                         tmp_Fin_Trn.KYC_IDType_LF      = "L";
                         tmp_Fin_Trn.AccType_IM         = "I";
                         tmp_Fin_Trn.Deleted_YN_B       = "0";
                         tmp_Fin_Trn.Extracted_YN_B     = "0";
                         tmp_Fin_Trn.Charged            = "1";

                         SaveResponse = "";
                         File_Found   = 0;
                         SQLStr       = string.Format("SELECT COUNT(*) as UserRecs FROM dbo.UserAccount WITH (NOLOCK) WHERE TelephoneNo = '{0}' AND AccountNo = '{1}' ", param_Row["MOBILE_NUMBER"].ToString().Trim(), param_Row["ACCOUNT_NO"].ToString().Trim());
                         File_Found   = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr).Rows[0][0].ToString());
                         if (File_Found == 0)
                         {
                             SaveResponse = save_IBankingReg_to_UserAccount_Trxn(tmp_Fin_Trn, param_Row["Batch_ID_C"].ToString().Trim(), "UserAccount");
                             SQLStr       = string.Format(" Update tbl_IBanking_Reg_Staging SET Posted_YN = 1, Intrface_Comment = 'DUPLICATE ENTRY' Where  InstNo = '{0}'", TrnInst);
                         }
                         else
                         {
                             SQLStr       = string.Format(" Update tbl_IBanking_Reg_Staging SET Posted_YN = 1, Intrface_Comment = '{1}' Where  InstNo = '{0}'", TrnInst,  (SaveResponse == "SUCCESS")? "SUCCESS" : "FAILED - Check Errors");   
                         }
                         SqlHelper.RunSql(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], SQLStr);
                    }
                    return "Nothing";
                }
            }
            catch (SqlException ex)
            {
                SqlHelper.LogError_No_Pop_Up_Msg(ex.ToString(), "Import_IBanking_Reg_File : " + TXREFNO + " Import_IBanking_Reg_File");
            }
            finally
            {
                try
                {
                    //conn.Close(); 
                }
                catch { }
            }
            return "Nothing";
        }

        public string Import_IBanking_RegFile()
        {
            string TXREFNO = "";
            try
            {
                bool   IBANKING_REG_IMPORT_ENABLED = false;
                string IBANKING_INPUT_FOLDER       = "";
                string IBANKING_BACKUP_FOLDER      = "";
                string SQLStr                      = "";
                IExcelDataReader excelReader       = null;

                DataTable Sys_Tbl = new DataTable();
                SQLStr = string.Format("SELECT Parameter_Value, Parameter_ID FROM tbl_System_Parameters WITH (NOLOCK) WHERE Parameter_ID IN ('IBANKING_REG_IMPORT_ENABLED','IBANKING_INPUT_FOLDER','IBANKING_BACKUP_FOLDER') AND Bank_ID = '{0}'", e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.Institution_ID);
                Sys_Tbl = SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);
                foreach (DataRow param_Row in Sys_Tbl.Rows)
                {
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "IBANKING_REG_IMPORT_ENABLED".ToUpper()) IBANKING_REG_IMPORT_ENABLED = ((param_Row["Parameter_Value"].ToString().ToUpper().Contains("TRUE")) || (param_Row["Parameter_Value"].ToString().ToUpper().Contains("YES")) || (param_Row["Parameter_Value"].ToString().ToUpper() == "1")) ? true : false;
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "IBANKING_INPUT_FOLDER".ToUpper())       IBANKING_INPUT_FOLDER       = param_Row["Parameter_Value"].ToString();
                    if (param_Row["Parameter_ID"].ToString().ToUpper() == "IBANKING_BACKUP_FOLDER".ToUpper())      IBANKING_BACKUP_FOLDER      = param_Row["Parameter_Value"].ToString();
                }

                if (!IBANKING_REG_IMPORT_ENABLED)
                {
                    return "Import_IBanking_RegFile not Enabled";
                }
                else
                {
                    ImportResponse_cls localImportResponse = new ImportResponse_cls();
                    string Curr_File   = null;
                    string Curr_File_1 = null;
                    string Curr_File_2 = null;
                    System.Data.DataTable Curr_Rec = new System.Data.DataTable();
                    System.Data.DataTable ChkRec   = new System.Data.DataTable();
                    string RTGS_Ref         = "";
                    string sErrorString     = "";
                    string Bck_Up_File      = "";
                    string Bck_Up_File_Name = "";
                    double DLL_Status       = 0;
                    string TrnDate          = " ";
                    string TrnDate2         = " ";
                    string Response_File           = "";
                    string Finacle_Resp_File       = "";
                    string Finacle_Resp_File_1     = "";
                    string Finacle_Remote_File     = "";
                    string Finacle_Remote_File_Bkp = "";
                    string daily_CusNum            = "";
                    int    PosSep       = 0;
                    int    PosSep2      = 0;
                    int    PosSep3      = 0;
                    string CurrencyCode = "";
                    string Batch_ID_C   = "";
                    string Batch_Time   = "";
                    int RowNumber = 6;

                    System.Data.DataTable syncTbl = new System.Data.DataTable();
                    string Trn_Codes = "";

                    string In_Path = IBANKING_INPUT_FOLDER;
                    if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                    {
                        In_Path += System.IO.Path.DirectorySeparatorChar;
                    }
                    string Back_Path = IBANKING_BACKUP_FOLDER;
                    if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
                    {
                        Back_Path += System.IO.Path.DirectorySeparatorChar;
                    }
                    string[] FileList = Directory.GetFiles(In_Path, "*WIP*.xls*");
                    string   FileName = null;

                    int File_Number = 0;
                    foreach (string FileName_loopVariable in FileList)
                    {
                        FileName         = FileName_loopVariable;
                        PosSep           = FileName.LastIndexOf("\\");

                        Curr_File        = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
                        Curr_File_1      = In_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

                        Bck_Up_File_Name = Back_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

                        // Check if file has been imported
                        int File_Found = 0;
                        //int File_Found = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("SELECT COUNT(*) AS tblRecs FROM [tbl_FileHistory] WITH (NOLOCK) WHERE File_Source_C = 'WSTUN' AND [File_Name_C] = '{0}'", Curr_File)).Rows[0][0].ToString());
                        if (File_Found == 0)
                        {
                            //log the file
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("INSERT INTO [tbl_FileHistory](File_Date_D,File_Name_C,File_Import_Date_D,Exported_B,STR_Exported_B,File_Source_C,importStage_C) SELECT '{0:yyyy-MM-dd}','{1}' ,'{2}','0','0', 'IBREG'      , '0'", DateTime.Now, Curr_File, Batch_Time));

                            Batch_ID_C  = string.Format("{0:yyyyMMddHHmmssfff}"  , DateTime.Now);
                            Batch_Time  = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);

                            cls_IBankingTrxn tmp_Fin_Trn = new cls_IBankingTrxn();
                            tmp_Fin_Trn.Initialise_Details();
                            if (Curr_File_1.ToUpper().EndsWith("XLSX"))
                            {
                                Curr_Rec = ReadAsDataTable(Curr_File_1, 7);
                            }
                            else
                            {
                                FileStream stream = File.Open(Curr_File_1, FileMode.Open, FileAccess.Read);
                                excelReader = ExcelReaderFactory.CreateBinaryReader(stream);
                                var conf = new  ExcelDataSetConfiguration
                                {
                                    ConfigureDataTable = _ => new ExcelDataTableConfiguration
                                    {
                                        UseHeaderRow = false
                                    }
                                };
                                var excelDataSet = excelReader.AsDataSet(conf);
                                Curr_Rec = excelDataSet.Tables[0];

                                excelDataSet.Dispose();
                                excelReader.Close();

                            }
                            foreach (DataRow Row in Curr_Rec.Rows)
                            {
                                if (RowNumber > 6)
                                {
                                   tmp_Fin_Trn = new cls_IBankingTrxn();
                                   tmp_Fin_Trn.Initialise_Details();
                                   tmp_Fin_Trn.Batch_ID_C = Batch_ID_C;

                                   tmp_Fin_Trn.TXREFNO         = Row[1].ToString();
                                   tmp_Fin_Trn.SCANTIME        = Row[2].ToString();;
                                   tmp_Fin_Trn.CREATIONDATE    = Row[3].ToString();;
                                   tmp_Fin_Trn.COUNTRYCODE     = Row[4].ToString();
                                   tmp_Fin_Trn.STATIONID       = Row[5].ToString();
                                   tmp_Fin_Trn.BARCODE         = Row[6].ToString();
                                   tmp_Fin_Trn.ORGTXREFNO      = Row[8].ToString();
                                   tmp_Fin_Trn.BATCHNAME       = Row[8].ToString();
                                   tmp_Fin_Trn.CURRENTSTEPNAME = Row[9].ToString();
                                   tmp_Fin_Trn.CURRENTQUEUE    = Row[10].ToString();
                                   tmp_Fin_Trn.STATUS          = Row[11].ToString();
                                   tmp_Fin_Trn.BRANCHCODE      = Row[12].ToString();
                                   tmp_Fin_Trn.LASTSTEPNAME    = Row[13].ToString();
                                   tmp_Fin_Trn.MODIFIEDUSERID  = Row[14].ToString();
                                   tmp_Fin_Trn.ACCOUNT_NO      = Row[15].ToString();
                                   tmp_Fin_Trn.FULL_NAME       = Row[16].ToString();
                                   tmp_Fin_Trn.IDNUMBER        = Row[17].ToString();
                                   tmp_Fin_Trn.MOBILE_NUMBER   = Row[18].ToString();
                                   tmp_Fin_Trn.TYPE_OF_REQUEST = Row[19].ToString();
                                   tmp_Fin_Trn.RELATIONSHIP_NO = Row[20].ToString();
                                   tmp_Fin_Trn.CASE_STATUS     = Row[21].ToString();
                                   tmp_Fin_Trn.COMMENTS        = Row[22].ToString();

                                   if ((!(string.IsNullOrEmpty(tmp_Fin_Trn.TXREFNO))) &&  (tmp_Fin_Trn.TXREFNO != "TXREFNO"))
                                   {
                                       File_Found = 0;
                                       File_Found = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], string.Format("SELECT COUNT(*) AS tblRecs FROM [tbl_IBanking_Reg_Staging] WITH (NOLOCK) WHERE TXREFNO = '{0}'", TXREFNO)).Rows[0][0].ToString());
                                       if (File_Found == 0)
                                       {
                                           string SaveResponse = save_IBankingReg_Trxn(tmp_Fin_Trn, Curr_File_1, "tbl_IBanking_Reg_Staging");
                                       }
                                   }
                                }
                                RowNumber++;
                            }

                            SQLStr = string.Format("UPDATE [tbl_FileHistory] SET importStage_C = 1  WHERE  File_Name_C = '{0}' AND CONVERT(VARCHAR(19), File_Import_Date_D, 25) = '{1}'", Curr_File, Batch_Time);
                            SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], SQLStr);

                            System.IO.File.Copy(FileName, Bck_Up_File_Name, overwrite: true);
                            System.IO.File.Delete(FileName);
                        }
                    }
                    return "Nothing";
                }
            }
            catch (Exception ex)
            {
                SR_Class.Log_to_Error("19777895", ex, "Import_IBanking_Reg_File", ex.ToString());
            } 
            finally
            {
                try
                { 
                    //conn.Close(); 
                }
                catch
                {
                
                }
            }
            return "Nothing";
        }

        public static DataTable ReadAsDataTable(string fileName, int startRow)
        {
            int columnNum = 0;
            string columnName = "";
            string tmpValue = "";
            DataTable dataTable = new DataTable();
            try
            {
                using (SpreadsheetDocument spreadSheetDocument = SpreadsheetDocument.Open(fileName, false))
                {
                    WorkbookPart workbookPart = spreadSheetDocument.WorkbookPart;
                    IEnumerable<Sheet> sheets = spreadSheetDocument.WorkbookPart.Workbook.GetFirstChild<Sheets>().Elements<Sheet>();
                    string relationshipId = sheets.First().Id.Value;
                    WorksheetPart worksheetPart = (WorksheetPart)spreadSheetDocument.WorkbookPart.GetPartById(relationshipId);
                    Worksheet workSheet = worksheetPart.Worksheet;
                    SheetData sheetData = workSheet.GetFirstChild<SheetData>();
                    IEnumerable<Row> rows = sheetData.Descendants<Row>();

                    foreach (Cell cell in rows.ElementAt(0))
                    {
                        // if (columnNum < 25)
                        {
                            columnName = string.Format("ColNme{0}", columnNum);
                            dataTable.Columns.Add(columnName);
                            //dataTable.Columns.Add(GetCellValue(spreadSheetDocument, cell));
                            columnNum++;
                        }
                    }

                    foreach (Row row in rows)
                    {
                        DataRow dataRow = dataTable.NewRow();
                        for (int i = 0; i < row.Descendants<Cell>().Count(); i++)
                        {
                            dataRow[i] = GetCellValue(spreadSheetDocument, row.Descendants<Cell>().ElementAt(i));
                        }

                        dataTable.Rows.Add(dataRow);
                    }

                }
                //for (int i = 0 ; i < 9 ; i++)
                //{
                //     dataTable.Rows.RemoveAt(i);
                //}
            }
            catch (Exception ex)
            {
                SR_Class.Log_to_Error("19777115", ex, "ReadAsDataTable", ex.ToString());
            }
            finally
            { }
            return dataTable;
        }

        private static string GetCellValue(SpreadsheetDocument document, Cell cell)
        {
            try
            {
                SharedStringTablePart stringTablePart = document.WorkbookPart.SharedStringTablePart;
                string value = cell.CellValue.InnerXml;

                if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
                {
                    return stringTablePart.SharedStringTable.ChildElements[Int32.Parse(value)].InnerText;
                }
                else
                {
                    return value;
                }
            }
            catch
            {
                return "";
            }
        }

        //public string Import_WesternUnion_csv_Files()
        //{
        //    if (!e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WesternUnion_Import_Enabled)
        //    {
        //        return "WesternUnion_Import_Enabled not Enabled";
        //    }
        //    else
        //    {
        //        ImportResponse_cls localImportResponse = new ImportResponse_cls();
        //        string Curr_File   = null;
        //        string Curr_File_1 = null;
        //        string Curr_File_2 = null;
        //        System.Data.DataTable Curr_Rec = new System.Data.DataTable();
        //        System.Data.DataTable ChkRec = new System.Data.DataTable();
        //        string RTGS_Ref     = "";
        //        string sErrorString = "";
        //        string Bck_Up_File  = "";
        //        string Bck_Up_File_Name = "";
        //        double DLL_Status = 0;
        //        string TrnDate = " ";
        //        string TrnDate2 = " ";
        //        string Response_File = "";
        //        string Finacle_Resp_File = "";
        //        string Finacle_Resp_File_1 = "";
        //        string Finacle_Remote_File = "";
        //        string Finacle_Remote_File_Bkp = "";
        //        string daily_CusNum = "";
        //        int PosSep = 0;
        //        int PosSep2 = 0;
        //        int PosSep3 = 0;
        //        string CurrencyCode = "";
        //        string Batch_ID_C = "";

        //        System.Data.DataTable syncTbl = new System.Data.DataTable();
        //        string Trn_Codes = "";

        //        string In_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WesternUnion_Input_Folder;
        //        if (!In_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //        {
        //            In_Path += System.IO.Path.DirectorySeparatorChar;
        //        }
        //        string Back_Path = e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.WesternUnion_Backup_Folder;
        //        if (!Back_Path.EndsWith(System.IO.Path.DirectorySeparatorChar.ToString()))
        //        {
        //            Back_Path += System.IO.Path.DirectorySeparatorChar;
        //        }
        //        string[] FileList = Directory.GetFiles(In_Path, "*.csv");
        //        string FileName = null;

        //        int File_Number = 0;
        //        foreach (string FileName_loopVariable in FileList)
        //        {
        //            FileName    = FileName_loopVariable;
        //            PosSep      = FileName.LastIndexOf("\\");

        //            Curr_File   = FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));
        //            Curr_File_1 = In_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //            Bck_Up_File_Name = Back_Path + FileName.Substring((PosSep + 1), FileName.Length - (PosSep + 1));

        //            // Check if file has been imported
        //            int File_Found = int.Parse(SqlHelper.GetTable(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("SELECT COUNT(*) AS tblRecs FROM [tbl_FileHistory] WITH (NOLOCK) WHERE File_Source_C = 'WSTUN' AND [File_Name_C] = '{0}'", Curr_File)).Rows[0][0].ToString());
        //            if (File_Found == 0)
        //            {
        //                Batch_ID_C = string.Format("{0:yyyyMMddHHmmssfff}", DateTime.Now);
        //                //log the file

        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"],string.Format("INSERT INTO [tbl_FileHistory](File_Date_D,File_Name_C,File_Import_Date_D,Exported_B,STR_Exported_B,File_Source_C,importStage_C) SELECT '{0:yyyy-MM-dd}','{1}' ,'{0:yyyy-MM-dd HH:mm:ss}','0','0', 'WSTUN'      , '0'", DateTime.Now, Curr_File));

        //                // Put a condition to check if a file is a .xml file
        //                string Curr_value = "";

        //                cls_MoneyGramTrxn tmp_Fin_Trn = new cls_MoneyGramTrxn();
        //                tmp_Fin_Trn.Initialise_Details();

        //                Microsoft.Office.Interop.Excel.Application xlApp       = new Microsoft.Office.Interop.Excel.Application();
        //                Microsoft.Office.Interop.Excel.Workbook    xlWorkbook  = xlApp.Workbooks.Open(Curr_File_1);
        //                Microsoft.Office.Interop.Excel._Worksheet  xlWorksheet = xlWorkbook.Sheets["TRANSACTIONS_LOG"];
        //                Microsoft.Office.Interop.Excel.Range       xlRange     = xlWorksheet.get_Range("A1", "AK10000");
        //                object[,] values = (object[,])xlRange.Value2;

        //                //long TrnDateVal = long.Parse(xlRange.Cells[5, 2].Value2.ToString());
        //                //TrnDate         = string.Format("{0:yyyy-MM-dd}", DateTime.FromOADate(TrnDateVal));
        //                int    rowCount     = xlRange.Rows.Count;
        //                int    colCount     = 37;
        //                string CreationDate = "";
        //                Int64  emptyRows    = 0;

        //                rowCount = 1;
        //                while (rowCount < values.GetLength(0))
        //                {
        //                    tmp_Fin_Trn            = new cls_MoneyGramTrxn();
        //                    tmp_Fin_Trn.Initialise_Details();
        //                    tmp_Fin_Trn.Batch_ID_C = Batch_ID_C;

        //                    bool NonNullFiledFound = false;
        //                    daily_CusNum           = string.Format("0000{0}", rowCount);
        //                    daily_CusNum           = string.Format("{0:yyyyMMdd}{1}", DateTime.Now, daily_CusNum.Substring(daily_CusNum.Length - 4, 4));

        //                    for (int j = 1; j <= colCount; j++)
        //                    {
        //                        Curr_value = Convert.ToString(values[rowCount, j]);
        //                        if (string.IsNullOrEmpty(Curr_value))
        //                        {
        //                            Curr_value = "";
        //                        }
        //                        else
        //                        {
        //                            NonNullFiledFound = true;
        //                        }

        //                        if (j == 01) tmp_Fin_Trn.Originating_Country_Code  = Curr_value;
        //                        if (j == 02) tmp_Fin_Trn.Originating_Currency_Code = Curr_value;
        //                        if (j == 03) tmp_Fin_Trn.Terminal_ID               = Curr_value;
        //                        if (j == 04) tmp_Fin_Trn.Op_ID                     = Curr_value;
        //                        if (j == 05) tmp_Fin_Trn.Superv_Op_ID              = Curr_value;
        //                        if (j == 06) tmp_Fin_Trn.Username                  = Curr_value;
        //                        if (j == 07) tmp_Fin_Trn.MTCN                      = Curr_value;
        //                        if (j == 08) tmp_Fin_Trn.Receiver_Name             = Curr_value;
        //                        if (j == 09) tmp_Fin_Trn.Sender                    = Curr_value;
        //                        if (j == 10) tmp_Fin_Trn.Destination_Country_Code  = Curr_value;
        //                        if (j == 11) tmp_Fin_Trn.Destination_Currency_Code = Curr_value;
        //                        if (j == 12) tmp_Fin_Trn.Trn_Type                  = Curr_value;

        //                        if (j == 13)
        //                        {
        //                            CreationDate                                   = fn_ManageDateStr(Curr_value, tmp_Fin_Trn.MTCN, j.ToString());
        //                            tmp_Fin_Trn.Creation_Date                      = CreationDate;
        //                        }
        //                        if (j == 14) tmp_Fin_Trn.Principal_Amount          = Curr_value;
        //                        if (j == 15) tmp_Fin_Trn.Charge                    = Curr_value;
        //                        if (j == 16) tmp_Fin_Trn.Delivery_Charge           = Curr_value;
        //                        if (j == 17) tmp_Fin_Trn.Message_Charge            = Curr_value;
        //                        if (j == 18) tmp_Fin_Trn.Promotion_Discount        = Curr_value;
        //                        if (j == 19) tmp_Fin_Trn.Collect_Amount            = Curr_value;
        //                        if (j == 20) tmp_Fin_Trn.Exchange_Rate             = Curr_value;
        //                        if (j == 21) tmp_Fin_Trn.Expected_Payout_Amount    = Curr_value;
        //                        if (j == 22) tmp_Fin_Trn.Total_Charges             = Curr_value;
        //                        if (j == 23) tmp_Fin_Trn.Total_Taxes               = Curr_value;
        //                        if (j == 24) tmp_Fin_Trn.Payment_Type              = Curr_value;
        //                        if (j == 26) tmp_Fin_Trn.Destination               = Curr_value;
        //                        if (j == 27) tmp_Fin_Trn.Receiver_Address          = Curr_value;
        //                        if (j == 28) tmp_Fin_Trn.Receiver_Primary_ID_Type  = Curr_value;
        //                        if (j == 29) tmp_Fin_Trn.Receiver_Primary_ID       = Curr_value;
        //                        if (j == 30) tmp_Fin_Trn.Receiver_Telephone_number = Curr_value;
        //                        if (j == 31) tmp_Fin_Trn.Sending_currency          = Curr_value;
        //                        if (j == 32) tmp_Fin_Trn.Sender_Principal_Amount   = Curr_value;
        //                        if (j == 33) tmp_Fin_Trn.Sender_Country            = Curr_value;
        //                        if (j == 34) tmp_Fin_Trn.Sender_Primary_ID_Type    = Curr_value;
        //                        if (j == 35) tmp_Fin_Trn.Sender_Primary_ID         = Curr_value;
        //                        if (j == 36) tmp_Fin_Trn.Sender_Address            = Curr_value;
        //                        if (j == 37) tmp_Fin_Trn.Sender_Telephone_number   = Curr_value;
        //                    }
        //                    if (NonNullFiledFound)
        //                    {
        //                            if (!(string.IsNullOrEmpty(tmp_Fin_Trn.Originating_Country_Code)))
        //                            {
        //                                if (tmp_Fin_Trn.Originating_Country_Code.Length == 2)
        //                                {
        //                                    string SaveResponse = saveMoneygram_Trxn(tmp_Fin_Trn, Curr_File_1, "tbl_WstrnUnion_Staging");
        //                                }
        //                            }
        //                    }
        //                    if (string.IsNullOrEmpty(tmp_Fin_Trn.Originating_Country_Code))
        //                    {
        //                        emptyRows++;
        //                        if (emptyRows > 20) break;
        //                    }
        //                    rowCount++;
        //                }

        //                releaseObject(xlApp);
        //                xlWorkbook.Close();
        //                releaseObject(xlWorkbook);
        //                releaseObject(xlWorksheet);
        //                releaseObject(xlRange);

        //                //log the file
        //                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("UPDATE [tbl_FileHistory] SET importStage_C = 1 WHERE  File_Name_C = '{0}'", Curr_File));

        //                System.IO.File.Copy(FileName, Bck_Up_File_Name, overwrite: true);
        //                System.IO.File.Delete(FileName);
        //            }
        //        }
        //        return "Nothing";
        //    }
        //}

        public static string fn_ManageDateStr(string Curr_value, string ContractCode, string LineNumber)
        {
            string OutDt = "";
            DateTime Curr_valueDate;
            try
            {
                if (Curr_value.Length == 8)
                {
                    if (Curr_value.Contains("/"))
                    {
                        Curr_value = Curr_value.Replace("/", "-");
                        DateTime.TryParse(Curr_value, out Curr_valueDate);
                        OutDt = string.Format("{0:yyyy-MM-dd}", Curr_valueDate);
                    }
                    else
                    {
                        Curr_value = string.Format("{0:yyyy-MM-dd}", Convert.ToDateTime(string.Format("{0}-{1}-{2}", Curr_value.Substring(0, 4), Curr_value.Substring(4, 2), Curr_value.Substring(6, 2))));
                        if (DateTime.TryParse(Curr_value, out Curr_valueDate))
                        {
                            OutDt = Curr_value;
                        }
                        else
                        {
                            Curr_value = string.Format("{0:yyyy-MM-dd}", Convert.ToDateTime(string.Format("{0}-{1}-{2}", Curr_value.Substring(4, 4), Curr_value.Substring(2, 2), Curr_value.Substring(0, 2))));
                            if (DateTime.TryParse(Curr_value, out Curr_valueDate))
                            {
                                OutDt = Curr_value;
                            }
                        }
                    }
                }
                else
                {
                    if (!Curr_value.StartsWith("-"))
                    {
                        OutDt = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.FromOADate(double.Parse(Curr_value)));
                    }
                }
                return OutDt;
            }
            catch (Exception ex)
            {
                string Err_String = string.Format("Contract Code: {0} Date: {1} Line Number: {2} Error: {3}", ContractCode, Curr_value, LineNumber, ex.StackTrace.ToString());
                if (Err_String.Length > 3000) Err_String = Err_String.Substring(0, 3000);
                string Err_Date2 = string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now);
                SqlHelper.RunSql(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], string.Format("INSERT INTO tbl_ErrorLog(Err_Number_N, Err_Desc_C,Err_Module_C,Err_Date_D) SELECT '{0}' As Err_Number_N, '{1}' As Err_Desc_C, '{2}' As Err_Module, '{3}' As Err_Date_D", ex.GetHashCode().ToString(), Err_String.Replace("'", "`"), "fn_ManageDateStr", Err_Date2));
                return "";
            }
        }


        public string save_IBankingReg_to_UserAccount_Trxn(cls_UserAccount localFinDetail, string fileNme, string targetTable)
        {
            Hashtable Fin_Trxn_Hash = new Hashtable();
            string    Constr        = ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"];
            try
            {
                 if (localFinDetail.TelephoneNo        != "") Fin_Trxn_Hash.Add("TelephoneNo"      , localFinDetail.TelephoneNo);
                  if (localFinDetail.AccountNo         != "") Fin_Trxn_Hash.Add("AccountNo"        , localFinDetail.AccountNo);
                  if (localFinDetail.Acc_Name_C        != "") Fin_Trxn_Hash.Add("Acc_Name_C"       , localFinDetail.Acc_Name_C);
                  if (localFinDetail.Currency          != "") Fin_Trxn_Hash.Add("Currency"         , localFinDetail.Currency);
                  if (localFinDetail.Limit_N           != "") Fin_Trxn_Hash.Add("Limit_N"          , localFinDetail.Limit_N);
                  if (localFinDetail.Last_Modified_D   != "") Fin_Trxn_Hash.Add("Last_Modified_D"  , localFinDetail.Last_Modified_D);
                  if (localFinDetail.Last_ModifiedBy_C != "") Fin_Trxn_Hash.Add("Last_ModifiedBy_C", localFinDetail.Last_ModifiedBy_C);
                  if (localFinDetail.Charged           != "") Fin_Trxn_Hash.Add("Charged"          , localFinDetail.Charged);
                  if (localFinDetail.Source_System_C   != "") Fin_Trxn_Hash.Add("Source_System_C"  , localFinDetail.Source_System_C);
                  if (localFinDetail.Product_C         != "") Fin_Trxn_Hash.Add("Product_C"        , localFinDetail.Product_C);
                  if (localFinDetail.ServiceProvider_C != "") Fin_Trxn_Hash.Add("ServiceProvider_C", localFinDetail.ServiceProvider_C);
                  if (localFinDetail.Extracted_YN_B    != "") Fin_Trxn_Hash.Add("Extracted_YN_B"   , localFinDetail.Extracted_YN_B);
                  if (localFinDetail.Active_YN         != "") Fin_Trxn_Hash.Add("Active_YN"        , localFinDetail.Active_YN);
                  if (localFinDetail.chargeType_C      != "") Fin_Trxn_Hash.Add("chargeType_C"     , localFinDetail.chargeType_C);
                  if (localFinDetail.Approved_YN       != "") Fin_Trxn_Hash.Add("Approved_YN"      , localFinDetail.Approved_YN);
                  if (localFinDetail.Approved_By       != "") Fin_Trxn_Hash.Add("Approved_By"      , localFinDetail.Approved_By);
                  if (localFinDetail.comment           != "") Fin_Trxn_Hash.Add("comment"          , localFinDetail.comment);
                  if (localFinDetail.Approval_Date     != "") Fin_Trxn_Hash.Add("Approval_Date"    , localFinDetail.Approval_Date);
                  if (localFinDetail.KYC_Address       != "") Fin_Trxn_Hash.Add("KYC_Address"      , localFinDetail.KYC_Address);
                  if (localFinDetail.KYC_Mobile_Number != "") Fin_Trxn_Hash.Add("KYC_Mobile_Number", localFinDetail.KYC_Mobile_Number);
                  if (localFinDetail.KYC_Acc_Name      != "") Fin_Trxn_Hash.Add("KYC_Acc_Name"     , localFinDetail.KYC_Acc_Name);
                  if (localFinDetail.Fin_Retry_No      != "") Fin_Trxn_Hash.Add("Fin_Retry_No"     , localFinDetail.Fin_Retry_No);
                  if (localFinDetail.userBranch        != "") Fin_Trxn_Hash.Add("userBranch"       , localFinDetail.userBranch);
                  if (localFinDetail.Declined_YN       != "") Fin_Trxn_Hash.Add("Declined_YN"      , localFinDetail.Declined_YN);
                  if (localFinDetail.KYC_IDNumber_C    != "") Fin_Trxn_Hash.Add("KYC_IDNumber_C"   , localFinDetail.KYC_IDNumber_C);
                  if (localFinDetail.KYC_IDType_IP     != "") Fin_Trxn_Hash.Add("KYC_IDType_IP"    , localFinDetail.KYC_IDType_IP);
                  if (localFinDetail.KYC_IDType_LF     != "") Fin_Trxn_Hash.Add("KYC_IDType_LF"    , localFinDetail.KYC_IDType_LF);
                  if (localFinDetail.AccType_IM        != "") Fin_Trxn_Hash.Add("AccType_IM"       , localFinDetail.AccType_IM);
                  if (localFinDetail.Deleted_YN_B      != "") Fin_Trxn_Hash.Add("Deleted_YN_B"     , localFinDetail.Deleted_YN_B);

                  string InsertResulst = SqlHelper.insertSQL(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], targetTable, Fin_Trxn_Hash);
                  return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }

        public string save_IBankingReg_Trxn(cls_IBankingTrxn localFinDetail, string fileNme, string targetTable)
        {
            Hashtable Fin_Trxn_Hash = new Hashtable();
            string    Constr        = ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"];
            try
            {
                 if (localFinDetail.TXREFNO         != "") Fin_Trxn_Hash.Add("TXREFNO"        , localFinDetail.TXREFNO        );
                 if (localFinDetail.SCANTIME        != "") Fin_Trxn_Hash.Add("SCANTIME"       , localFinDetail.SCANTIME       );
                 if (localFinDetail.CREATIONDATE    != "") Fin_Trxn_Hash.Add("CREATIONDATE"   , localFinDetail.CREATIONDATE   );
                 if (localFinDetail.COUNTRYCODE     != "") Fin_Trxn_Hash.Add("COUNTRYCODE"    , localFinDetail.COUNTRYCODE    );
                 if (localFinDetail.STATIONID       != "") Fin_Trxn_Hash.Add("STATIONID"      , localFinDetail.STATIONID      );
                 if (localFinDetail.BARCODE         != "") Fin_Trxn_Hash.Add("BARCODE"        , localFinDetail.BARCODE        );
                 if (localFinDetail.ORGTXREFNO      != "") Fin_Trxn_Hash.Add("ORGTXREFNO"     , localFinDetail.ORGTXREFNO     );
                 if (localFinDetail.BATCHNAME       != "") Fin_Trxn_Hash.Add("BATCHNAME"      , localFinDetail.BATCHNAME      );
                 if (localFinDetail.CURRENTSTEPNAME != "") Fin_Trxn_Hash.Add("CURRENTSTEPNAME", localFinDetail.CURRENTSTEPNAME);
                 if (localFinDetail.CURRENTQUEUE    != "") Fin_Trxn_Hash.Add("CURRENTQUEUE"   , localFinDetail.CURRENTQUEUE   );
                 if (localFinDetail.STATUS          != "") Fin_Trxn_Hash.Add("STATUS"         , localFinDetail.STATUS         );
                 if (localFinDetail.BRANCHCODE      != "") Fin_Trxn_Hash.Add("BRANCHCODE"     , localFinDetail.BRANCHCODE     );
                 if (localFinDetail.LASTSTEPNAME    != "") Fin_Trxn_Hash.Add("LASTSTEPNAME"   , localFinDetail.LASTSTEPNAME   );
                 if (localFinDetail.MODIFIEDUSERID  != "") Fin_Trxn_Hash.Add("MODIFIEDUSERID" , localFinDetail.MODIFIEDUSERID );
                 if (localFinDetail.ACCOUNT_NO      != "") Fin_Trxn_Hash.Add("ACCOUNT_NO"     , localFinDetail.ACCOUNT_NO     );
                 if (localFinDetail.FULL_NAME       != "") Fin_Trxn_Hash.Add("FULL_NAME"      , localFinDetail.FULL_NAME      );
                 if (localFinDetail.IDNUMBER        != "") Fin_Trxn_Hash.Add("IDNUMBER"       , localFinDetail.IDNUMBER       );
                 if (localFinDetail.MOBILE_NUMBER   != "") Fin_Trxn_Hash.Add("MOBILE_NUMBER"  , localFinDetail.MOBILE_NUMBER  );
                 if (localFinDetail.TYPE_OF_REQUEST != "") Fin_Trxn_Hash.Add("TYPE_OF_REQUEST", localFinDetail.TYPE_OF_REQUEST);
                 if (localFinDetail.RELATIONSHIP_NO != "") Fin_Trxn_Hash.Add("RELATIONSHIP_NO", localFinDetail.RELATIONSHIP_NO);
                 if (localFinDetail.CASE_STATUS     != "") Fin_Trxn_Hash.Add("CASE_STATUS"    , localFinDetail.CASE_STATUS    );
                 if (localFinDetail.COMMENTS        != "") Fin_Trxn_Hash.Add("COMMENTS"       , localFinDetail.COMMENTS       );

                 Fin_Trxn_Hash.Add("File_Name_C" , fileNme);
                 Fin_Trxn_Hash.Add("Batch_ID_C"  , localFinDetail.Batch_ID_C);
                 Fin_Trxn_Hash.Add("Import_Time" , string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                 Fin_Trxn_Hash.Add("Approved_YN" , "1");
                 Fin_Trxn_Hash.Add("Posted_YN"   , "0");

                 string InsertResulst = SqlHelper.insertSQL(ConfigurationManager.AppSettings["EcoCash_SQL_DB_Connection"], targetTable, Fin_Trxn_Hash);
                 return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }

        public string saveMoneygram_Trxn(cls_MoneyGramTrxn localFinDetail, string fileNme, string targetTable)
        {
            Hashtable Fin_Trxn_Hash = new Hashtable();
            string    Constr        = ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"];
            try
            {
                  if (localFinDetail.Originating_Country_Code  != "") Fin_Trxn_Hash.Add("Originating_Country_Code" , localFinDetail.Originating_Country_Code);
                  if (localFinDetail.Originating_Currency_Code != "") Fin_Trxn_Hash.Add("Originating_Currency_Code", localFinDetail.Originating_Currency_Code);
                  if (localFinDetail.Terminal_ID               != "") Fin_Trxn_Hash.Add("Terminal_ID"              , localFinDetail.Terminal_ID);
                  if (localFinDetail.Op_ID                     != "") Fin_Trxn_Hash.Add("Op_ID"                    , localFinDetail.Op_ID);
                  if (localFinDetail.Superv_Op_ID              != "") Fin_Trxn_Hash.Add("Superv_Op_ID"             , localFinDetail.Superv_Op_ID);
                  if (localFinDetail.Username                  != "") Fin_Trxn_Hash.Add("Username"                 , localFinDetail.Username);
                  if (localFinDetail.MTCN                      != "") Fin_Trxn_Hash.Add("MTCN"                     , localFinDetail.MTCN);
                  if (localFinDetail.Receiver_Name             != "") Fin_Trxn_Hash.Add("Receiver_Name"            , localFinDetail.Receiver_Name);
                  if (localFinDetail.Sender                    != "") Fin_Trxn_Hash.Add("Sender"                   , localFinDetail.Sender);
                  if (localFinDetail.Destination_Country_Code  != "") Fin_Trxn_Hash.Add("Destination_Country_Code" , localFinDetail.Destination_Country_Code);
                  if (localFinDetail.Destination_Currency_Code != "") Fin_Trxn_Hash.Add("Destination_Currency_Code", localFinDetail.Destination_Currency_Code);
                  if (localFinDetail.Trn_Type                  != "") Fin_Trxn_Hash.Add("Trn_Type"                 , localFinDetail.Trn_Type);
                  if (localFinDetail.Creation_Date             != "") Fin_Trxn_Hash.Add("Creation_Date"            , localFinDetail.Creation_Date);
                  if (localFinDetail.Principal_Amount          != "") Fin_Trxn_Hash.Add("Principal_Amount"         , localFinDetail.Principal_Amount);
                  if (localFinDetail.Charge                    != "") Fin_Trxn_Hash.Add("Charge"                   , localFinDetail.Charge);
                  if (localFinDetail.Delivery_Charge           != "") Fin_Trxn_Hash.Add("Delivery_Charge"          , localFinDetail.Delivery_Charge);
                  if (localFinDetail.Message_Charge            != "") Fin_Trxn_Hash.Add("Message_Charge"           , localFinDetail.Message_Charge);
                  if (localFinDetail.Promotion_Discount        != "") Fin_Trxn_Hash.Add("Promotion_Discount"       , localFinDetail.Promotion_Discount);
                  if (localFinDetail.Collect_Amount            != "") Fin_Trxn_Hash.Add("Collect_Amount"           , localFinDetail.Collect_Amount);
                  if (localFinDetail.Exchange_Rate             != "") Fin_Trxn_Hash.Add("Exchange_Rate"            , localFinDetail.Exchange_Rate);
                  if (localFinDetail.Expected_Payout_Amount    != "") Fin_Trxn_Hash.Add("Expected_Payout_Amount"   , localFinDetail.Expected_Payout_Amount);
                  if (localFinDetail.Total_Charges             != "") Fin_Trxn_Hash.Add("Total_Charges"            , localFinDetail.Total_Charges);
                  if (localFinDetail.Total_Taxes               != "") Fin_Trxn_Hash.Add("Total_Taxes"              , localFinDetail.Total_Taxes);
                  if (localFinDetail.Payment_Type              != "") Fin_Trxn_Hash.Add("Payment_Type"             , localFinDetail.Payment_Type);
                  if (localFinDetail.Destination               != "") Fin_Trxn_Hash.Add("Destination"              , localFinDetail.Destination);
                  if (localFinDetail.Receiver_Address          != "") Fin_Trxn_Hash.Add("Receiver_Address"         , localFinDetail.Receiver_Address);
                  if (localFinDetail.Receiver_Primary_ID_Type  != "") Fin_Trxn_Hash.Add("Receiver_Primary_ID_Type" , localFinDetail.Receiver_Primary_ID_Type);
                  if (localFinDetail.Receiver_Primary_ID       != "") Fin_Trxn_Hash.Add("Receiver_Primary_ID"      , localFinDetail.Receiver_Primary_ID);
                  if (localFinDetail.Receiver_Telephone_number != "") Fin_Trxn_Hash.Add("Receiver_Telephone_number", localFinDetail.Receiver_Telephone_number);
                  if (localFinDetail.Sending_currency          != "") Fin_Trxn_Hash.Add("Sending_currency"         , localFinDetail.Sending_currency);
                  if (localFinDetail.Sender_Principal_Amount   != "") Fin_Trxn_Hash.Add("Sender_Principal_Amount"  , localFinDetail.Sender_Principal_Amount);
                  if (localFinDetail.Sender_Country            != "") Fin_Trxn_Hash.Add("Sender_Country"           , localFinDetail.Sender_Country);
                  if (localFinDetail.Sender_Primary_ID_Type    != "") Fin_Trxn_Hash.Add("Sender_Primary_ID_Type"   , localFinDetail.Sender_Primary_ID_Type);
                  if (localFinDetail.Sender_Primary_ID         != "") Fin_Trxn_Hash.Add("Sender_Primary_ID"        , localFinDetail.Sender_Primary_ID);
                  if (localFinDetail.Sender_Address            != "") Fin_Trxn_Hash.Add("Sender_Address"           , localFinDetail.Sender_Address);
                  if (localFinDetail.Sender_Telephone_number   != "") Fin_Trxn_Hash.Add("Sender_Telephone_number"  , localFinDetail.Sender_Telephone_number);


                  Fin_Trxn_Hash.Add("File_Name_C", fileNme);
                  Fin_Trxn_Hash.Add("Batch_ID_C" , localFinDetail.Batch_ID_C);
                  Fin_Trxn_Hash.Add("Import_Time", string.Format("{0:yyyy-MM-dd HH:mm:ss}", DateTime.Now));
                  Fin_Trxn_Hash.Add("Approved_YN", "0");
                  Fin_Trxn_Hash.Add("Posted_YN"  , "0");

                 string InsertResulst = SqlHelper.insertSQL(ConfigurationManager.AppSettings["Interface_SQL_DB_Connection"], targetTable, Fin_Trxn_Hash);
                 return "SUCCESS";
            }
            catch (Exception ex)
            {
                return string.Format("FAILURE {0}", ex.StackTrace.ToString());
            }
        }

        public void releaseObject(object obj)
        {
            try
            {
                System.Runtime.InteropServices.Marshal.ReleaseComObject(obj);
                obj = null;
            }
            catch (Exception ex)
            {
                obj = null;
                //MessageBox.Show("Unable to release the Object " + ex.ToString());
            }
            finally
            {
                GC.Collect();
            }
        } 

        protected static string varFormatDate_To_YYYY_MM_DD(string varDateFromTextBox)
        {
            string varDateYear  = varDateFromTextBox.Substring(6, 4);
            string varDateMonth = varDateFromTextBox.Substring(3, 2);
            string varDateDay   = varDateFromTextBox.Substring(0, 2);
            return varDateYear + "-" + varDateMonth + "-" + varDateDay;
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            License_Obj Licence_Obj_TZ = new License_Obj();
            Licence_Obj_TZ.IntialiseResults();

            Licence_Obj_TZ = fn_Check_License(72, "SELTECH");
            if (Licence_Obj_TZ.Response_Code == 0)
            {
                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.INSTALLATION_TYPE == "CLIENT")
                {
                    SendFileToBank();
                }

                if (e_Verify_BACK_OFFICE_Service_Interface.Properties.Settings.Default.INSTALLATION_TYPE == "SERVER")
                {
                    //fnGetTextfromPdf(@"C:\Zimra\CAMS\MTC  CONTRACT  BASED SANCTION FARMERS.pdf", string.Format("{0}{1:yyyyMMddHHmmssffff}{2}", @"C:\Zimra\CAMS\MTC",DateTime.Now,"Tmp_Text.txt"));
                    Zimra_Integration();
                    SendCreditAlerts();
                    ReverseZeePayIncoming();
                    ReverseZeePayOutgoing();
                    //Acquire_Incoming_And_Confirmations_Cloud();
                    UpdateDigitalID_ASYNCH();
                    //Acquire_Outward_Trxns_From_Oracle_IB_FTOT();
                    //Acquire_Outward_Trxns_From_Oracle_FSTP();
                    // Acquire_Outward_Trxns_From_Oracle_ZIPP_InternetBanking();
                    UpdateUserAccountKYCDetails();
                    //Post_Outward_to_MQ();
                    //Post_Outward_to_Cloud();
                    //Post_Incoming_to_FCUBS_FT();
                    //Post_Incoming_Failues_To_Suspense_FT();
                    //Acquire_Incoming_And_Confirmations();

                    //SR_Class.fn_Save_UserLogging_Detail("before import", "0", "15831", "No Session");
                    Parse_and_Import_SFI_File();
                    //SR_Class.fn_Save_UserLogging_Detail("after  import", "0", "15831", "No Session");
                    Post_Zeepay_OutGoing_Transactions();
                    //SR_Class.fn_Save_UserLogging_Detail("before getting response", "0", "16604", "No Session");
                    Get_Zeepay_OutGoing_Transactions_Response();

                    // send_EmailAlerts();
                    // 
                    //UpdateRemitterName();

                    //Acquire_RTGS_Outwards_from_History_FSTP();
                    //Acquire_RTGS_Outwards_from_History_FTOT();
                    //Acquire_RTGS_Outwards_from_History_ZIPP();
                    //Import_XML_Files();
                    //Import_IBanking_RegFile();
                    //Import_IBanking_RegFile_Move_to_UserAccount();
                    //Import_WesternUnion_csv_Files();
                    //if (1==9)
                    {
                        Post_MobileCharges_n_Levy_STB();
                        autoRegister2MNO();
                        Post_Mobile_Charges_n_Levy_ABC();

                        Reverse_Mobile_Transactions_Data_Insert_Zipit();
                        Reverse_Mobile_Transactions_Zipit();
                        Reverse_Mobile_Transactions_Data_Insert();
                        Reverse_Mobile_Transactions_SCB();
                        Reverse_Mobile_Transactions();

                        //Archive_Mobile_Records();

                        // fn_Post_to_Barclays_Brains();
                        fn_Post_to_ZIMRA();
                        //Alert_for_ZIMRA_Transactions();
                        //fn_Post_to_ZIMRA_OfflineFile();
                        //Synch_Customers_to_Selcom();
                        //Synch_Accounts_to_Selcom();

                        //De_Synch_Accounts_from_Selcom();
                        //De_Synch_Customers_from_Selcom();
                        //Import_Barclays_StaticData();

                        //Import_SCB_AML_Transactions();
                        //Import_SCB_Static_Data();

                        //CreateAML_File_CTR_SCB();
                        //CreateAML_File_STR();

                        Synch_ZimraBPNumbers();
                    }
                }
                //Alert_for_TZ_Mobile_Transactions();
            }
            System.GC.Collect();

            //Alert_for_TZ_Mobile_License(Licence_Obj_TZ );
            //Alert_for_ZAM_Interface_License(Licence_Obj_TZ);
        }
  
    }

}


    

